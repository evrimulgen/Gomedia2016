unit ReorderFRMUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, dxPSGlbl, dxPSUtl, dxPSEngn, dxPrnPg, dxBkgnd, dxWrap, dxPrnDev,
  dxPSCompsProvider, dxPSFillPatterns, dxPSEdgePatterns, cxStyles, cxCustomData,
  cxGraphics, cxFilter, cxData, cxDataStorage, cxEdit, DB, cxDBData,
  cxGridCustomTableView, cxGridTableView, cxGridDBTableView, dxmdaset,
  cxGridLevel, cxClasses, cxControls, cxGridCustomView, cxGrid, dxPSCore,
  dxPSDBBasedXplorer, dxPgsDlg, dxPrnDlg, dxPScxCommon, dxBar,
  cxGridExportLink, SHDocVw, dxPScxGrid6Lnk, cxLookAndFeels,
  cxLookAndFeelPainters, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMoneyTwins, dxSkinOffice2007Black, dxSkinOffice2007Blue,
  dxSkinOffice2007Green, dxSkinOffice2007Pink, dxSkinOffice2007Silver,
  dxSkinPumpkin, dxSkinSeven, dxSkinSharp, dxSkinSilver, dxSkinSpringTime,
  dxSkinStardust, dxSkinSummer2008, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, dxSkinsdxBarPainter,
  dxPSPDFExportCore, dxPSPDFExport, cxDrawTextUtils, dxPSPrVwStd, dxPSPrVwAdv,
  dxPSPrVwRibbon, dxPScxEditorProducers, dxPScxExtEditorProducers,
  dxPScxPageControlProducer, dxBarSkinnedCustForm, dxSkinsdxRibbonPainter;

type
  TReorderForm = class(TForm)
    dxBarManager: TdxBarManager;
    dxBarButtonPrint: TdxBarButton;
    dxBarButtonSave: TdxBarButton;
    dxBarGroup1: TdxBarGroup;
    dxComponentPrinter: TdxComponentPrinter;
    dxComponentPrinterLink1: TdxGridReportLink;
    dxPageSetupDialog: TdxPageSetupDialog;
    dxPrintDialog: TdxPrintDialog;
    dxPrintStyleManager: TdxPrintStyleManager;
    dxPSDBBasedExplorer1: TdxPSDBBasedExplorer;
    dxPSEngineController: TdxPSEngineController;
    Grid: TcxGrid;
    Gridview: TcxGridDBTableView;
    GridLevel1: TcxGridLevel;
    SaveDialog: TSaveDialog;
    TableData: TdxMemData;
    TableDataEAN: TStringField;
    TableDataNom: TStringField;
    TableDataRootCategoryName: TStringField;
    TableDataQuantity: TIntegerField;
    TableDataConfirmBO: TBooleanField;
    Source: TDataSource;
    GridviewRecId: TcxGridDBColumn;
    GridviewEAN: TcxGridDBColumn;
    GridviewName: TcxGridDBColumn;
    GridviewRootCategoryName: TcxGridDBColumn;
    GridviewQuantity: TcxGridDBColumn;
    dxBarButton1: TdxBarButton;
    TableDataGroupAvailable: TIntegerField;
    TableDataAvailable: TIntegerField;
    GridviewGroupAvailable: TcxGridDBColumn;
    GridviewAvailable: TcxGridDBColumn;
    TableDataIDART: TStringField;
    GridviewIDART: TcxGridDBColumn;
    TableDataQCLD: TIntegerField;
    GridviewQCLD: TcxGridDBColumn;
    procedure dxBarButton1Click(Sender: TObject);
    procedure dxBarButtonSaveClick(Sender: TObject);
    procedure dxBarButtonPrintClick(Sender: TObject);
    procedure GridviewCellDblClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  ReorderForm: TReorderForm;

implementation

uses MainFRMUnit,TransferRequestFRMUnit;

{$R *.dfm}

procedure TReorderForm.dxBarButton1Click(Sender: TObject);
var
QueryString:Widestring;
i:integer;
begin
 TableData.First;
 QueryString:='';
 i:=1;
 while not TableData.Eof do begin
  if TableData.FieldByName('Quantity').AsInteger>0  then begin
   QueryString:=QueryString+'&id_art'+inttostr(i)+'='+TableData.FieldByName('IDART').AsString;
   QueryString:=QueryString+'&q'+inttostr(i)+'='+TableData.FieldByName('Quantity').AsString;
   i:=i+1;
  end;
  TableData.Next;
 end;
 MainForm.WebbrowserCLDAddItems(QueryString);
 self.close;
end;

procedure TReorderForm.dxBarButtonPrintClick(Sender: TObject);
begin
 dxComponentPrinter.Print(true,nil);
end;

procedure TReorderForm.dxBarButtonSaveClick(Sender: TObject);
var Filename:String;
begin
     FileName:='Order'+'.xls';
     SaveDialog.FileName:=FileName;
     if SaveDialog.Execute then begin
      ExportGridToExcel(SaveDialog.FileName,Grid,True,True,True);
     end;
end;

procedure TReorderForm.GridviewCellDblClick(Sender: TcxCustomGridTableView;
  ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
  AShift: TShiftState; var AHandled: Boolean);

aTransferRequestForm: TTransferRequestForm;
begin
        aTransferRequestForm := TTransferRequestForm.Create(self);
        aTransferRequestForm.products_model :=
          TableData.FieldByName('EAN').AsString;
        aTransferRequestForm.products_name :=
          TableData.FieldByName('Name').AsString;
        aTransferRequestForm.products_root_category :=
          TableData.FieldByName('RootCategoryName').AsString;
        aTransferRequestForm.Show;
end;

end.
