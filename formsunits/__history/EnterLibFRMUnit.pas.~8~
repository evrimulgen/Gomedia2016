unit EnterLibFrmUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, Grids, DBGrids, ExtCtrls, DBCtrls, DllImp,
  JvLabel, JvExControls, JvComponent, JvSegmentedLEDDisplay, strutils, JvGIF,
  JvExStdCtrls, JvHtControls;

type
  TFormEnterLibrary = class(TForm)
    BitBtnNextCD: TBitBtn;
    BitBtnOk: TBitBtn;
    BitBtnCancel: TBitBtn;
    LedSlot: TJvSegmentedLEDDisplay;
    Label1: TLabel;
    Messagelabel: TJvHTLabel;
    Image2: TImage;
    procedure FormShow(Sender: TObject);
    procedure BitBtnOkClick(Sender: TObject);
    procedure BitBtnNextCDClick(Sender: TObject);
    procedure BitBtnCancelClick(Sender: TObject);
  private
    FEOwner: string;
    FEModel: string;
    procedure CreateParams(var Params: TCreateParams); override;
    { Private declarations }
  public
    { Public declarations }
  published
    procedure Enter(owner, model: string);
  end;

var
  FormEnterLibrary: TFormEnterLibrary;
  Machine, slot: integer;

implementation

uses Mainfrmunit, ClientDmUnit, Threadsunit;

{$R *.dfm}

procedure TFormEnterLibrary.CreateParams(var Params: TCreateParams);
begin
  inherited CreateParams(Params);
  with Params do
  begin
    ExStyle   := ExStyle or WS_EX_APPWINDOW;
    WndParent := GetDesktopwindow;
  end;
end;

procedure TFormEnterLibrary.FormShow(Sender: TObject);
var
  FoundSlot: boolean;
  NowRow, Pslot: integer;
  MachineID: string;
  USBCDMoveOpen: TUSBCDMoveOpen;

begin
  Messagelabel.Caption := '';

  BitBtnNextCD.Enabled := False;
  BitBtnOk.Enabled     := False;

  RemoteDB.Caroussel.IndexFieldNames := 'machine_id;slot_id';

  NowRow    := 1;
  FoundSlot := False;

  while (NowRow < MainForm.StringGridDacal.Rowcount - 1) and (FoundSlot = False) do
  begin
    MachineID                   := MainForm.StringGridDacal.Cells[0, NowRow];
    RemoteDB.Caroussel.Filter   := 'machine_id = ' + MachineID;
    RemoteDB.Caroussel.Filtered := True;
    RemoteDB.Caroussel.First;

    // Si DB Vide
    if RemoteDB.Caroussel.Eof and RemoteDB.Caroussel.Bof then
    begin
      FoundSlot := True;
      slot      := 1;
    end;

    // SI Trous dans la DB
    Pslot := 0;
    while (not RemoteDB.Caroussel.Eof) and (FoundSlot = False) do
    begin
      if RemoteDB.Caroussel.FieldByName('slot_id').Value > Pslot + 1 then
      begin
        slot      := Pslot + 1;
        FoundSlot := True;
      end;
      Pslot := RemoteDB.Caroussel.FieldByName('slot_id').Value;
      RemoteDB.Caroussel.Next;
    end;

    // Si DB Sans trou New Id Next Machine
    if FoundSlot = False then
    begin
      if Pslot < 150 then
      begin
        slot      := Pslot + 1;
        FoundSlot := True;
      end else begin
      end;
    end;

    NowRow := NowRow + 1;
  end;

  RemoteDB.Caroussel.Filter   := '';
  RemoteDB.Caroussel.Filtered := False;

  if FoundSlot then
  begin
    USBCDMoveOpen := TUSBCDMoveOpen.Create(StrToInt(MachineID), slot);

    if length(floattostr(slot)) = 1 then
    begin
      LedSlot.Text := '00' + floattostr(slot);
    end;
    if length(floattostr(slot)) = 2 then
    begin
      LedSlot.Text := '0' + floattostr(slot);
    end;
    if length(floattostr(slot)) = 3 then
    begin
      LedSlot.Text := floattostr(slot);
    end;
    USBCDMoveOpen.Execute;

    RemoteDB.Caroussel.Append;
    RemoteDB.Caroussel.FieldByName('machine_id').Value := StrToInt(MachineID);
    RemoteDB.Caroussel.FieldByName('slot_id').Value    := slot;
    RemoteDB.Caroussel.FieldByName('model').Value      := RemoteDB.Products.FieldByName('products_model').Value;
    RemoteDB.Caroussel.FieldByName('customer_nbr').AsString := FEOwner;
    RemoteDB.Caroussel.FieldByName('isRoot').Value := True;
    RemoteDB.Caroussel.FieldByName('NextId').Value := -1;
    RemoteDB.Caroussel.Post;
    Self.BitBtnOk.Enabled     := True;
    Self.BitBtnNextCD.Enabled := True;
  end else begin
    Messagelabel.Caption := 'CD Library pleines ou indisponibles';
  end;

end;

procedure TFormEnterLibrary.BitBtnNextCDClick(Sender: TObject);
var
  NowRow, FormerId: integer;
  FoundSlot: boolean;
  Pslot: integer;
  MachineID: string;
  USBCDMoveOpen: TUSBCDMoveOpen;

begin
  FormerId := RemoteDB.Caroussel.FieldByName('id').Value;

  NowRow    := 1;
  FoundSlot := False;

  while (NowRow < MainForm.StringGridDacal.Rowcount - 1) and (FoundSlot = False) do
  begin
    MachineID                   := MainForm.StringGridDacal.Cells[0, NowRow];
    RemoteDB.Caroussel.Filter   := 'machine_id = ' + MachineID;
    RemoteDB.Caroussel.Filtered := True;
    RemoteDB.Caroussel.First;

    // Si DB Vide
    if RemoteDB.Caroussel.Eof and RemoteDB.Caroussel.Bof then
    begin
      FoundSlot := True;
      slot      := 1;
    end;

    // SI Trous dans la DB
    Pslot := 0;
    while (not RemoteDB.Caroussel.Eof) and (FoundSlot = False) do
    begin
      if RemoteDB.Caroussel.FieldByName('slot_id').Value > Pslot + 1 then
      begin
        slot      := Pslot + 1;
        FoundSlot := True;
      end;
      Pslot := RemoteDB.Caroussel.FieldByName('slot_id').Value;
      RemoteDB.Caroussel.Next;
    end;

    // Si DB Sans trou New Id Next Machine
    if FoundSlot = False then
    begin
      if Pslot < 150 then
      begin
        slot      := Pslot + 1;
        FoundSlot := True;
      end else begin
      end;
    end;

    NowRow := NowRow + 1;
  end;

  RemoteDB.Caroussel.Filter   := '';
  RemoteDB.Caroussel.Filtered := False;

  if FoundSlot then
  begin
    USBCDMoveOpen := TUSBCDMoveOpen.Create(StrToInt(MachineID), slot);
    if length(floattostr(slot)) = 1 then
    begin
      LedSlot.Text := '00' + floattostr(slot);
    end;
    if length(floattostr(slot)) = 2 then
    begin
      LedSlot.Text := '0' + floattostr(slot);
    end;
    if length(floattostr(slot)) = 3 then
    begin
      LedSlot.Text := floattostr(slot);
    end;
    USBCDMoveOpen.Execute;
    RemoteDB.Caroussel.Locate('id', FormerId, []);
    RemoteDB.Caroussel.Edit;
    RemoteDB.Caroussel.FieldByName('isRoot').Value := False;
    RemoteDB.Caroussel.Post;

    RemoteDB.Caroussel.Append;
    RemoteDB.Caroussel.FieldByName('machine_id').Value   := StrToInt(MachineID);
    RemoteDB.Caroussel.FieldByName('slot_id').Value      := slot;
    RemoteDB.Caroussel.FieldByName('model').Value        := RemoteDB.Products.FieldByName('products_model').Value;
    RemoteDB.Caroussel.FieldByName('customer_nbr').Value := FEOwner;
    RemoteDB.Caroussel.FieldByName('isRoot').Value       := True;
    RemoteDB.Caroussel.FieldByName('NextId').Value       := FormerId;
    RemoteDB.Caroussel.Post;
  end else begin
    Messagelabel.Caption := 'CD Library pleines ou indisponibles';
  end;
end;

procedure TFormEnterLibrary.BitBtnCancelClick(Sender: TObject);
begin
  if BitBtnOk.Enabled then
    RemoteDB.Caroussel.Delete;
  // N'efface que si qqch d'entré pas si pas de machine
  ModalResult := MrOk;
end;

procedure TFormEnterLibrary.BitBtnOkClick(Sender: TObject);
begin
  ModalResult := MrOk;
end;

procedure TFormEnterLibrary.Enter(owner, model: string);
begin
  FEOwner := owner;
  FEModel := model;
  Self.ShowModal;
end;

end.
