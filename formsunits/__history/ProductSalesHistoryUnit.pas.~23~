unit ProductSalesHistoryUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,
  DB, cxGridLevel, cxClasses, cxControls,
  cxGridCustomView, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGrid, ExtCtrls,
  StdCtrls, Grids, DBGrids, Buttons,
  ComCtrls, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, cxStyles,
  cxCustomData, cxFilter, cxData, cxDataStorage, cxEdit, cxNavigator, cxDBData;

type
  TFormProductSaleHistory = class(TForm)
    PanelTop: TPanel;
    PanelGrid: TPanel;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    cxGrid1DBTableView1items_sold_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_sales_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_model: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_name: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_quantity: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_price_gross: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_price_catalog: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_price_stock: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_owner_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_supplier_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_date_in: TcxGridDBColumn;
    BitBtnPrintTicket: TBitBtn;
    BitBtnFindCustomer: TBitBtn;
    PanelBottom: TPanel;
    DBGrid1: TDBGrid;
    CheckBoxForce: TCheckBox;
    DateTimePickerDate: TDateTimePicker;
    procedure BitBtnPrintTicketClick(Sender: TObject);
    procedure BitBtnFindCustomerClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
  private
    { Private declarations }
  public
    model: string;
    { Public declarations }
  end;

var
  FormProductSaleHistory: TFormProductSaleHistory;

implementation

uses
  ClientDMUnit, MainFrmUnit;

{$R *.dfm}

procedure TFormProductSaleHistory.BitBtnFindCustomerClick(Sender: TObject);
var
  SalesId, Filter: string;
begin
  SalesId := RemoteDB.netshop_items_sold.FieldByName('items_sold_sales_id').AsString;
  Filter  := RemoteDB.netshop_items_sold.Filter;
  RemoteDB.SetItemstoSales;
  if RemoteDB.netshop_sales.Locate('sales_id', SalesId, []) then
  begin
    try
      ShowMessage('Client : ' + RemoteDB.netshop_sales.FieldByName('sales_customer_id').AsString);
    finally
      RemoteDB.FreeItemsTo;
      RemoteDB.netshop_items_sold.Filter   := Filter;
      RemoteDB.netshop_items_sold.Filtered := True;
    end;
  end
  else
    ShowMessage('Données du ticket plus disponibles');
end;

procedure TFormProductSaleHistory.BitBtnPrintTicketClick(Sender: TObject);
var
  SalesId, Filter: string;
  OriginalDate: Double;
begin
  SalesId := RemoteDB.netshop_items_sold.FieldByName('items_sold_sales_id').AsString;
  Filter  := RemoteDB.netshop_items_sold.Filter;
  RemoteDB.SetItemstoSales;
  if RemoteDB.netshop_sales.Locate('sales_id', SalesId, []) then
  begin
    try
      if CheckBoxForce.Checked then
      begin
        OriginalDate := RemoteDB.netshop_sales.FieldByName('sales_date_time').Value;
        RemoteDB.netshop_sales.Edit;
        RemoteDB.netshop_sales.FieldByName('sales_date_time').Value := DateTimePickerDate.Date;
        RemoteDB.netshop_sales.Post;
      end;
      MainForm.BitBtnCustomerBuyTicketClick(nil)
    finally
      if CheckBoxForce.Checked then
      begin
        RemoteDB.netshop_sales.Edit;
        RemoteDB.netshop_sales.FieldByName('sales_date_time').Value := OriginalDate;
        RemoteDB.netshop_sales.Post;
      end;
      RemoteDB.FreeItemsTo;
      RemoteDB.netshop_items_sold.Filter   := Filter;
      RemoteDB.netshop_items_sold.Filtered := True;
    end;
  end
  else
    ShowMessage('Données du ticket plus disponibles');
end;

procedure TFormProductSaleHistory.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  RemoteDB.CDSQuery.Close;
end;

procedure TFormProductSaleHistory.FormShow(Sender: TObject);
begin
  RemoteDB.SQLQuery.CommandText := 'CALL SalesHistorySum(' + (model) + ');';
  RemoteDB.CDSQuery.Open;
end;

end.
