unit ProductSalesHistoryUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxStyles, cxCustomData, cxGraphics, cxFilter, cxData,
  cxDataStorage, cxEdit, DB, cxDBData, cxGridLevel, cxClasses, cxControls,
  cxGridCustomView, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGrid, ExtCtrls, cxCurrencyEdit, cxCalendar,
  cxTextEdit, cxContainer, cxDBEdit, StdCtrls, Grids, DBGrids, Buttons,
  cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore, dxSkinBlack, dxSkinBlue,
  dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinFoggy,
  dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky,
  dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinPumpkin, dxSkinSeven, dxSkinSharp, dxSkinSilver,
  dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinXmas2008Blue, dxSkinscxPCPainter, ComCtrls;

type
  TFormProductSaleHistory = class(TForm)
    PanelTop: TPanel;
    PanelGrid: TPanel;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    cxGrid1DBTableView1items_sold_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_sales_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_model: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_name: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_quantity: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_price_gross: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_price_catalog: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_price_stock: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_owner_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_supplier_id: TcxGridDBColumn;
    cxGrid1DBTableView1items_sold_date_in: TcxGridDBColumn;
    BitBtnPrintTicket: TBitBtn;
    BitBtnFindCustomer: TBitBtn;
    PanelBottom: TPanel;
    DBGrid1: TDBGrid;
    CheckBoxForce: TCheckBox;
    DateTimePickerDate: TDateTimePicker;
    procedure BitBtnPrintTicketClick(Sender: TObject);
    procedure BitBtnFindCustomerClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
  private
    { Private declarations }
  public
    model : string;
    { Public declarations }
  end;

var
  FormProductSaleHistory: TFormProductSaleHistory;

implementation

uses
 ClientDMUnit, MainFrmUnit;

{$R *.dfm}

procedure TFormProductSaleHistory.BitBtnFindCustomerClick(Sender: TObject);
 Var SalesId,Filter:String;
begin
 SalesId:=RemoteDB.Items_Solditems_sold_sales_id.AsString;
 Filter:=RemoteDB.Items_Sold.Filter;
 RemoteDB.SetItemstoSales;
 if RemoteDB.Sales.Locate('sales_id',SalesId,[]) then begin
  try
   ShowMessage('Client : ' + RemoteDB.Salessales_customer_id.AsString);
  finally
    RemoteDB.FreeItemsTo;
    RemoteDB.Items_Sold.Filter:=Filter;
    RemoteDB.Items_Sold.Filtered:=True;
  end;
 end else ShowMessage('Données du ticket plus disponibles');
end;

procedure TFormProductSaleHistory.BitBtnPrintTicketClick(Sender: TObject);
 Var SalesId,Filter:String;
     OriginalDate:Double;
begin
 SalesId:=RemoteDB.Items_Solditems_sold_sales_id.AsString;
 Filter:=RemoteDB.Items_Sold.Filter;
 RemoteDB.SetItemstoSales;
 if RemoteDB.Sales.Locate('sales_id',SalesId,[]) then begin
  try
   if CheckBoxForce.Checked then begin
     OriginalDate:=RemoteDB.Sales.FieldByName('sales_date_time').Value;
     RemoteDB.Sales.Edit;
     RemoteDB.Sales.FieldByName('sales_date_time').Value:=DateTimePickerDate.Date;
     RemoteDB.Sales.Post;
   end;
   MainForm.BitBtnCustomerBuyTicketClick(nil)
  finally
   if CheckBoxForce.Checked then begin
    RemoteDB.Sales.Edit;
    RemoteDB.Sales.FieldByName('sales_date_time').Value:=OriginalDate;
    RemoteDB.Sales.Post;
   end;
    RemoteDB.FreeItemsTo;
    RemoteDB.Items_Sold.Filter:=Filter;
    RemoteDB.Items_Sold.Filtered:=True;
  end;
 end else ShowMessage('Données du ticket plus disponibles');
end;

procedure TFormProductSaleHistory.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  RemoteDB.CDSQuery.Close;
end;

procedure TFormProductSaleHistory.FormShow(Sender: TObject);
begin
 RemoteDB.SQLQuery.CommandText:='CALL SalesHistorySum('+(model)+');';
 RemoteDB.CDSQuery.Open;
end;

end.
