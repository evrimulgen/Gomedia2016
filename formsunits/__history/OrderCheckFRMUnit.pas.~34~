unit OrderCheckFRMUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,
  DB, dxBar, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxClasses, cxControls, cxGridCustomView,
  cxGrid, dxPSEngn,
  dxPSCore,
  dxPSDBBasedXplorer, dxPgsDlg, dxPrnDlg, cxGridExportLink,
  StdCtrls, ExtCtrls,




  dxPScxGridLnk, cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, cxStyles,
  cxCustomData, cxFilter, cxData, cxDataStorage, cxEdit, cxNavigator, cxDBData,
  dxPSGlbl, dxPSUtl, dxPrnPg, dxBkgnd, dxWrap, dxPrnDev, dxPSCompsProvider,
  dxPSFillPatterns, dxPSEdgePatterns, dxPSPDFExportCore, dxPSPDFExport,
  cxDrawTextUtils, dxPSPrVwStd, dxPSPrVwRibbon, dxPSPrVwAdv,
  dxPScxPageControlProducer, dxPScxGridLayoutViewLnk, dxPScxEditorProducers,
  dxPScxExtEditorProducers;

type
  TOrderCheckForm = class(TForm)
    cxGridCustomersAlert: TcxGrid;
    cxGridDBTableViewCustomersOrders: TcxGridDBTableView;
    cxGridDBTableViewCustomersOrderscustomers_alerts_products_name: TcxGridDBColumn;
    cxGridDBTableViewCustomersOrderscustomers_alerts_products_cat: TcxGridDBColumn;
    cxGridDBTableViewCustomersOrderscustomers_alerts_used: TcxGridDBColumn;
    cxGridDBTableViewCustomersOrderscustomers_alerts_date_disp: TcxGridDBColumn;
    cxGridLevel7: TcxGridLevel;
    dxBarManager: TdxBarManager;
    dxBarButtonPrint: TdxBarButton;
    dxBarButton2: TdxBarButton;
    dxBarGroup1: TdxBarGroup;
    cxGridDBTableViewCustomersOrderscustomers_alerts_customers_nbr: TcxGridDBColumn;
    SaveDialog: TSaveDialog;
    PanelTop: TPanel;
    LabelReserved: TLabel;
    cxGridDBTableViewCustomersOrderscustomers_alerts_quantity: TcxGridDBColumn;
    EditMessage: TEdit;
    ButtonSms: TButton;
    Button1: TButton;
    RadioButtonAlertsreserved: TRadioButton;
    RadioButtonAlertsArrived: TRadioButton;
    RadioButtonAlertsNotified: TRadioButton;
    RadioButtonAlertsBought: TRadioButton;
    cxgrdbclmnGridDBTableViewCustomersOrderscustomers_alerts_dwnpay: TcxGridDBColumn;
    dxComponentPrinter: TdxComponentPrinter;
    procedure dxBarButton2Click(Sender: TObject);
    procedure dxBarButtonPrintClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ButtonSmsClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure RadioButtonAlertsreservedClick(Sender: TObject);
    procedure RadioButtonAlertsArrivedClick(Sender: TObject);
    procedure RadioButtonAlertsNotifiedClick(Sender: TObject);
    procedure RadioButtonAlertsBoughtClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    Q: integer;
    Model: string;
  end;

var
  OrderCheckForm: TOrderCheckForm;

implementation

uses ClientDMUnit, SMS_COMAPILib_TLB, MainFRMUnit, DavidUtilsUnit, ThreadsUnit;

{$R *.dfm}

procedure TOrderCheckForm.Button1Click(Sender: TObject);
var
  mailtext: TStringList;
  aSendEmail: TSmartSendEmail;
begin
  RemoteDB.netshop_customers_alerts.First;
  mailtext := TStringList.Create;
  mailtext.add(EditMessage.Text);
  while not RemoteDB.netshop_customers_alerts.Eof do
  begin
    if RemoteDB.Customers.Locate('customers_nbr', RemoteDB.netshop_customers_alerts.FieldByName('customers_alerts_customers_nbr').AsString, [locaseinsensitive])
    then
    begin
      aSendEmail := TSmartSendEmail.Create(MainForm.Shopdata1.Text, MainForm.Shopdata5.Text, RemoteDB.Customerscustomers_email_address.AsString,
        'Concernant votre réservation chez ' + MainForm.Shopdata1.Text, '', mailtext);
    end;
    RemoteDB.netshop_customers_alerts.Next;
  end;
  mailtext.Free;

end;

procedure TOrderCheckForm.ButtonSmsClick(Sender: TObject);
var
  asms: tsms;
  smsid, smsfrom, smsresult, batchid: string;
  list: widestring;
begin
  if EditMessage.Text = '' then
  begin
    MessageDLG('Message Vide !', mtwarning, [mbOK], 0);
    exit;
  end;
  asms := tsms.Create(self);
  try
    smsid   := asms.Authenticate(MainForm.Parameter['SmsId'], MainForm.Parameter['SmsLogin'], MainForm.Parameter['SmsPassword'], False);
    smsfrom := clearphonenbr(MainForm.Shopdata4.Text);

    list := '';
    RemoteDB.netshop_customers_alerts.First;
    while not RemoteDB.netshop_customers_alerts.Eof do
    begin
      if RemoteDB.Customers.Locate('customers_nbr', RemoteDB.netshop_customers_alerts.FieldByName('customers_alerts_customers_nbr').AsString,
        [locaseinsensitive]) then
      begin
        list := list + RemoteDB.Customerscustomers_fax.AsString + ',';
      end;
      RemoteDB.netshop_customers_alerts.Next;
    end;

    asms.smsfrom := smsfrom;
    batchid      := asms.StartBatch(EditMessage.Text);
    smsresult    := asms.QuickBatchSend(list);
    asms.EndBatch;
    if Length(smsresult) < 30 then
    begin
      ShowMessage('Erreur SMS ' + inttostr(asms.smsError) + '-' + smsresult);
    end
  finally
    asms.Free;
  end;
end;

procedure TOrderCheckForm.dxBarButton2Click(Sender: TObject);
var
  Filename: string;
begin
  Filename := 'Réservations ' + RemoteDB.CDSProDescFR.FieldByName('products_name').AsString + ' ' +
    RemoteDB.Productsproducts_root_category_name.AsString + '.xls';
  SaveDialog.Filename := Filename;
  if SaveDialog.Execute then
  begin
    ExportGridToExcel(SaveDialog.Filename, cxGridCustomersAlert, True, True, True);
  end;
end;

procedure TOrderCheckForm.dxBarButtonPrintClick(Sender: TObject);
begin
  dxComponentPrinter.Print(True, nil);
end;

procedure TOrderCheckForm.FormShow(Sender: TObject);
var
  Q: integer;
begin
  RadioButtonAlertsreserved.Checked := True;
  RadioButtonAlertsreservedClick(self);
end;

procedure TOrderCheckForm.RadioButtonAlertsArrivedClick(Sender: TObject);
begin
  RemoteDB.netshop_customers_alerts.Filtered := False;
  RemoteDB.netshop_customers_alerts.Filter   := '( (customers_alerts_status=1) and (customers_alerts_products_model = ' + QuotedStr(Model) + ') )';
  RemoteDB.netshop_customers_alerts.Filtered := True;
  RemoteDB.netshop_customers_alerts.First;
  Q := 0;
  while not RemoteDB.netshop_customers_alerts.Eof do
  begin
    Q := Q + RemoteDB.netshop_customers_alerts.FieldByName('customers_alerts_quantity').AsInteger;
    RemoteDB.netshop_customers_alerts.Next;
  end;
  LabelReserved.Caption := 'Arrivé : ' + inttostr(Q);
end;

procedure TOrderCheckForm.RadioButtonAlertsBoughtClick(Sender: TObject);
begin
  RemoteDB.netshop_customers_alerts.Filtered := False;
  RemoteDB.netshop_customers_alerts.Filter   := '( (customers_alerts_status=3) and (customers_alerts_products_model = ' + QuotedStr(Model) + ') )';
  RemoteDB.netshop_customers_alerts.Filtered := True;
  RemoteDB.netshop_customers_alerts.First;
  Q := 0;
  while not RemoteDB.netshop_customers_alerts.Eof do
  begin
    Q := Q + RemoteDB.netshop_customers_alerts.FieldByName('customers_alerts_quantity').AsInteger;
    RemoteDB.netshop_customers_alerts.Next;
  end;
  LabelReserved.Caption := 'Acheté : ' + inttostr(Q);
end;

procedure TOrderCheckForm.RadioButtonAlertsNotifiedClick(Sender: TObject);
begin
  RemoteDB.netshop_customers_alerts.Filtered := False;
  RemoteDB.netshop_customers_alerts.Filter   := '( (customers_alerts_status=2) and (customers_alerts_products_model = ' + QuotedStr(Model) + ') )';
  RemoteDB.netshop_customers_alerts.Filtered := True;
  RemoteDB.netshop_customers_alerts.First;
  Q := 0;
  while not RemoteDB.netshop_customers_alerts.Eof do
  begin
    Q := Q + RemoteDB.netshop_customers_alerts.FieldByName('customers_alerts_quantity').AsInteger;
    RemoteDB.netshop_customers_alerts.Next;
  end;
  LabelReserved.Caption := 'Notifié : ' + inttostr(Q);
end;

procedure TOrderCheckForm.RadioButtonAlertsreservedClick(Sender: TObject);
begin
  RemoteDB.netshop_customers_alerts.Filtered := False;
  RemoteDB.netshop_customers_alerts.Filter   := '( (customers_alerts_status=0) and (customers_alerts_products_model = ' + QuotedStr(Model) + ') )';
  RemoteDB.netshop_customers_alerts.Filtered := True;
  RemoteDB.netshop_customers_alerts.First;
  Q := 0;
  while not RemoteDB.netshop_customers_alerts.Eof do
  begin
    Q := Q + RemoteDB.netshop_customers_alerts.FieldByName('customers_alerts_quantity').AsInteger;
    RemoteDB.netshop_customers_alerts.Next;
  end;
  LabelReserved.Caption := 'Réservé : ' + inttostr(Q);
end;

end.
