unit StockCheckFrmUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, DB, DBClient, StdCtrls, BaseGrid, AdvGrid,
  DBAdvGrd, ExtCtrls, JvComponent, JvCaptionPanel, Buttons, Menus,
  JvExExtCtrls, cxStyles, cxCustomData, cxGraphics, cxFilter, cxData,
  cxDataStorage, cxEdit, cxDBData, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGridLevel, cxClasses, cxControls, cxGridCustomView,
  cxGrid, JvExtComponent, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore,
  dxSkinBlack, dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue,
  dxSkinscxPCPainter;

type
  TStockCheckForm = class(TForm)
    JvCaptionPanel1: TJvCaptionPanel;
    BitBtn1: TBitBtn;
    Panel1: TPanel;
    SpeedButtonToRent: TSpeedButton;
    SpeedButtonToSales: TSpeedButton;
    JvCaptionPanelCustomersDeposit: TJvCaptionPanel;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1: TcxGrid;
    cxGrid1DBTableView1product_model: TcxGridDBColumn;
    cxGrid1DBTableView1product_name: TcxGridDBColumn;
    cxGrid1DBTableView1product_owner_id: TcxGridDBColumn;
    cxGrid1DBTableView1product_price_stock: TcxGridDBColumn;
    cxGrid1DBTableView1product_quantity: TcxGridDBColumn;
    cxGrid1DBTableView1product_supplier_id: TcxGridDBColumn;
    cxGrid1DBTableView1product_price_gross: TcxGridDBColumn;
    cxGrid1DBTableView1product_date_in_display: TcxGridDBColumn;
    cxGrid2: TcxGrid;
    cxGridDBTableView1: TcxGridDBTableView;
    cxGridLevel1: TcxGridLevel;
    cxGridDBTableView1rent_stock_condition: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_count: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_state: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_date_added: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_last_rent: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_location: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_name: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_product_model: TcxGridDBColumn;
    cxGridDBTableView1rent_stock_last_rent_disp: TcxGridDBColumn;
    JvCaptionPanel2: TJvCaptionPanel;
    DBGrid1: TDBGrid;
    procedure SpeedButtonToRentClick(Sender: TObject);
    procedure SBEnterLibraryClick(Sender: TObject);
    procedure SpeedButtonPrintLabelClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    model:string;
  end;

var
  StockCheckForm: TStockCheckForm;
  StockClone: TClientDataset;
  IndexTmp: String;

implementation

uses ClientDMunit, EnterLibFrmUnit, DavidUtilsUnit, MainFRMunit;

{$R *.dfm}

procedure TStockCheckForm.SpeedButtonToRentClick(Sender: TObject);
begin
// Confirmation pour stock occasion
 if RemoteDB.Stock.Eof and RemoteDB.Stock.Bof then exit;
 if RemoteDB.Stock.FieldByName('product_owner_id').Value > 100 then begin
  if messagedlg('Vous transferez un produit en depot, ce produit sera irrémédiablement marqué comme vendu pour le client, voulez vous continuer ?',mtwarning,[mbyes,mbno],0)=mrNo then exit;
  // Vérification de la table sales cohérence items sold
  if Not RemoteDB.Sales.Locate('sales_id',0,[]) then begin
   RemoteDB.Sales.Append;
   RemoteDB.Salessales_id.AsFloat:=0;
   RemoteDB.Salessales_paid_bct.AsFloat:=0;
   RemoteDB.Salessales_date_time.AsFloat:=0;
   RemoteDB.Salessales_paid_proton.AsFloat:=0;
   RemoteDB.Salessales_paid_visa.AsFloat:=0;
   RemoteDB.Salessales_paid_voucher.AsFloat:=0;
   RemoteDB.Salessales_paid_cash.AsFloat:=0;
   RemoteDB.Sales.Post;
  end;
  // Transfer du produit occasion en Items Sold
   RemoteDB.netshop_items_sold.Append;
   RemoteDB.items_solditems_sold_model.AsString:=       RemoteDB.Stock.FieldByName('product_model').AsString;
   RemoteDB.items_solditems_sold_name.AsString:=        RemoteDB.Stock.FieldByName('product_name').AsString;
   RemoteDB.items_solditems_sold_quantity.Value:=       1;
   RemoteDB.items_solditems_sold_price_catalog.AsFloat:=RemoteDB.Products.FieldByName('products_price').AsFloat;
   RemoteDB.items_solditems_sold_price_Stock.AsFloat:=  RemoteDB.Stock.FieldByName('product_price_stock').AsFloat;
   RemoteDB.items_solditems_sold_price_gross.AsFloat:=  RemoteDB.Stock.FieldByName('product_price_gross').AsFloat;
   RemoteDB.items_solditems_sold_owner_id.AsInteger:=   RemoteDB.Stock.FieldByName('product_owner_id').AsInteger;
   RemoteDB.items_solditems_sold_supplier_id.AsInteger:=RemoteDB.Stock.FieldByName('product_supplier_id').AsInteger;
   RemoteDB.items_solditems_sold_date_in.AsString:=     RemoteDB.Stock.FieldByName('product_date_in').AsString;
   RemoteDB.netshop_items_sold.Post;
 end;

 // Transfer d'une unité de stock
 RemoteDB.RentStock.Append;
 RemoteDB.RentStock.FieldByName('rent_stock_product_model').Value:=RemoteDB.Stock.FieldbyName('product_model').Value;
 RemoteDB.RentStock.FieldByName('rent_stock_name').Value:=RemoteDB.Stock.FieldbyName('product_name').Value;
 RemoteDB.RentStock.Post;
 if RemoteDB.Stock.FieldByName('product_quantity').Value > 1 then begin
  // Plusieurs unités disponibles
  RemoteDB.Stock.Edit;
  RemoteDB.Stockproduct_quantity.Value:=RemoteDB.Stockproduct_quantity.Value-1;
  RemoteDB.Stock.Post;
 end else begin
  // 1 seul titre disponible
  RemoteDB.Stock.Delete;
 end;
end;

procedure TStockCheckForm.FormShow(Sender: TObject);
begin
 RemoteDB.SQLQuery.CommandText:='CALL StockNewSum('+(model)+');';
 RemoteDB.CDSQuery.Open;
end;

procedure TStockCheckForm.SBEnterLibraryClick(Sender: TObject);
var AEnterLib:TFormEnterLibrary;
begin
 AEnterLib:=TFormEnterLibrary.Create(nil);
 Try
  AEnterLib.Enter(RemoteDB.Stockproduct_owner_id.AsString,RemoteDB.Stockproduct_model.AsString);
 Finally
  AenterLib.Free;
 End;

end;

procedure TStockCheckForm.SpeedButtonPrintLabelClick(Sender: TObject);
var LabelRent:TLabelRent;
begin
 LabelRent:=TLAbelRent.Create;
 LabelRent.LabelPrinter:=(MainForm.Parameter['PrintersLabelPrinter']);
 LabelRent.Print(RemoteDB.RentStockrent_stock_product_model.Value,RemoteDB.RentStockrent_stock_name.Value,RemoteDB.RentStockrent_stock_id.Value,(StrToBool(MainForm.Parameter['PrintersLabelDialog'])) );
end;

end.
