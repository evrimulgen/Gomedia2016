unit EnterLibFrmUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, Grids, DBGrids, ExtCtrls, DBCtrls, DllImp,
  JvLabel, JvExControls, JvComponent, JvSegmentedLEDDisplay, strutils, JvGIF,
  JvExStdCtrls, JvHtControls;

type
  TFormEnterLibrary = class(TForm)
    BitBtnNextCD: TBitBtn;
    BitBtnOk: TBitBtn;
    BitBtnCancel: TBitBtn;
    Image1: TImage;
    LedSlot: TJvSegmentedLEDDisplay;
    Label1: TLabel;
    Messagelabel: TJvHTLabel;
    procedure FormShow(Sender: TObject);
    procedure BitBtnOkClick(Sender: TObject);
    procedure BitBtnNextCDClick(Sender: TObject);
    procedure BitBtnCancelClick(Sender: TObject);
  private
    FEOwner: string;
    FEModel: string;
    procedure CreateParams(var Params: TCreateParams); override;
    { Private declarations }
  public
    { Public declarations }
  published
    procedure Enter(owner,model:string);
  end;

var
  FormEnterLibrary: TFormEnterLibrary;
  Machine,slot:integer;

implementation

uses Mainfrmunit,ClientDmUnit,Threadsunit;

{$R *.dfm}
procedure TFormEnterLibrary.CreateParams(var Params: TCreateParams);
begin
  inherited CreateParams(Params);
  with Params do begin
    ExStyle := ExStyle or WS_EX_APPWINDOW;
    WndParent := GetDesktopwindow;
  end;
end;

procedure TFormEnterLibrary.FormShow(Sender: TObject);
var FoundSlot:boolean;
    NowRow,Pslot:integer;
    MachineID:String;
    USBCDMoveOpen:TUSBCDMoveOpen;

begin
 MessageLabel.Caption:='';

 BitBtnNextCD.Enabled:=False;
 BitBtnOk.Enabled:=False;

 RemoteDB.Caroussel.IndexFieldNames:='machine_id;slot_id';

 NowRow:=1;
 FoundSlot:=False;

 While (NowRow<MainForm.StringGridDacal.Rowcount-1) and (FoundSlot=False) do begin
  MachineId:=MainForm.StringGridDacal.Cells[0,NowRow];
  RemoteDB.Caroussel.Filter:='machine_id = '+MachineId;
  RemoteDB.Caroussel.Filtered:=True;
  RemoteDB.Caroussel.First;

  // Si DB Vide
  if RemoteDB.Caroussel.Eof and RemoteDB.Caroussel.Bof then begin
   FoundSlot:=True;
   Slot:=1;
  end;

  // SI Trous dans la DB
  PSlot:=0;
  While (Not RemoteDB.Caroussel.Eof) and (Foundslot=False) do begin
   if RemoteDB.Caroussel.FieldByName('slot_id').Value > PSlot+1 then begin
    Slot:=PSlot+1;
    FoundSlot:=True;
   end;
   PSlot:=RemoteDB.Caroussel.FieldByName('slot_id').Value;
   RemoteDB.Caroussel.Next;
  end;

  // Si DB Sans trou New Id Next Machine
  if FoundSlot=False then begin
   if PSlot<150 then begin
    Slot:=PSlot+1;
    FoundSlot:=True;
   end else begin
   end;
  end;

  NowRow:=NowRow+1;
 end;

 RemoteDB.Caroussel.Filter:='';
 RemoteDB.Caroussel.Filtered:=False;

 if Foundslot then begin
  USBCDMoveOpen:=TUSBCDMoveOpen.Create(StrToInt(MachineId),Slot);

  if length(floattostr(slot))=1 then
  begin
   ledslot.Text:='00'+floattostr(slot);
  end;
  if length(floattostr(slot))=2 then
  begin
   ledslot.Text:='0'+floattostr(slot);
  end;
  if length(floattostr(slot))=3 then
  begin
   ledslot.Text:=floattostr(slot);
  end;
  USBCDMoveOpen.Execute;

  RemoteDB.Caroussel.Append;
  RemoteDB.Caroussel.FieldByName('machine_id').Value:=StrToInt(MachineId);
  RemoteDB.Caroussel.FieldByName('slot_id').Value:=Slot;
  RemoteDB.Caroussel.FieldByName('model').Value:=RemoteDB.Products.FieldbyName('products_model').Value;
  RemoteDB.Caroussel.FieldByName('customer_nbr').AsString:=FEOwner;
  RemoteDB.Caroussel.FieldByName('isRoot').Value:=True;
  RemoteDB.Caroussel.FieldByName('NextId').Value:=-1;
  RemoteDB.Caroussel.Post;
  Self.BitBtnOk.Enabled:=True;
  Self.BitBtnNextCD.Enabled:=True;
 end else begin
  MessageLabel.Caption:='CD Library pleines ou indisponibles';
 end;

end;

procedure TFormEnterLibrary.BitBtnNextCDClick(Sender: TObject);
Var NowRow,FormerId:integer;
    FoundSlot:boolean;
    Pslot:integer;
    MachineId:string;
    USBCDMoveOpen:TUSBCDMoveOpen;

begin
 formerId:=RemoteDB.Caroussel.FieldByName('id').Value;

 NowRow:=1;
 FoundSlot:=False;

 While (NowRow<MainForm.StringGridDacal.Rowcount-1) and (FoundSlot=False) do begin
  MachineId:=MainForm.StringGridDacal.Cells[0,NowRow];
  RemoteDB.Caroussel.Filter:='machine_id = '+MachineId;
  RemoteDB.Caroussel.Filtered:=True;
  RemoteDB.Caroussel.First;

  // Si DB Vide
  if RemoteDB.Caroussel.Eof and RemoteDB.Caroussel.Bof then begin
   FoundSlot:=True;
   Slot:=1;
  end;

  // SI Trous dans la DB
  PSlot:=0;
  While (Not RemoteDB.Caroussel.Eof) and (Foundslot=False) do begin
   if RemoteDB.Caroussel.FieldByName('slot_id').Value > PSlot+1 then begin
    Slot:=PSlot+1;
    FoundSlot:=True;
   end;
   PSlot:=RemoteDB.Caroussel.FieldByName('slot_id').Value;
   RemoteDB.Caroussel.Next;
  end;

  // Si DB Sans trou New Id Next Machine
  if FoundSlot=False then begin
   if PSlot<150 then begin
    Slot:=PSlot+1;
    FoundSlot:=True;
   end else begin
   end;
  end;

  NowRow:=NowRow+1;
 end;

 RemoteDB.Caroussel.Filter:='';
 RemoteDB.Caroussel.Filtered:=False;

 if Foundslot then begin
  USBCDMoveOpen:=TUSBCDMoveOpen.Create(StrToInt(MachineId),Slot);
  if length(floattostr(slot))=1 then
  begin
   ledslot.Text:='00'+floattostr(slot);
  end;
  if length(floattostr(slot))=2 then
  begin
   ledslot.Text:='0'+floattostr(slot);
  end;
  if length(floattostr(slot))=3 then
  begin
   ledslot.Text:=floattostr(slot);
  end;
  USBCDMoveOpen.Execute;
  RemoteDB.Caroussel.Locate('id',formerid,[]);
  RemoteDB.Caroussel.Edit;
  RemoteDB.Caroussel.FieldByName('isRoot').Value:=False;
  RemoteDB.Caroussel.Post;

  RemoteDB.Caroussel.Append;
  RemoteDB.Caroussel.FieldByName('machine_id').Value:=strtoint(MachineId);
  RemoteDB.Caroussel.FieldByName('slot_id').Value:=Slot;
  RemoteDB.Caroussel.FieldByName('model').Value:=RemoteDB.Products.FieldbyName('products_model').Value;
  RemoteDB.Caroussel.FieldByName('customer_nbr').Value:=FEOwner;
  RemoteDB.Caroussel.FieldByName('isRoot').Value:=True;
  RemoteDB.Caroussel.FieldByName('NextId').Value:=FormerId;
  RemoteDB.Caroussel.Post;
 end else begin
  MessageLabel.Caption:='CD Library pleines ou indisponibles';
 end;
end;


procedure TFormEnterLibrary.BitBtnCancelClick(Sender: TObject);
begin
 if BitBtnOK.Enabled then RemoteDB.Caroussel.Delete;
 // N'efface que si qqch d'entré pas si pas de machine
 ModalResult:=MrOk;
end;

procedure TFormEnterLibrary.BitBtnOkClick(Sender: TObject);
begin
 ModalResult:=mrok;
end;

procedure TFormEnterLibrary.Enter(owner, model: string);
begin
 FEOwner:=Owner;
 FEModel:=Model;
 self.ShowModal;
end;

end.
