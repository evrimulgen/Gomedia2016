unit RepairNewFRMUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ClientDMUnit, StdCtrls, Buttons, DBCtrls, Menus, cxMaskEdit,
  cxDropDownEdit, cxDBEdit, cxContainer, cxEdit, cxControls, cxTextEdit,
  cxGraphics, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore,
  dxSkinsDefaultPainters;

type
  TRepairNewForm = class(TForm)
    LabelCust_nbr: TLabel;
    LabelDate_in: TLabel;
    BitBtnOK: TBitBtn;
    BitBtnCancel: TBitBtn;
    Labelid: TLabel;
    LabelProductModel: TLabel;
    LabelProductSerial: TLabel;
    LabelLabelProblemDescription: TLabel;
    LabelProduct_name: TLabel;
    DBEditRepairId: TcxDBTextEdit;
    DBEditRepairCustNbr: TcxDBTextEdit;
    DBEditRepairDateIn: TcxDBTextEdit;
    cxEditStyleController1: TcxEditStyleController;
    DBEditRepairModel: TcxDBTextEdit;
    DBEditRepairProductName: TcxDBComboBox;
    DBEditRepairSerial: TcxDBTextEdit;
    DBEditRepairProblem: TcxDBTextEdit;
    procedure dxDBEditRepairModelExit(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure BitBtnOKClick(Sender: TObject);
    procedure DBEditRepairProductNameExit(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  RepairNewForm: TRepairNewForm;

implementation

{$R *.dfm}

procedure TRepairNewForm.dxDBEditRepairModelExit(Sender: TObject);
begin
 if DBEditRepairModel.Text <> '' then
 if not remoteDB.Products.Locate('products_model',RemoteDB.Repair.FieldbyName('repair_products_model').Value,[]) then begin
  RemoteDB.Repair.FieldbyName('repair_products_model').Value:='';
  messagedlg('Veuillez entrer un modèle valable',mtwarning,[mbok],0);
 end else begin
  RemoteDB.Repair.FieldByName('repair_products_name').Value:=RemoteDB.CDSProDescFR.FieldByName('products_name').Value;
 end;
end;

procedure TRepairNewForm.FormShow(Sender: TObject);
begin
 RemoteDB.Products.DisableControls;
 RemoteDB.Products.Filter:='products_promo='+quotedstr('True');
 RemoteDB.Products.Filtered:=True;
 RemoteDB.Products.First;
 DBEditRepairProductName.Properties.Items.Clear;
 while not RemoteDB.Products.Eof do begin
  DBEditRepairProductName.Properties.Items.Add(RemoteDB.CDSProDescFR.FieldByName('products_name').Value);
  RemoteDB.Products.Next;
 end;
 RemoteDB.Products.Filter:='';
 RemoteDB.Products.Filtered:=False;
 RemoteDB.Products.EnableControls;
end;

procedure TRepairNewForm.BitBtnOKClick(Sender: TObject);
begin
 begin
  if not remoteDB.Products.Locate('products_model',RemoteDB.Repair.FieldbyName('repair_products_model').Value,[]) then begin
   RemoteDB.Repair.FieldbyName('repair_products_model').Value:='';
   messagedlg('Veuillez entrer un modèle valable',mtwarning,[mbok],0);
   Abort;
  end;
  if length(remoteDB.Repair.FieldByName('repair_products_problem').AsString)<5 then begin
   messagedlg('Veuillez entrer un description du problème valable',mtwarning,[mbok],0);
   Abort;
  end;
   if length(remoteDB.Repair.FieldByName('repair_products_serial').AsString)<5 then begin
   messagedlg('Veuillez entrer un N° de série valable',mtwarning,[mbok],0);
   Abort;
  end;
 end;
 Self.ModalResult:=MrOk;
end;

procedure TRepairNewForm.DBEditRepairProductNameExit(Sender: TObject);
begin
 if DBEditRepairProductName.Text <> '' then
 if not remoteDB.Products.Locate('products_name',RemoteDB.Repair.FieldbyName('repair_products_name').Value,[]) then begin
  RemoteDB.Repair.FieldbyName('repair_products_name').Value:='';
  messagedlg('Veuillez entrer un nom valable',mtwarning,[mbok],0);
 end else begin
  RemoteDB.Repair.FieldByName('repair_products_model').Value:=RemoteDB.Products.FieldByName('products_model').Value;
 end;
end;

end.
