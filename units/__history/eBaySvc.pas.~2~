// ************************************************************************ //
// The types declared in this file were generated from data read from the
// WSDL File described below:
// WSDL     : C:\Documents and Settings\David.LAPTOP-D3FE71EB\Desktop\ebaySvc.wsdl
// Encoding : UTF-8
// Codegen  : [wfDebug,wfUseSerializerClassForAttrs]
// Version  : 1.0
// (27/11/2007 21:40:53 - 16.03.2006)
// ************************************************************************ //

unit ebaySvc;

interface

uses InvokeRegistry, SOAPHTTPClient, Types, XSBuiltIns;

type

  // ************************************************************************ //
  // The following types, referred to in the WSDL document are not being represented
  // in this file. They are either aliases[@] of other types represented or were referred
  // to but never[!] declared in the document. The types from the latter category
  // typically map to predefined/known XML or Borland types; however, they could also 
  // indicate incorrect WSDL documents that failed to declare or import a schema type.
  // ************************************************************************ //
  // !:string          - "http://www.w3.org/2001/XMLSchema"
  // !:int             - "http://www.w3.org/2001/XMLSchema"
  // !:dateTime        - "http://www.w3.org/2001/XMLSchema"
  // !:boolean         - "http://www.w3.org/2001/XMLSchema"
  // !:token           - "http://www.w3.org/2001/XMLSchema"
  // !:duration        - "http://www.w3.org/2001/XMLSchema"
  // !:long            - "http://www.w3.org/2001/XMLSchema"
  // !:double          - "urn:ebay:apis:eBLBaseComponents"
  // !:float           - "http://www.w3.org/2001/XMLSchema"
  // !:anyURI          - "http://www.w3.org/2001/XMLSchema"
  // !:boolean         - "urn:ebay:apis:eBLBaseComponents"
  // !:string          - "urn:ebay:apis:eBLBaseComponents"
  // !:decimal         - "urn:ebay:apis:eBLBaseComponents"
  // !:time            - "http://www.w3.org/2001/XMLSchema"
  // !:decimal         - "http://www.w3.org/2001/XMLSchema"
  // !:double          - "http://www.w3.org/2001/XMLSchema"
  // !:int             - "urn:ebay:apis:eBLBaseComponents"
  // !:base64Binary    - "urn:ebay:apis:eBLBaseComponents"

  UserIdPasswordType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CustomSecurityHeaderType = class;             { "urn:ebay:apis:eBLBaseComponents"[H] }
  PaymentDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DistanceType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ListingDesignerType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ReviseStatusType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SearchDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExternalProductIDType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ListingCheckoutRedirectPreferenceType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddressType          = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BuyerProtectionDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  ValType              = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  LookupAttributeType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AmountType           = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  LiveAuctionDetailsType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BiddingDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  VATDetailsType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CharityType          = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PromotionDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PromotedItemType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CrossPromotionsType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExpressDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DigitalDeliveryDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  PictureDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StorefrontType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProductListingDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  ExpressItemRequirementsType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  ListingDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExtendedProductFinderIDType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  LabelType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CharacteristicType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CharacteristicsSetType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  CategoryType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BuyerType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SchedulingInfoType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProStoresDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProStoresCheckoutPreferenceType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackRequirementsType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  ExpressSellerRequirementsType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  SellerType           = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CharityIDType        = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CharityAffiliationType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  CharitySellerType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ItemBidDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BiddingSummaryType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  UserType             = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PromotionalSaleDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  SellingStatusType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SalesTaxType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ShippingServiceOptionsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  InternationalShippingServiceOptionsType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  InsuranceDetailsType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PromotionalShippingDiscountDetailsType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  MeasureType          = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CalculatedShippingRateType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  TaxJurisdictionType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DiscountProfileType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CalculatedShippingDiscountType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  FlatShippingDiscountType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  ShippingDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MaximumItemRequirementsType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  VerifiedUserRequirementsType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  BuyerRequirementsType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ContactHoursDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  ExtendedContactDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  ItemType             = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  NameValueListType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  FeeType              = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MemberMessageType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessagesAAQToBidderRequestContainerType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessagesAAQToBidderResponseContainerType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  CheckoutStatusType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExternalTransactionType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  OrderType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  TransactionStatusType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  SellingManagerProductDetailsType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackInfoType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  TransactionType      = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  RefundType           = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BidApprovalType      = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  LiveAuctionApprovalStatusType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  PaginationType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PaginationResultType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AdditionalAccountType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  AccountSummaryType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AccountEntryType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AdFormatLeadType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MemberMessageExchangeType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  OfferType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ApiAccessRuleType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  XSLFileType          = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferType        = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AffiliateTrackingDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  CheckoutCompleteRedirectType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  CheckoutOrderDetailType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  CartType             = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CartItemType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SiteWideCharacteristicsType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  ListingDurationReferenceType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  CategoryFeatureType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SiteDefaultsType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ShippingTermRequiredDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferEnabledDefinitionType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  DutchBINEnabledDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  UserConsentRequiredDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  HomePageFeaturedEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ProPackEnabledDefinitionType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  BasicUpgradePackEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ValuePackEnabledDefinitionType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  ProPackPlusEnabledDefinitionType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  AdFormatEnabledDefinitionType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  DigitalDeliveryEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferCounterEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferAutoDeclineEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalMarketSpecialitySubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalMarketRegularSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalMarketPremiumSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalMarketNonSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ExpressEnabledDefinitionType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  ExpressPicturesRequiredDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ExpressConditionRequiredDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  MinimumReservePriceDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  TCREnabledDefinitionType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  SellerContactDetailsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  StoreInventoryEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SkypeMeTransactionalEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SkypeMeNonTransactionalEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalListingDistancesRegularDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalListingDistancesSpecialtyDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LocalListingDistancesNonSubscriptionDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdPaymentMethodEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdShippingMethodEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdBestOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdCounterOfferEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdAutoDeclineEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdContactByPhoneEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdContactByEmailEnabledDefintionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SafePaymentRequiredDefinitionType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdPayPerLeadEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ItemSpecificsEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  PaisaPayFullEscrowEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferAutoAcceptEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdAutoAcceptEnabledDefinitionType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  FeatureDefinitionsType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  ProximitySearchType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GroupType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SiteLocationType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SearchLocationType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BuyingGuideType      = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BuyingGuideDetailsType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  CategoryMappingType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CategoryItemSpecificsType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  CharityInfoType      = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ContextSearchAssetType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  DescriptionTemplateType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  ThemeGroupType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DisputeResolutionType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  DisputeMessageType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DisputeType          = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExpressProductType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  WishListEntryType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  WishListType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackDetailType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackSummaryType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackPeriodType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AverageRatingDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetRecommendationsRequestContainerType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SIFFTASRecommendationsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  AttributeRecommendationsType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  ItemSpecificsRecommendationsType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  ListingAnalyzerRecommendationsType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ListingTipMessageType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ListingTipFieldType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ListingTipType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProductInfoType      = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PricingRecommendationsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetRecommendationsResponseContainerType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  PaginatedTransactionArrayType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  LiveAuctionBidType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BidderDetailType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ScheduleType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  LiveAuctionCatalogType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  ASQPreferencesType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesFolderSummaryType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesSummaryType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesResponseDetailsType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesForwardDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesFolderType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesAlertType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesMessageType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ItemListCustomizationType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  MyeBaySelectionType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BidAssistantListType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BuyingSummaryType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PaginatedItemArrayType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  PaginatedOrderTransactionArrayType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  OrderTransactionType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MyeBayFavoriteSearchType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  MyeBayFavoriteSearchListType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  MyeBayFavoriteSellerType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  MyeBayFavoriteSellerListType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  BidGroupItemType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BidGroupType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ReminderCustomizationType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  RemindersType        = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SellingSummaryType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  MyeBaySellingSummaryType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  ApplicationDeliveryPreferencesType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  NotificationEventPropertyType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  NotificationEnableType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  SMSSubscriptionType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SummaryEventScheduleType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  NotificationUserDataType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  NotificationStatisticsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  NotificationDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  MarkUpMarkDownEventType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  ItemTransactionIDType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerPictureDisplayType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerPictureType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerFolderType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerSubscriptionType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SearchAttributesType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProductSearchType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DataElementSetType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProductFinderConstraintType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  ProductType          = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ProductFamilyType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ResponseAttributeSetType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  ProductSearchResultType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  ProductSearchPageType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  HistogramEntryType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ReviewType           = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ReviewDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CatalogProductType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PromotionRuleType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PromotionalSaleType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AuthenticationEntryType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  PriceRangeFilterType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  UserIdFilterType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SearchLocationFilterType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  SearchStoreFilterType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  SearchRequestType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  RequestCategoriesType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  BidRangeType         = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DateType             = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  TicketDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SpellingSuggestionType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  SearchResultItemType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExpansionArrayType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ExpressHistogramDomainDetailsType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  ExpressHistogramProductType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  ExpressHistogramAisleType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  ExpressHistogramDepartmentType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SellerPaymentType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CalculatedHandlingDiscountType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  FlatRateInsuranceRangeCostType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  ShippingInsuranceType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  StoreLogoType        = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreColorType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreFontType        = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreColorSchemeType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreThemeType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomCategoryType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomListingHeaderLinkType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomListingHeaderType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  StoreType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomPageType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreThemeArrayType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  StoreSubscriptionType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  StoreVacationPreferencesType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  StorePreferencesType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SuggestedCategoryType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  DisputeFilterCountType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  BidderNoticePreferencesType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  CrossPromotionPreferencesType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  SellerPaymentPreferencesType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  SellerFavoriteItemPreferencesType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  EndOfAuctionEmailPreferencesType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  ExpressPreferencesType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  CalculatedShippingPreferencesType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  FlatShippingPreferencesType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  CombinedPaymentPreferencesType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  ReasonCodeDetailType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  VeROSiteDetailType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  VeROReportedItemType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  WantItNowPostType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CountryDetailsType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  CurrencyDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  DispatchTimeMaxDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  PaymentOptionDetailsType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  RegionDetailsType    = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ShippingLocationDetailsType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  ShippingServiceDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  SiteDetailsType      = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  URLDetailsType       = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  TimeZoneDetailsType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ItemSpecificDetailsType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  RegionOfOriginDetailsType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  ShippingPackageDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  ShippingCarrierDetailsType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  UnitOfMeasurementType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ItemRatingDetailsType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  Base64BinaryType     = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  PictureSetMemberType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SiteHostedPictureDetailsType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  VeROReportItemType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  BotBlockRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AbstractRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  VeROReportItemsRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  UploadSiteHostedPicturesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  LeaveFeedbackRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  SetUserPreferencesRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  SetStorePreferencesRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SetStoreCustomPageRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  SetStoreCategoriesRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  SetStoreRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SetShippingDiscountProfilesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerListRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerTransactionsRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetSearchResultsRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  SetReturnURLRequestType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  SetPromotionalSaleListingsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SetPromotionalSaleRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetProductSellingPagesRequestType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetProductsRequestType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  SetPictureManagerDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetOrderTransactionsRequestType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetOrdersRequestType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SetNotificationPreferencesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetMyeBayRemindersRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetMyeBayBuyingRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetMyeBaySellingRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  SetMessagePreferencesRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoryListingsRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SetCartRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetCartRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetSearchResultsExpressRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  PlaceOfferRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  GetAccountRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  GetExpressWishListRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetFeedbackRequestType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  GetItemTransactionsRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetItemsAwaitingFeedbackRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetLiveAuctionBiddersRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetMemberMessagesRequestType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetPopularKeywordsRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerPaymentsRequestType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetUserDisputesRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetVeROReportStatusRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetWantItNowSearchResultsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  DeleteMyMessagesRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetMyMessagesRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  ReviseMyMessagesRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  ApproveLiveAuctionBiddersRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  CompleteSaleRequestType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  ReviseCheckoutStatusRequestType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  AddOrderRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessageAAQToPartnerRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessageRTQRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SetTaxTableRequestType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  SendInvoiceRequestType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  GetContextualKeywordsRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  VerifyAddItemRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetPromotionRulesRequestType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetPromotionalSaleDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreRequestType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreCategoryUpdateStatusRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreCustomPageRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetVeROReasonCodeDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ReviseMyMessagesFoldersRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddSecondChanceItemRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  AddTransactionConfirmationItemRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  IssueRefundRequestType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  RespondToBestOfferRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  VerifyAddSecondChanceItemRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  FetchTokenRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  GetAdFormatLeadsRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetAllBiddersRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetAttributesCSRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetBidderListRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoriesRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoryFeaturesRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetCharitiesRequestType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  GetDescriptionTemplatesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetItemRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetMessagePreferencesRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerEventsRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetUserRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetUserPreferencesRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  RemoveFromWatchListRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  ValidateChallengeInputRequestType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  ValidateTestUserRegistrationRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddItemRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AddLiveAuctionItemRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  RelistItemRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ReviseItemRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  ReviseLiveAuctionItemRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  AddDisputeResponseRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetCategorySpecificsRequestType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetNotificationsUsageRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  AddDisputeRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  AddToItemDescriptionRequestType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  EndItemRequestType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetApiAccessRulesRequestType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetAttributesXSLRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetBestOffersRequestType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetCategory2CSRequestType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoryMappingsRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetChallengeTokenRequestType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetCrossPromotionsRequestType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetDisputeRequestType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  GetHighBiddersRequestType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  GetItemShippingRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetLiveAuctionCatalogDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetNotificationPreferencesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetPictureManagerDetailsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetPictureManagerOptionsRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductFinderRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetProductFinderXSLRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetProductSearchPageRequestType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetReturnURLRequestType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  GetRuNameRequestType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetShippingDiscountProfilesRequestType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreOptionsRequestType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetStorePreferencesRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetSuggestedCategoriesRequestType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetTaxTableRequestType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  GetUserContactDetailsRequestType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetWantItNowPostRequestType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GeteBayOfficialTimeRequestType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  RespondToFeedbackRequestType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  RespondToWantItNowPostRequestType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  SellerReverseDisputeRequestType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  SetUserNotesRequestType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  DuplicateInvocationDetailsType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  BotBlockResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ErrorParameterType   = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ErrorType            = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AbstractResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ValidateTestUserRegistrationResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SetUserPreferencesResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SetUserNotesResponseType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  SetTaxTableResponseType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  SetStorePreferencesResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  SetStoreResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  SetShippingDiscountProfilesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SetReturnURLResponseType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  SetPromotionalSaleListingsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SetPictureManagerDetailsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SetNotificationPreferencesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  SetMessagePreferencesResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  SendInvoiceResponseType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  SellerReverseDisputeResponseType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  ReviseMyMessagesFoldersResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  ReviseMyMessagesResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  ReviseCheckoutStatusResponseType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  RespondToWantItNowPostResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  RespondToFeedbackResponseType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  RemoveFromWatchListResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  LeaveFeedbackResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  GeteBayOfficialTimeResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreCategoryUpdateStatusResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetRuNameResponseType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  GetProductSellingPagesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductFinderResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetChallengeTokenResponseType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetAttributesCSResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  DeleteMyMessagesResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  CompleteSaleResponseType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  AddToWatchListResponseType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  AddToItemDescriptionResponseType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessageRTQResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessageAAQToPartnerResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddDisputeResponseResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  AddDisputeResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  VerifyAddSecondChanceItemResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  FetchTokenResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  EndItemResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  AddTransactionConfirmationItemResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  AddSecondChanceItemResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  AddOrderResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetItemResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ValidateChallengeInputResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  IssueRefundResponseType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  GetCrossPromotionsResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetUserResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetItemShippingResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  VeROReportItemsResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  SetStoreCategoriesResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SetPromotionalSaleResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetUserContactDetailsResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetTaxTableResponseType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  VerifyAddItemResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  ReviseLiveAuctionItemResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  ReviseItemResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  RelistItemResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  AddLiveAuctionItemResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  AddItemResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  ApproveLiveAuctionBiddersResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerTransactionsResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetItemTransactionsResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetAccountResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  GetAdFormatLeadsResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetMemberMessagesResponseType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetHighBiddersResponseType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetAllBiddersResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  RespondToBestOfferResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetBestOffersResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  PlaceOfferResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerListResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerEventsResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetBidderListResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  SetCartResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetCartResponseType  = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetPopularKeywordsResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoriesResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  GetCategory2CSResponseType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoryFeaturesResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoryListingsResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetCategoryMappingsResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetDescriptionTemplatesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetDisputeResponseType = class;               { "urn:ebay:apis:eBLBaseComponents" }
  GetExpressWishListResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetFeedbackResponseType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  GetItemsAwaitingFeedbackResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetLiveAuctionBiddersResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetMessagePreferencesResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetMyMessagesResponseType = class;            { "urn:ebay:apis:eBLBaseComponents" }
  GetMyeBayBuyingResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetMyeBayRemindersResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetMyeBaySellingResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetNotificationPreferencesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetNotificationsUsageResponseType = class;    { "urn:ebay:apis:eBLBaseComponents" }
  GetOrdersResponseType = class;                { "urn:ebay:apis:eBLBaseComponents" }
  GetOrderTransactionsResponseType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetPictureManagerDetailsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetPictureManagerOptionsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductSearchResultsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductFamilyMembersResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductSearchPageResponseType = class;     { "urn:ebay:apis:eBLBaseComponents" }
  GetProductsResponseType = class;              { "urn:ebay:apis:eBLBaseComponents" }
  GetPromotionRulesResponseType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetPromotionalSaleDetailsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetReturnURLResponseType = class;             { "urn:ebay:apis:eBLBaseComponents" }
  GetSearchResultsResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetSearchResultsExpressResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetSellerPaymentsResponseType = class;        { "urn:ebay:apis:eBLBaseComponents" }
  GetShippingDiscountProfilesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreResponseType = class;                 { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreCustomPageResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  SetStoreCustomPageResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetStoreOptionsResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetStorePreferencesResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetSuggestedCategoriesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetUserDisputesResponseType = class;          { "urn:ebay:apis:eBLBaseComponents" }
  GetUserPreferencesResponseType = class;       { "urn:ebay:apis:eBLBaseComponents" }
  GetVeROReasonCodeDetailsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GetVeROReportStatusResponseType = class;      { "urn:ebay:apis:eBLBaseComponents" }
  GetWantItNowPostResponseType = class;         { "urn:ebay:apis:eBLBaseComponents" }
  GetWantItNowSearchResultsResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }
  GeteBayDetailsResponseType = class;           { "urn:ebay:apis:eBLBaseComponents" }
  UploadSiteHostedPicturesResponseType = class;   { "urn:ebay:apis:eBLBaseComponents" }

  { "urn:ebay:apis:eBLBaseComponents" }
  AckCodeType = (Success, Failure, Warning, PartialFailure, CustomCode);

  { "urn:ebay:apis:eBLBaseComponents" }
  BuyerPaymentMethodCodeType = (
      None, 
      MOCC, 
      AmEx, 
      PaymentSeeDescription, 
      CCAccepted, 
      PersonalCheck, 
      COD, 
      VisaMC, 
      PaisaPayAccepted, 
      Other, 
      PayPal, 
      Discover, 
      CashOnPickup, 
      MoneyXferAccepted, 
      MoneyXferAcceptedInCheckout, 
      OtherOnlinePayments, 
      Escrow, 
      PrePayDelivery, 
      CODPrePayDelivery, 
      PostalTransfer, 
      CustomCode2, 
      LoanCheck, 
      CashInPerson, 
      ELV, 
      PaisaPayEscrow, 
      PaisaPayEscrowEMI
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DetailLevelCodeType = (ReturnAll, ItemReturnDescription, ItemReturnAttributes, ItemReturnCategories, ReturnSummary, ReturnHeaders, ReturnMessages);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeActivityCodeType = (SellerAddInformation, SellerCompletedTransaction, CameToAgreementNeedFVFCredit, SellerEndCommunication, MutualAgreementOrNoBuyerResponse, SellerOffersRefund, SellerShippedItem, SellerComment, SellerPaymentNotReceived, CustomCode3);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeCreditEligibilityCodeType = (InEligible, Eligible, CustomCode4);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeExplanationCodeType = (
      BuyerHasNotResponded, 
      BuyerRefusedToPay, 
      BuyerNotClearedToPay, 
      BuyerReturnedItemForRefund, 
      UnableToResolveTerms, 
      BuyerNoLongerWantsItem, 
      BuyerPurchasingMistake, 
      ShipCountryNotSupported, 
      ShippingAddressNotConfirmed, 
      PaymentMethodNotSupported, 
      BuyerNoLongerRegistered, 
      OtherExplanation, 
      Unspecified, 
      CustomCode5
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeFilterTypeCodeType = (AllInvolvedDisputes, DisputesAwaitingMyResponse, DisputesAwaitingOtherPartyResponse, AllInvolvedClosedDisputes, EligibleForCredit, UnpaidItemDisputes, ItemNotReceivedDisputes, CustomCode6);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeMessageSourceCodeType = (Buyer, Seller, eBay, CustomCode7);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeReasonCodeType = (BuyerHasNotPaid, TransactionMutuallyCanceled, ItemNotReceived, SignificantlyNotAsDescribed, NoRefund, ReturnPolicyUnpaidItem, CustomCode8);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeRecordTypeCodeType = (UnpaidItem, ItemNotReceived2, CustomCode9);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeResolutionReasonCodeType = (
      Unresolved, 
      ProofOfPayment, 
      ComputerTechnicalProblem, 
      NoContact, 
      FamilyEmergency, 
      ProofGivenInFeedback, 
      FirstInfraction, 
      CameToAgreement, 
      ItemReturned, 
      BuyerPaidAuctionFees, 
      SellerReceivedPayment, 
      OtherResolution, 
      ClaimPaid, 
      CustomCode10
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeResolutionRecordTypeCodeType = (
      StrikeBuyer, 
      SuspendBuyer, 
      FVFCredit, 
      InsertionFeeCredit, 
      AppealBuyerStrike, 
      UnsuspendBuyer, 
      ReverseFVFCredit, 
      ReverseInsertionFeeCredit, 
      GenerateCSTicketForSuspend, 
      FVFCreditNotGranted, 
      ItemNotReceivedClaimFiled, 
      CustomCode11
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeSortTypeCodeType = (None2, DisputeCreatedTimeAscending, DisputeCreatedTimeDescending, DisputeStatusAscending, DisputeStatusDescending, DisputeCreditEligibilityAscending, DisputeCreditEligibilityDescending, CustomCode12);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeStateCodeType = (
      Locked, 
      Closed, 
      BuyerFirstResponsePayOption, 
      BuyerFirstResponseNoPayOption, 
      BuyerFirstResponsePayOptionLateResponse, 
      BuyerFirstResponseNoPayOptionLateResponse, 
      MutualCommunicationPayOption, 
      MutualCommunicationNoPayOption, 
      PendingResolve, 
      MutualWithdrawalAgreement, 
      MutualWithdrawalAgreementLate, 
      NotReceivedNoSellerResponse, 
      NotAsDescribedNoSellerResponse, 
      NotReceivedMutualCommunication, 
      NotAsDescribedMutualCommunication, 
      MutualAgreementOrBuyerReturningItem, 
      ClaimOpened, 
      NoDocumentation, 
      ClaimClosed, 
      ClaimDenied, 
      ClaimPending, 
      ClaimPaymentPending, 
      ClaimPaid2, 
      ClaimResolved, 
      ClaimSubmitted, 
      CustomCode13
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisputeStatusCodeType = (
      Closed2, 
      WaitingForSellerResponse, 
      WaitingForBuyerResponse, 
      ClosedFVFCreditStrike, 
      ClosedNoFVFCreditStrike, 
      ClosedFVFCreditNoStrike, 
      ClosedNoFVFCreditNoStrike, 
      StrikeAppealedAfterClosing, 
      FVFCreditReversedAfterClosing, 
      StrikeAppealedAndFVFCreditReversed, 
      ClaimOpened2, 
      NoDocumentation2, 
      ClaimClosed2, 
      ClaimDenied2, 
      ClaimInProcess, 
      ClaimApproved, 
      ClaimPaid3, 
      ClaimResolved2, 
      ClaimSubmitted2, 
      CustomCode14
);

  { "urn:ebay:apis:eBLBaseComponents" }
  ErrorClassificationCodeType = (RequestError, SystemError, CustomCode15);

  { "urn:ebay:apis:eBLBaseComponents" }
  ErrorHandlingCodeType = (Legacy, BestEffort, AllOrNothing, FailOnError);

  { "urn:ebay:apis:eBLBaseComponents" }
  InvocationStatusType = (InProgress, Success2, Failure2, CustomCode16);

  { "urn:ebay:apis:eBLBaseComponents" }
  MeasurementSystemCodeType = (English, Metric);

  { "urn:ebay:apis:eBLBaseComponents" }
  SeverityCodeType = (Warning2, Error, CustomCode17);

  { "urn:ebay:apis:eBLBaseComponents" }
  WarningLevelCodeType = (Low_, High_);

  { "urn:ebay:apis:eBLBaseComponents" }
  AccessRuleCurrentStatusCodeType = (NotSet, HourlyLimitExceeded, DailyLimitExceeded, PeriodicLimitExceeded, HourlySoftLimitExceeded, DailySoftLimitExceeded, PeriodicSoftLimitExceeded, CustomCode18);

  { "urn:ebay:apis:eBLBaseComponents" }
  AccessRuleStatusCodeType = (RuleOff, RuleOn, ApplicationBlocked, CustomCode19);

  { "urn:ebay:apis:eBLBaseComponents" }
  AccountDetailEntryCodeType = (
      Unknown, 
      FeeInsertion, 
      FeeBold, 
      FeeFeatured, 
      FeeCategoryFeatured, 
      FeeFinalValue, 
      PaymentCheck, 
      PaymentCC, 
      CreditCourtesy, 
      CreditNoSale, 
      CreditPartialSale, 
      RefundCC, 
      RefundCheck, 
      FinanceCharge, 
      AWDebit, 
      AWCredit, 
      AWMemo, 
      CreditDuplicateListing, 
      FeePartialSale, 
      PaymentElectronicTransferReversal, 
      PaymentCCOnce, 
      FeeReturnedCheck, 
      FeeRedepositCheck, 
      PaymentCash, 
      CreditInsertion, 
      CreditBold, 
      CreditFeatured, 
      CreditCategoryFeatured, 
      CreditFinalValue, 
      FeeNSFCheck, 
      FeeReturnCheckClose, 
      Memo, 
      PaymentMoneyOrder, 
      CreditCardOnFile, 
      CreditCardNotOnFile, 
      Invoiced, 
      InvoicedCreditCard, 
      CreditTransferFrom, 
      DebitTransferTo, 
      InvoiceCreditBalance, 
      eBayDebit, 
      eBayCredit, 
      PromotionalCredit, 
      CCNotOnFilePerCustReq, 
      CreditInsertionFee, 
      CCPaymentRejected, 
      FeeGiftIcon, 
      CreditGiftIcon, 
      FeeGallery, 
      FeeFeaturedGallery, 
      CreditGallery, 
      CreditFeaturedGallery, 
      ItemMoveFee, 
      OutageCredit, 
      CreditPSA, 
      CreditPCGS, 
      FeeReserve, 
      CreditReserve, 
      eBayVISACredit, 
      BBAdminCredit, 
      BBAdminDebit, 
      ReferrerCredit, 
      ReferrerDebit, 
      SwitchCurrency, 
      PaymentGiftCertificate, 
      PaymentWireTransfer, 
      PaymentHomeBanking, 
      PaymentElectronicTransfer, 
      PaymentAdjustmentCredit, 
      PaymentAdjustmentDebit, 
      Chargeoff, 
      ChargeoffRecovery, 
      ChargeoffBankruptcy, 
      ChargeoffSuspended, 
      ChargeoffDeceased, 
      ChargeoffOther, 
      ChargeoffWacko, 
      FinanceChargeReversal, 
      FVFCreditReversal, 
      ForeignFundsConvert, 
      ForeignFundsCheckReversal, 
      EOMRestriction, 
      AllFeesCredit, 
      SetOnHold, 
      RevertUserState, 
      DirectDebitOnFile, 
      DirectDebitNotOnFile, 
      PaymentDirectDebit, 
      DirectDebitReversal, 
      DirectDebitReturnedItem, 
      FeeHighlight, 
      CreditHighlight, 
      BulkUserSuspension, 
      FeeRealEstate30DaysListing, 
      CreditRealEstate30DaysListing, 
      TradingLimitOverrideOn, 
      TradingLimitOverrideOff, 
      EquifaxRealtimeFee, 
      CreditEquifaxRealtimeFee, 
      PaymentEquifaxDebit, 
      PaymentEquifaxCredit, 
      Merged, 
      AutoTraderOn, 
      AutoTraderOff, 
      PaperInvoiceOn, 
      PaperInvoiceOff, 
      AccountStateSwitch, 
      FVFCreditReversalAutomatic, 
      CreditSoftOutage, 
      LACatalogFee, 
      LAExtraItem, 
      LACatalogItemFeeRefund, 
      LACatalogInsertionRefund, 
      LAFinalValueFee, 
      LAFinalValueFeeRefund, 
      LABuyerPremiumPercentageFee, 
      LABuyerPremiumPercentageFeeRefund, 
      LAAudioVideoFee, 
      LAAudioVideoFeeRefund, 
      FeeIPIXPhoto, 
      FeeIPIXSlideShow, 
      CreditIPIXPhoto, 
      CreditIPIXSlideShow, 
      FeeTenDayAuction, 
      CreditTenDayAuction, 
      TemporaryCredit, 
      TemporaryCreditReversal, 
      SubscriptionAABasic, 
      SubscriptionAAPro, 
      CreditAABasic, 
      CreditAAPro, 
      FeeLargePicture, 
      CreditLargePicture, 
      FeePicturePack, 
      CreditPicturePackPartial, 
      CreditPicturePackFull, 
      SubscriptioneBayStores, 
      CrediteBayStores, 
      FeeInsertionFixedPrice, 
      CreditInsertionFixedPrice, 
      FeeFinalValueFixedPrice, 
      CreditFinalValueFixedPrice, 
      ElectronicInvoiceOn, 
      ElectronicInvoiceOff, 
      FlagDDDDPending, 
      FlagDDPaymentConfirmed, 
      FixedPriceDurationFee, 
      FixedPriceDurationCredit, 
      BuyItNowFee, 
      BuyItNowCredit, 
      FeeSchedule, 
      CreditSchedule, 
      SubscriptionSMBasic, 
      SubscriptionSMBasicPro, 
      CreditSMBasic, 
      CreditSMBasicPro, 
      StoresGTCFee, 
      StoresGTCCredit, 
      ListingDesignerFee, 
      ListingDesignerCredit, 
      ExtendedAuctionFee, 
      ExtendedAcutionCredit, 
      PayPalOTPSucc, 
      PayPalOTPPend, 
      PayPalFailed, 
      PayPalChargeBack, 
      ChargeBack, 
      ChargeBackReversal, 
      PayPalRefund, 
      BonusPointsAddition, 
      BonusPointsReduction, 
      BonusPointsPaymentAutomatic, 
      BonusPointsPaymentManual, 
      BonusPointsPaymentReversal, 
      BonusPointsCashPayout, 
      VATCredit, 
      VATDebit, 
      VATStatusChangePending, 
      VATStatusChangeApproved, 
      VATStatusChange_Denied, 
      VATStatusDeletedByCSR, 
      VATStatusDeletedByUser, 
      SMProListingDesignerFee, 
      SMProListingDesignerCredit, 
      StoresSuccessfulListingFee, 
      StoresSuccessfulListingFeeCredit, 
      StoresReferralFee, 
      StoresReferralCredit, 
      SubtitleFee, 
      SubtitleFeeCredit, 
      eBayStoreInventorySubscriptionCredit, 
      AutoPmntReqExempt, 
      AutoPmntReqRein, 
      PictureManagerSubscriptionFee, 
      PictureManagerSubscriptionFeeCredit, 
      SellerReportsBasicFee, 
      SellerReportsBasicCredit, 
      SellerReportsPlusFee, 
      SellerReportsPlusCredit, 
      PaypalOnFile, 
      PaypalOnFileByCSR, 
      PaypalOffFile, 
      BorderFee, 
      BorderFeeCredit, 
      FeeSearchableMobileDE, 
      SalesReportsPlusFee, 
      SalesReportsPlusCredit, 
      CreditSearchableMobileDE, 
      EmailMarketingFee, 
      EmailMarketingCredit, 
      FeePictureShow, 
      CreditPictureShow, 
      ProPackBundleFee, 
      ProPackBundleFeeCredit, 
      BasicUpgradePackBundleFee, 
      BasicUpgradePackBundleFeeCredit, 
      ValuePackBundleFee, 
      ValuePackBundleFeeCredit, 
      ProPackPlusBundleFee, 
      ProPackPlusBundleFeeCredit, 
      FinalEntry, 
      CustomCode20, 
      ExtendedDurationFee, 
      ExtendedDurationFeeCredit, 
      InternationalListingFee, 
      InternationalListingCredit, 
      MarketplaceResearchExpiredSubscriptionFee, 
      MarketplaceResearchExpiredSubscriptionFeeCredit, 
      MarketplaceResearchBasicSubscriptionFee, 
      MarketplaceResearchBasicSubscriptionFeeCredit, 
      MarketplaceResearchProSubscriptionFee, 
      BasicBundleFee, 
      BasicBundleFeeCredit, 
      MarketplaceResearchProSubscriptionFeeCredit, 
      VehicleLocalSubscriptionFee, 
      VehicleLocalSubscriptionFeeCredit, 
      VehicleLocalInsertionFee, 
      VehicleLocalInsertionFeeCredit, 
      VehicleLocalFinalValueFee, 
      VehicleLocalFinalValueFeeCredit, 
      VehicleLocalGTCFee, 
      VehicleLocalGTCFeeCredit, 
      eBayMotorsProFee, 
      CrediteBayMotorsProFee, 
      eBayMotorsProFeatureFee, 
      CrediteBayMotorsProFeatureFee, 
      FeeGalleryPlus, 
      CreditGalleryPlus, 
      PrivateListing, 
      CreditPrivateListing, 
      ImmoProFee, 
      CreditImmoProFee, 
      ImmoProFeatureFee, 
      CreditImmoProFeatureFee
);

  { "urn:ebay:apis:eBLBaseComponents" }
  AccountEntrySortTypeCodeType = (None3, AccountEntryCreatedTimeAscending, AccountEntryCreatedTimeDescending, AccountEntryItemNumberAscending, AccountEntryItemNumberDescending, AccountEntryFeeTypeAscending, AccountEntryFeeTypeDescending, CustomCode21);

  { "urn:ebay:apis:eBLBaseComponents" }
  AccountHistorySelectionCodeType = (LastInvoice, SpecifiedInvoice, BetweenSpecifiedDates, CustomCode22);

  { "urn:ebay:apis:eBLBaseComponents" }
  AccountStateCodeType = (Active, Pending, Inactive, CustomCode23);

  { "urn:ebay:apis:eBLBaseComponents" }
  AdFormatEnabledCodeType = (Disabled, Enabled, Only, ClassifiedAdEnabled, ClassifiedAdOnly, LocalMarketBestOfferOnly, CustomCode24);

  { "urn:ebay:apis:eBLBaseComponents" }
  AdFormatLeadStatusCodeType = (New, Responded, CustomCode25);

  { "urn:ebay:apis:eBLBaseComponents" }
  AddressOwnerCodeType = (PayPal2, eBay2, CustomCode26);

  { "urn:ebay:apis:eBLBaseComponents" }
  AddressRecordTypeCodeType = (Residential, Business, CustomCode27);

  { "urn:ebay:apis:eBLBaseComponents" }
  AddressStatusCodeType = (None4, Confirmed, Unconfirmed, CustomCode28);

  { "urn:ebay:apis:eBLBaseComponents" }
  ApplicationDeviceTypeCodeType = (Browser, Wireless, Desktop, SetTopTVBox, CustomCode29);

  { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferActionCodeType = (Accept, Decline, Counter, CustomCode30);

  { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferStatusCodeType = (Pending2, Accepted, Declined, Expired, Retracted, AdminEnded, Active2, Countered, All, CustomCode31);

  { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferTypeCodeType = (BuyerBestOffer, BuyerCounterOffer, SellerCounterOffer, CustomCode32);

  { "urn:ebay:apis:eBLBaseComponents" }
  BidActionCodeType = (
      Unknown2, 
      Bid, 
      NotUsed, 
      Retraction, 
      AutoRetraction, 
      Cancelled, 
      AutoCancel, 
      Absentee, 
      BuyItNow, 
      Purchase, 
      CustomCode33, 
      Offer, 
      Counter2, 
      Accept2, 
      Decline2
);

  { "urn:ebay:apis:eBLBaseComponents" }
  BidGroupItemStatusCodeType = (CurrentBid, Cancelled2, Pending3, Skipped, Ended, Won, GroupClosed, CustomCode34);

  { "urn:ebay:apis:eBLBaseComponents" }
  BidGroupStatusCodeType = (Open, Closed3, CustomCode35);

  { "urn:ebay:apis:eBLBaseComponents" }
  BidderStatusCodeType = (Approved, Denied, Pending4, CustomCode36);

  { "urn:ebay:apis:eBLBaseComponents" }
  BuyerProtectionCodeType = (ItemIneligible, ItemEligible, ItemMarkedIneligible, ItemMarkedEligible, CustomCode37);

  { "urn:ebay:apis:eBLBaseComponents" }
  BuyerProtectionSourceCodeType = (eBay3, PayPal3, CustomCode38);

  { "urn:ebay:apis:eBLBaseComponents" }
  CalculatedShippingChargeOptionCodeType = (ChargeEachItem, ChargeEntireOrder, CustomCode39);

  { "urn:ebay:apis:eBLBaseComponents" }
  CalculatedShippingRateOptionCodeType = (CombinedItemWeight, IndividualItemWeight, CustomCode40);

  { "urn:ebay:apis:eBLBaseComponents" }
  CategoryListingsOrderCodeType = (
      NoFilter, 
      ItemsBy24Hr, 
      ItemsEndToday, 
      ItemsEndIn5Hr, 
      SortByPriceAsc, 
      SortByPriceDesc, 
      BestMatchSort, 
      DistanceSort, 
      CustomCode41, 
      BestMatchCategoryGroup, 
      PricePlusShippingAsc, 
      PricePlusShippingDesc
);

  { "urn:ebay:apis:eBLBaseComponents" }
  CategoryListingsSearchCodeType = (Featured, SuperFeatured, CustomCode42);

  { "urn:ebay:apis:eBLBaseComponents" }
  CharacteristicsSearchCodeType = (Single_, Multi, CustomCode43);

  { "urn:ebay:apis:eBLBaseComponents" }
  CharityAffiliationTypeCodeType = (Community, Direct, Remove, CustomCode44);

  { "urn:ebay:apis:eBLBaseComponents" }
  CharitySellerStatusCodeType = (Suspended, Registered, Closed4, CreditCardExpired, TokenExpired, CreditCardAboutToExpire, RegisteredNoCreditCard, NotRegisteredLostDirectSellerStatus, DirectDebitRejected, CustomCode45);

  { "urn:ebay:apis:eBLBaseComponents" }
  CharityStatusCodeType = (Valid, NoLongerValid, CustomCode46);

  { "urn:ebay:apis:eBLBaseComponents" }
  CheckoutMethodCodeType = (Other2, ThirdPartyCheckout, CustomCode47);

  { "urn:ebay:apis:eBLBaseComponents" }
  CheckoutStatusCodeType = (CheckoutComplete, CheckoutIncomplete, BuyerRequestsTotal, SellerResponded, CustomCode48);

  { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdBestOfferEnabledCodeType = (Disabled2, Enabled2, Required, CustomCode49);

  { "urn:ebay:apis:eBLBaseComponents" }
  ClassifiedAdPaymentMethodEnabledCodeType = (EnabledWithCheckout, EnabledWithoutCheckout, NotSupported, CustomCode50);

  { "urn:ebay:apis:eBLBaseComponents" }
  CombinedPaymentOptionCodeType = (NoCombinedPayment, DiscountSpecified, SpecifyDiscountLater, CustomCode51);

  { "urn:ebay:apis:eBLBaseComponents" }
  CombinedPaymentPeriodCodeType = (Days_3, Days_5, Days_7, Days_14, Days_30, Ineligible2, CustomCode52);

  { "urn:ebay:apis:eBLBaseComponents" }
  CommentTypeCodeType = (Positive, Neutral, Negative, Withdrawn, IndependentlyWithdrawn, CustomCode53);

  { "urn:ebay:apis:eBLBaseComponents" }
  CompleteStatusCodeType = (Incomplete, Complete, Pending5, CustomCode54);

  { "urn:ebay:apis:eBLBaseComponents" }
  ConditionSelectionCodeType = (All2, New2, CustomCode55);

  { "urn:ebay:apis:eBLBaseComponents" }
  CountryCodeType = (
      AF, 
      AL, 
      DZ, 
      AS_, 
      AD, 
      AO, 
      AI, 
      AQ, 
      AG, 
      AR, 
      AM, 
      AW, 
      AU, 
      AT, 
      AZ, 
      BS, 
      BH, 
      BD, 
      BB, 
      BY, 
      BE, 
      BZ, 
      BJ, 
      BM, 
      BT, 
      BO, 
      BA, 
      BW, 
      BV, 
      BR, 
      IO, 
      BN, 
      BG, 
      BF, 
      BI, 
      KH, 
      CM, 
      CA, 
      CV, 
      KY, 
      CF, 
      TD, 
      CL, 
      CN, 
      CX, 
      CC, 
      CO, 
      KM, 
      CG, 
      CD, 
      CK, 
      CR, 
      CI, 
      HR, 
      CU, 
      CY, 
      CZ, 
      DK, 
      DJ, 
      DM, 
      DO_, 
      TP, 
      EC, 
      EG, 
      SV, 
      GQ, 
      ER, 
      EE, 
      ET, 
      FK, 
      FO, 
      FJ, 
      FI, 
      FR, 
      GF, 
      PF, 
      TF, 
      GA, 
      GM, 
      GE, 
      DE, 
      GH, 
      GI, 
      GR, 
      GL, 
      GD, 
      GP, 
      GU, 
      GT, 
      GN, 
      GW, 
      GY, 
      HT, 
      HM, 
      VA, 
      HN, 
      HK, 
      HU, 
      IS_, 
      IN_, 
      ID, 
      IR, 
      IQ, 
      IE, 
      IL, 
      IT, 
      JM, 
      JP, 
      JO, 
      KZ, 
      KE, 
      KI, 
      KP, 
      KR, 
      KW, 
      KG, 
      LA, 
      LV, 
      LB, 
      LS, 
      LR, 
      LY, 
      LI, 
      LT, 
      LU, 
      MO, 
      MK, 
      MG, 
      MW, 
      MY, 
      MV, 
      ML, 
      MT, 
      MH, 
      MQ, 
      MR, 
      MU, 
      YT, 
      MX, 
      FM, 
      MD, 
      MC, 
      MN, 
      MS, 
      MA, 
      MZ, 
      MM, 
      NA, 
      NR, 
      NP, 
      NL, 
      AN, 
      NC, 
      NZ, 
      NI, 
      NE, 
      NG, 
      NU, 
      NF, 
      MP, 
      NO, 
      OM, 
      PK, 
      PW, 
      PS, 
      PA, 
      PG, 
      PY, 
      PE, 
      PH, 
      PN, 
      PL, 
      PT, 
      PR, 
      QA, 
      RE, 
      RO, 
      RU, 
      RW, 
      SH, 
      KN, 
      LC, 
      PM, 
      VC, 
      WS, 
      SM, 
      ST, 
      SA, 
      SN, 
      SC, 
      SL, 
      SG, 
      SK, 
      SI, 
      SB, 
      SO, 
      ZA, 
      GS, 
      ES, 
      LK, 
      SD, 
      SR, 
      SJ, 
      SZ, 
      SE, 
      CH, 
      SY, 
      TW, 
      TJ, 
      TZ, 
      TH, 
      TG, 
      TK, 
      TO_, 
      TT, 
      TN, 
      TR, 
      TM, 
      TC, 
      TV, 
      UG, 
      UA, 
      AE, 
      GB, 
      US, 
      UM, 
      UY, 
      UZ, 
      VU, 
      VE, 
      VN, 
      VG, 
      VI, 
      WF, 
      EH, 
      YE, 
      YU, 
      ZM, 
      ZW, 
      AA, 
      QM, 
      QN, 
      QO, 
      QP, 
      JE, 
      GG, 
      ZZ, 
      RS, 
      ME, 
      CustomCode56
);

  { "urn:ebay:apis:eBLBaseComponents" }
  CurrencyCodeType = (
      AFA, 
      ALL3, 
      DZD, 
      ADP, 
      AOA, 
      ARS, 
      AMD, 
      AWG, 
      AZM, 
      BSD, 
      BHD, 
      BDT, 
      BBD, 
      BYR, 
      BZD, 
      BMD, 
      BTN, 
      INR, 
      BOV, 
      BOB, 
      BAM, 
      BWP, 
      BRL, 
      BND, 
      BGL, 
      BGN, 
      BIF, 
      KHR, 
      CAD, 
      CVE, 
      KYD, 
      XAF, 
      CLF, 
      CLP, 
      CNY, 
      COP, 
      KMF, 
      CDF, 
      CRC, 
      HRK, 
      CUP, 
      CYP, 
      CZK, 
      DKK, 
      DJF, 
      DOP, 
      TPE, 
      ECV, 
      ECS, 
      EGP, 
      SVC, 
      ERN, 
      EEK, 
      ETB, 
      FKP, 
      FJD, 
      GMD, 
      GEL, 
      GHC, 
      GIP, 
      GTQ, 
      GNF, 
      GWP, 
      GYD, 
      HTG, 
      HNL, 
      HKD, 
      HUF, 
      ISK, 
      IDR, 
      IRR, 
      IQD, 
      ILS, 
      JMD, 
      JPY, 
      JOD, 
      KZT, 
      KES, 
      AUD, 
      KPW, 
      KRW, 
      KWD, 
      KGS, 
      LAK, 
      LVL, 
      LBP, 
      LSL, 
      LRD, 
      LYD, 
      CHF, 
      LTL, 
      MOP, 
      MKD, 
      MGF, 
      MWK, 
      MYR, 
      MVR, 
      MTL, 
      EUR, 
      MRO, 
      MUR, 
      MXN, 
      MXV, 
      MDL, 
      MNT, 
      XCD, 
      MZM, 
      MMK, 
      ZAR, 
      NAD, 
      NPR, 
      ANG, 
      XPF, 
      NZD, 
      NIO, 
      NGN, 
      NOK, 
      OMR, 
      PKR, 
      PAB, 
      PGK, 
      PYG, 
      PEN, 
      PHP, 
      PLN, 
      USD, 
      QAR, 
      ROL, 
      RUB, 
      RUR, 
      RWF, 
      SHP, 
      WST, 
      STD, 
      SAR, 
      SCR, 
      SLL, 
      SGD, 
      SKK, 
      SIT, 
      SBD, 
      SOS, 
      LKR, 
      SDD, 
      SRG, 
      SZL, 
      SEK, 
      SYP, 
      TWD, 
      TJS, 
      TZS, 
      THB, 
      XOF, 
      TOP, 
      TTD, 
      TND, 
      TRL, 
      TMM, 
      UGX, 
      UAH, 
      AED, 
      GBP, 
      USS, 
      USN, 
      UYU, 
      UZS, 
      VUV, 
      VEB, 
      VND, 
      MAD, 
      YER, 
      YUM, 
      ZMK, 
      ZWD, 
      ATS, 
      CustomCode57
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DateSpecifierCodeType = (M, D, Y, CustomCode58);

  { "urn:ebay:apis:eBLBaseComponents" }
  DaysCodeType = (None5, EveryDay, Weekdays, Weekends, CustomCode59);

  { "urn:ebay:apis:eBLBaseComponents" }
  DepositTypeCodeType = (None6, OtherMethod, FastDeposit, CustomCode60);

  { "urn:ebay:apis:eBLBaseComponents" }
  DescriptionReviseModeCodeType = (Replace, Prepend, Append, CustomCode61);

  { "urn:ebay:apis:eBLBaseComponents" }
  DescriptionTemplateCodeType = (Layout, Theme, CustomCode62);

  { "urn:ebay:apis:eBLBaseComponents" }
  DetailNameCodeType = (
      CountryDetails, 
      CurrencyDetails, 
      PaymentOptionDetails, 
      RegionDetails, 
      ShippingLocationDetails, 
      ShippingServiceDetails, 
      SiteDetails, 
      TaxJurisdiction, 
      URLDetails, 
      TimeZoneDetails, 
      RegionOfOriginDetails, 
      DispatchTimeMaxDetails, 
      ItemSpecificDetails, 
      UnitOfMeasurementDetails, 
      ShippingPackageDetails, 
      CustomCode63, 
      ShippingCarrierDetails
);

  { "urn:ebay:apis:eBLBaseComponents" }
  DeviceTypeCodeType = (Platform_, SMS, CustomCode64);

  { "urn:ebay:apis:eBLBaseComponents" }
  DigitalDeliveryEnabledCodeType = (Disabled3, Enabled3, Promoted, CustomCode65);

  { "urn:ebay:apis:eBLBaseComponents" }
  DigitalDeliveryMethodCodeType = (None7, DownloadURL, AlternateDeliveryInstructions, CustomCode66);

  { "urn:ebay:apis:eBLBaseComponents" }
  DiscountCodeType = (Percentage, Price, CustomCode67);

  { "urn:ebay:apis:eBLBaseComponents" }
  DiscountNameCodeType = (EachAdditionalAmount, EachAdditionalAmountOff, EachAdditionalPercentOff, IndividualItemWeight2, CombinedItemWeight2, WeightOff, ShippingCostXForAmountY, ShippingCostXForItemCountN, MaximumShippingCostPerOrder, CustomCode68);

  { "urn:ebay:apis:eBLBaseComponents" }
  DisplayPayNowButtonCodeType = (ShowPayNowButtonForAllPaymentMethods, ShowPayNowButtonForPayPalOnly, CustomCode69);

  { "urn:ebay:apis:eBLBaseComponents" }
  EBaySubscriptionTypeCodeType = (
      SellerAssistant, 
      SellerAssistantPro, 
      EBayStoreBasic, 
      EBayStoreFeatured, 
      EBayStoreAnchor, 
      SellingManager, 
      SellingManagerPro, 
      PictureManagerLevel1, 
      PictureManagerLevel2, 
      PictureManagerLevel3, 
      PictureManagerLevel4, 
      PictureManagerLevel5, 
      PictureManagerLevel6, 
      PictureManagerLevel7, 
      SellerReportsBasic, 
      SellerReportsPlus, 
      FileExchange, 
      LocalMarketSpecialty, 
      LocalMarketRegular, 
      LocalMarketPremium, 
      CustomCode70
);

  { "urn:ebay:apis:eBLBaseComponents" }
  EnableCodeType = (Enable, Disable, CustomCode71);

  { "urn:ebay:apis:eBLBaseComponents" }
  EndOfAuctionLogoTypeCodeType = (WinningBidderNotice, Store, Customized, CustomCode72, None8);

  { "urn:ebay:apis:eBLBaseComponents" }
  EndReasonCodeType = (LostOrBroken, NotAvailable, Incorrect, OtherListingError, CustomCode73, SellToHighBidder);

  { "urn:ebay:apis:eBLBaseComponents" }
  ExpressDetailLevelCodeType = (Coarse, Fine, None9, CustomCode74);

  { "urn:ebay:apis:eBLBaseComponents" }
  ExpressHistogramSortCodeType = (ItemCount, ProductCount, Alphabetical, CustomCode75);

  { "urn:ebay:apis:eBLBaseComponents" }
  ExpressItemSortCodeType = (LowestTotalCost, HighestTotalCost, Relevance, CustomCode76);

  { "urn:ebay:apis:eBLBaseComponents" }
  ExpressProductSortCodeType = (LowestPrice, HighestPrice, SalesRank, CustomCode77);

  { "urn:ebay:apis:eBLBaseComponents" }
  ExpressSellingPreferenceCodeType = (All4, ExpressOnly, OptOut, CustomCode78);

  { "urn:ebay:apis:eBLBaseComponents" }
  ExternalProductCodeType = (ISBN, UPC, ProductID, EAN, Keywords, MPN, CustomCode79);

  { "urn:ebay:apis:eBLBaseComponents" }
  FeatureIDCodeType = (
      ListingDurations, 
      BestOfferEnabled, 
      DutchBINEnabled, 
      ShippingTermsRequired, 
      UserConsentRequired, 
      HomePageFeaturedEnabled, 
      AdFormatEnabled, 
      DigitalDeliveryEnabled, 
      BestOfferCounterEnabled, 
      BestOfferAutoDeclineEnabled, 
      ProPack, 
      BasicUpgradePack, 
      ValuePack, 
      ProPackPlus, 
      LocalMarketSpecialitySubscription, 
      LocalMarketRegularSubscription, 
      LocalMarketPremiumSubscription, 
      LocalMarketNonSubscription, 
      ExpressEnabled, 
      ExpressPicturesRequired, 
      ExpressConditionRequired, 
      SellerContactDetailsEnabled, 
      CustomCode80, 
      MinimumReservePrice, 
      TransactionConfirmationRequestEnabled, 
      StoreInventoryEnabled, 
      LocalListingDistances, 
      SkypeMeTransactionalEnabled, 
      SkypeMeNonTransactionalEnabled, 
      ClassifiedAdPaymentMethodEnabled, 
      ClassifiedAdShippingMethodEnabled, 
      ClassifiedAdBestOfferEnabled, 
      ClassifiedAdCounterOfferEnabled, 
      ClassifiedAdAutoDeclineEnabled, 
      ClassifiedAdContactByEmailEnabled, 
      ClassifiedAdContactByPhoneEnabled, 
      SafePaymentRequired, 
      MaximumBestOffersAllowed, 
      ClassifiedAdMaximumBestOffersAllowed, 
      ClassifiedAdContactByEmailAvailable, 
      ClassifiedAdPayPerLeadEnabled, 
      ItemSpecificsEnabled, 
      PaisaPayFullEscrowEnabled, 
      ClassifiedAdAutoAcceptEnabled, 
      BestOfferAutoAcceptEnabled
);

  { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackRatingDetailCodeType = (ItemAsDescribed, Communication, ShippingTime, ShippingAndHandlingCharges, CustomCode81);

  { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackRatingStarCodeType = (
      None10, 
      Yellow, 
      Blue, 
      Turquoise, 
      Purple, 
      Red, 
      Green, 
      YellowShooting, 
      TurquoiseShooting, 
      PurpleShooting, 
      RedShooting, 
      CustomCode82
);

  { "urn:ebay:apis:eBLBaseComponents" }
  FeedbackResponseCodeType = (Reply, FollowUp, CustomCode83);

  { "urn:ebay:apis:eBLBaseComponents" }
  FlatRateInsuranceRangeCodeType = (FlatRateInsuranceRange1, FlatRateInsuranceRange2, FlatRateInsuranceRange3, FlatRateInsuranceRange4, FlatRateInsuranceRange5, FlatRateInsuranceRange6, CustomCode84);

  { "urn:ebay:apis:eBLBaseComponents" }
  FlatShippingRateOptionCodeType = (ChargeAmountForEachAdditionalItem, DeductAmountFromEachAdditionalItem, ShipAdditionalItemsFree, CustomCode85);

  { "urn:ebay:apis:eBLBaseComponents" }
  GallerySortFilterCodeType = (ShowAnyItems, ShowItemsWithGalleryImagesFirst, ShowOnlyItemsWithGalleryImages, CustomCode86);

  { "urn:ebay:apis:eBLBaseComponents" }
  GalleryTypeCodeType = (None11, Featured2, Gallery, Plus, CustomCode87);

  { "urn:ebay:apis:eBLBaseComponents" }
  GetAllBiddersModeCodeType = (ViewAll, EndedListing, SecondChanceEligibleEndedListing, CustomCode88);

  { "urn:ebay:apis:eBLBaseComponents" }
  GiftServicesCodeType = (GiftExpressShipping, GiftShipToRecipient, GiftWrap, CustomCode89);

  { "urn:ebay:apis:eBLBaseComponents" }
  GranularityLevelCodeType = (Coarse2, Fine2, Medium, CustomCode90);

  { "urn:ebay:apis:eBLBaseComponents" }
  HandlingNameCodeType = (EachAdditionalAmount2, EachAdditionalAmountOff2, EachAdditionalPercentOff2, IndividualHandlingFee, CombinedHandlingFee, CustomCode91);

  { "urn:ebay:apis:eBLBaseComponents" }
  HitCounterCodeType = (NoHitCounter, HonestyStyle, GreenLED, Hidden, BasicStyle, RetroStyle, HiddenStyle, CustomCode92);

  { "urn:ebay:apis:eBLBaseComponents" }
  InsuranceOptionCodeType = (Optional, Required2, NotOffered, IncludedInShippingHandling, NotOfferedOnSite, CustomCode93);

  { "urn:ebay:apis:eBLBaseComponents" }
  InsuranceSelectedCodeType = (NotOffered2, OfferedNotSelected, OfferedSelected, Required3, IncludedInShippingHandling2, CustomCode94);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemConditionCodeType = (New3, Used, CustomCode95);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemFormatSortFilterCodeType = (ShowAnyItems2, ShowItemsWithBINFirst, ShowOnlyItemsWithBIN, ShowOnlyStoreItems, CustomCode96);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemLocationCodeType = (ItemAvailableIn, ItemLocatedIn, CustomCode97);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemSortFilterCodeType = (EndingLast, EndingSoonest, HighestPrice2, LowestPrice2, NewlyListed, RandomlySelected, CustomCode98);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemSortTypeCodeType = (
      ItemID, 
      Price2, 
      StartPrice, 
      Title, 
      BidCount, 
      Quantity, 
      StartTime, 
      EndTime, 
      SellerUserID, 
      TimeLeft, 
      ListingDuration, 
      ListingType, 
      CurrentPrice, 
      ReservePrice, 
      MaxBid, 
      BidderCount, 
      HighBidderUserID, 
      BuyerUserID, 
      BuyerPostalCode, 
      BuyerEmail, 
      SellerEmail, 
      TotalPrice, 
      WatchCount, 
      BestOfferCount, 
      QuestionCount, 
      ShippingServiceCost, 
      FeedbackReceived, 
      FeedbackLeft, 
      UserID, 
      QuantitySold, 
      BestOffer, 
      QuantityAvailable, 
      QuantityPurchased, 
      WonPlatform, 
      SoldPlatform, 
      ListingDurationDescending, 
      ListingTypeDescending, 
      CurrentPriceDescending, 
      ReservePriceDescending, 
      MaxBidDescending, 
      BidderCountDescending, 
      HighBidderUserIDDescending, 
      BuyerUserIDDescending, 
      BuyerPostalCodeDescending, 
      BuyerEmailDescending, 
      SellerEmailDescending, 
      TotalPriceDescending, 
      WatchCountDescending, 
      QuestionCountDescending, 
      ShippingServiceCostDescending, 
      FeedbackReceivedDescending, 
      FeedbackLeftDescending, 
      UserIDDescending, 
      QuantitySoldDescending, 
      BestOfferCountDescending, 
      QuantityAvailableDescending, 
      QuantityPurchasedDescending, 
      BestOfferDescending, 
      ItemIDDescending, 
      PriceDescending, 
      StartPriceDescending, 
      TitleDescending, 
      BidCountDescending, 
      QuantityDescending, 
      StartTimeDescending, 
      EndTimeDescending, 
      SellerUserIDDescending, 
      TimeLeftDescending, 
      WonPlatformDescending, 
      SoldPlatformDescending, 
      LeadCount, 
      NewLeadCount, 
      LeadCountDescending, 
      NewLeadCountDescending, 
      ClassifiedAdPayPerLeadFee, 
      ClassifiedAdPayPerLeadFeeDescending, 
      CustomCode99
);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemSpecificSourceCodeType = (ItemSpecific, Attribute, Product, CustomCode100);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemSpecificsEnabledCodeType = (Disabled4, Enabled4, CustomCode101);

  { "urn:ebay:apis:eBLBaseComponents" }
  ItemTypeFilterCodeType = (AuctionItemsOnly, FixedPricedItem, AllItems, StoreInventoryOnly, FixedPriceExcludeStoreInventory, ExcludeStoreInventory, AllItemTypes, AllFixedPriceItemTypes, CustomCode102, ClassifiedItemsOnly);

  { "urn:ebay:apis:eBLBaseComponents" }
  ListingEnhancementsCodeType = (Border, BoldTitle, Featured3, Highlight, HomePageFeatured, ProPackBundle, BasicUpgradePackBundle, ValuePackBundle, ProPackPlusBundle, CustomCode103);

  { "urn:ebay:apis:eBLBaseComponents" }
  ListingFlowCodeType = (AddItem, ReviseItem, RelistItem, CustomCode104);

  { "urn:ebay:apis:eBLBaseComponents" }
  ListingStatusCodeType = (Active3, Ended2, Completed, CustomCode105, Custom);

  { "urn:ebay:apis:eBLBaseComponents" }
  ListingSubtypeCodeType = (ClassifiedAd, LocalMarketBestOfferOnly2, CustomCode106);

  { "urn:ebay:apis:eBLBaseComponents" }
  ListingTypeCodeType = (
      Unknown3, 
      Chinese, 
      Dutch, 
      Live, 
      Auction, 
      AdType, 
      StoresFixedPrice, 
      PersonalOffer, 
      FixedPriceItem, 
      Half, 
      LeadGeneration, 
      Express, 
      CustomCode107
);

  { "urn:ebay:apis:eBLBaseComponents" }
  MarkUpMarkDownEventTypeCodeType = (MarkUp, MarkDown, CustomCode108);

  { "urn:ebay:apis:eBLBaseComponents" }
  MerchDisplayCodeType = (DefaultTheme, StoreTheme, CustomCode109);

  { "urn:ebay:apis:eBLBaseComponents" }
  MerchandizingPrefCodeType = (OptIn, OptOut2, CustomCode110);

  { "urn:ebay:apis:eBLBaseComponents" }
  MessageStatusTypeCodeType = (Answered, Unanswered, CustomCode111);

  { "urn:ebay:apis:eBLBaseComponents" }
  MessageTypeCodeType = (AskSellerQuestion, ResponseToASQQuestion, ContactEbayMember, ContactTransactionPartner, ResponseToContacteBayMember, ContacteBayMemberViaCommunityLink, CustomCode112, All5, ContactMyBidder);

  { "urn:ebay:apis:eBLBaseComponents" }
  ModifyActionCodeType = (Add, Delete, Update, CustomCode113);

  { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesAlertResolutionStatusCode = (Unresolved2, ResolvedByAutoResolution, ResolvedByUser, CustomCode114);

  { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesFolderOperationCodeType = (Display, Rename, Remove2, CustomCode115);

  { "urn:ebay:apis:eBLBaseComponents" }
  NotificationEventPropertyNameCodeType = (TimeLeft2, CustomCode116);

  { "urn:ebay:apis:eBLBaseComponents" }
  NotificationEventStateCodeType = (
      New4, 
      Failed, 
      MarkedDown, 
      Pending6, 
      FailedPending, 
      MarkedDownPending, 
      Delivered, 
      Undeliverable, 
      Rejected, 
      Canceled, 
      CustomCode117
);

  { "urn:ebay:apis:eBLBaseComponents" }
  NotificationEventTypeCodeType = (
      None12, 
      OutBid, 
      EndOfAuction, 
      AuctionCheckoutComplete, 
      FixedPriceEndOfTransaction, 
      CheckoutBuyerRequestsTotal, 
      Feedback, 
      FeedbackForSeller, 
      FixedPriceTransaction, 
      SecondChanceOffer, 
      AskSellerQuestion2, 
      ItemListed, 
      ItemRevised, 
      BuyerResponseDispute, 
      SellerOpenedDispute, 
      SellerRespondedToDispute, 
      SellerClosedDispute, 
      BestOffer2, 
      MyMessagesAlertHeader, 
      MyMessagesAlert, 
      MyMessageseBayMessageHeader, 
      MyMessageseBayMessage, 
      MyMessagesM2MMessageHeader, 
      MyMessagesM2MMessage, 
      INRBuyerOpenedDispute, 
      INRBuyerRespondedToDispute, 
      INRBuyerClosedDispute, 
      INRSellerRespondedToDispute, 
      Checkout, 
      WatchedItemEndingSoon, 
      ItemClosed, 
      ItemSuspended, 
      ItemSold, 
      ItemExtended, 
      UserIDChanged, 
      EmailAddressChanged, 
      PasswordChanged, 
      PasswordHintChanged, 
      PaymentDetailChanged, 
      AccountSuspended, 
      AccountSummary, 
      ThirdPartyCartCheckout, 
      ItemRevisedAddCharity, 
      AddToWatchList, 
      PlaceOffer, 
      RemoveFromWatchList, 
      AddToBidGroup, 
      RemoveFromBidGroup, 
      CustomCode118
);

  { "urn:ebay:apis:eBLBaseComponents" }
  NotificationPayloadTypeCodeType = (eBLSchemaSOAP, CustomCode119);

  { "urn:ebay:apis:eBLBaseComponents" }
  NotificationRoleCodeType = (Application_, User, UserData, Event, CustomCode120);

  { "urn:ebay:apis:eBLBaseComponents" }
  OrderStatusCodeType = (Active4, Inactive2, Completed2, Cancelled3, Shipped, Default_, Authenticated, InProcess, Invalid, CustomCode121);

  { "urn:ebay:apis:eBLBaseComponents" }
  PaidStatusCodeType = (
      NotPaid, 
      BuyerHasNotCompletedCheckout, 
      PaymentPendingWithPayPal, 
      PaidWithPayPal, 
      MarkedAsPaid, 
      PaymentPendingWithEscrow, 
      PaidWithEscrow, 
      EscrowPaymentCancelled, 
      PaymentPendingWithPaisaPay, 
      PaidWithPaisaPay, 
      PaymentPending, 
      CustomCode122
);

  { "urn:ebay:apis:eBLBaseComponents" }
  PayPalAccountLevelCodeType = (Unverified, InternationalUnverified, Verified, InternationalVerified, Trusted, Unknown4, Invalid2, CustomCode123);

  { "urn:ebay:apis:eBLBaseComponents" }
  PayPalAccountStatusCodeType = (Active5, Closed5, HighRestricted, LowRestricted, Locked2, CustomCode124, WireOff, Unknown5, Invalid3);

  { "urn:ebay:apis:eBLBaseComponents" }
  PayPalAccountTypeCodeType = (Personal, Premier, Business2, Unknown6, Invalid4, CustomCode125);

  { "urn:ebay:apis:eBLBaseComponents" }
  PaymentMethodSearchCodeType = (PayPal4, PaisaPay, PayPalOrPaisaPay, CustomCode126, PaisaPayEscrowEMI2);

  { "urn:ebay:apis:eBLBaseComponents" }
  PaymentStatusCodeType = (NoPaymentFailure, BuyerECheckBounced, BuyerCreditCardFailed, BuyerFailedPaymentReportedBySeller, PayPalPaymentInProcess, PaymentInProcess, CustomCode127);

  { "urn:ebay:apis:eBLBaseComponents" }
  PaymentTypeCodeType = (Sale, Refund, SellerDeniedPayment, AdminReversal, AllOther, CustomCode128);

  { "urn:ebay:apis:eBLBaseComponents" }
  PhotoDisplayCodeType = (None13, SlideShow, SuperSize, PicturePack, SiteHostedPictureShow, VendorHostedPictureShow, SuperSizePictureShow, CustomCode129);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureFormatCodeType = (JPG, GIF, CustomCode130);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerActionCodeType = (Add2, Delete2, Rename2, Move, Change, CustomCode131);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerDetailLevelCodeType = (ReturnAll2, ReturnSubscription, ReturnPicture, CustomCode132);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerPictureDisplayTypeCodeType = (Thumbnail, BIBO, Standard, Large, Supersize2, Original, CustomCode133);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureManagerSubscriptionLevelCodeType = (Free, Level1, Level2, Level3, Level4, CustomCode134);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureSetCodeType = (Standard2, Supersize3, Large2, CustomCode135);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureSourceCodeType = (EPS, PictureManager, Vendor, CustomCode136);

  { "urn:ebay:apis:eBLBaseComponents" }
  PictureUploadPolicyCodeType = (Add3, ClearAndAdd, CustomCode137);

  { "urn:ebay:apis:eBLBaseComponents" }
  ProductSortCodeType = (
      PopularityAsc, 
      PopularityDesc, 
      RatingAsc, 
      RatingDesc, 
      ReviewCountAsc, 
      ReviewCountDesc, 
      ItemCountAsc, 
      ItemCountDesc, 
      TitleAsc, 
      TitleDesc, 
      CustomCode138
);

  { "urn:ebay:apis:eBLBaseComponents" }
  ProductUseCaseCodeType = (AddItem2, ReviseItem2, RelistItem2, CustomCode139);

  { "urn:ebay:apis:eBLBaseComponents" }
  PromotionItemPriceTypeCodeType = (AuctionPrice, BuyItNowPrice, BestOfferOnlyPrice, ClassifiedAdPrice, CustomCode140);

  { "urn:ebay:apis:eBLBaseComponents" }
  PromotionItemSelectionCodeType = (Manual, Automatic, CustomCode141);

  { "urn:ebay:apis:eBLBaseComponents" }
  PromotionMethodCodeType = (CrossSell, UpSell, CustomCode142);

  { "urn:ebay:apis:eBLBaseComponents" }
  PromotionSchemeCodeType = (ItemToItem, ItemToStoreCat, StoreToStoreCat, ItemToDefaultRule, DefaultRule, CategoryProximity, RelatedCategoryRule, DefaultUpSellLogic, DefaultCrossSellLogic, CustomCode143);

  { "urn:ebay:apis:eBLBaseComponents" }
  PromotionalSaleStatusCodeType = (Active6, Scheduled, Processing, Inactive3, Deleted, CustomCode144);

  { "urn:ebay:apis:eBLBaseComponents" }
  QuantityOperatorCodeType = (LessThan, LessThanOrEqual, Equal, GreaterThan, GreaterThanOrEqual, CustomCode145);

  { "urn:ebay:apis:eBLBaseComponents" }
  QuestionTypeCodeType = (General, Shipping, Payment, MultipleItemShipping, CustomizedSubject, CustomCode146);

  { "urn:ebay:apis:eBLBaseComponents" }
  RCSPaymentStatusCodeType = (Canceled2, Paid, Pending7, CustomCode147);

  { "urn:ebay:apis:eBLBaseComponents" }
  RangeCodeType = (High_2, Low_2, CustomCode148);

  { "urn:ebay:apis:eBLBaseComponents" }
  RecipientRelationCodeType = (_, _2, _3, _4, CustomCode149);

  { "urn:ebay:apis:eBLBaseComponents" }
  RecommendationEngineCodeType = (ListingAnalyzer, SIFFTAS, ProductPricing, CustomCode150, SuggestedAttributes, ItemSpecifics);

  { "urn:ebay:apis:eBLBaseComponents" }
  RefundReasonCodeType = (CannotShipProduct, WrongItemShipped, ItemBadQuality, ItemDamaged, BuyerRemorse, Other3, CustomCode151);

  { "urn:ebay:apis:eBLBaseComponents" }
  RefundTypeCodeType = (Full, FullPlusShipping, CustomOrPartial, CustomCode152);

  { "urn:ebay:apis:eBLBaseComponents" }
  SMSSubscriptionErrorCodeCodeType = (SMSAggregatorNotAvailable, PhoneNumberInvalid, PhoneNumberChanged, PhoneNumberCarrierChanged, UserRequestedUnregistration, CustomCode153);

  { "urn:ebay:apis:eBLBaseComponents" }
  SMSSubscriptionUserStatusCodeType = (Registered2, Unregistered, Pending8, Failed2, CustomCode154);

  { "urn:ebay:apis:eBLBaseComponents" }
  SearchFlagsCodeType = (Charity, SearchInDescription, PayPalBuyerPaymentOption, NowAndNew, CustomCode155);

  { "urn:ebay:apis:eBLBaseComponents" }
  SearchResultValuesCodeType = (Escrow2, New5, CharityListing, Picture, Gift, CustomCode156);

  { "urn:ebay:apis:eBLBaseComponents" }
  SearchSortOrderCodeType = (
      SortByEndDate, 
      SortByStartDate, 
      SortByCurrentBid, 
      SortByListingDate, 
      SortByCurrentBidAsc, 
      SortByCurrentBidDesc, 
      SortByPayPalAsc, 
      SortByPayPalDesc, 
      SortByEscrowAsc, 
      SortByEscrowDesc, 
      SortByCountryAsc, 
      SortByCountryDesc, 
      SortByDistanceAsc, 
      SortByBidCountAsc, 
      SortByBidCountDesc, 
      BestMatchSort2, 
      CustomCode157, 
      BestMatchCategoryGroup2, 
      PricePlusShippingAsc2, 
      PricePlusShippingDesc2
);

  { "urn:ebay:apis:eBLBaseComponents" }
  SearchTypeCodeType = (All6, Gallery2, CustomCode158);

  { "urn:ebay:apis:eBLBaseComponents" }
  SecondChanceOfferDurationCodeType = (Days_1, Days_32, Days_52, Days_72, CustomCode159);

  { "urn:ebay:apis:eBLBaseComponents" }
  SellerBusinessCodeType = (Undefined, Private_, Commercial, CustomCode160);

  { "urn:ebay:apis:eBLBaseComponents" }
  SellerGuaranteeLevelCodeType = (NotEligible, Regular, Premium, Ultra, CustomCode161);

  { "urn:ebay:apis:eBLBaseComponents" }
  SellerLevelCodeType = (Bronze, Silver, Gold, Platinum, Titanium, None14, CustomCode162);

  { "urn:ebay:apis:eBLBaseComponents" }
  SellerPaymentMethodCodeType = (NothingOnFile, CreditCard, DirectDebit, DirectDebitPendingSignatureMandate, eBayDirectPay, CustomCode163);

  { "urn:ebay:apis:eBLBaseComponents" }
  SetUserNotesActionCodeType = (AddOrUpdate, Delete3, CustomCode164);

  { "urn:ebay:apis:eBLBaseComponents" }
  ShippingCarrierCodeType = (
      UPS, 
      USPS, 
      DeutschePost, 
      DHL, 
      Hermes, 
      iLoxx, 
      Other4, 
      ColiposteDomestic, 
      ColiposteInternational, 
      Chronopost, 
      Correos, 
      Seur, 
      CustomCode165
);

  { "urn:ebay:apis:eBLBaseComponents" }
  ShippingPackageCodeType = (
      None15, 
      Letter, 
      LargeEnvelope, 
      USPSLargePack, 
      VeryLargePack, 
      ExtraLargePack, 
      UPSLetter, 
      USPSFlatRateEnvelope, 
      PackageThickEnvelope, 
      Roll, 
      Europallet, 
      OneWayPallet, 
      BulkyGoods, 
      Furniture, 
      Cars, 
      Motorbikes, 
      Caravan, 
      IndustryVehicles, 
      ParcelOrPaddedEnvelope, 
      SmallCanadaPostBox, 
      MediumCanadaPostBox, 
      LargeCanadaPostBox, 
      SmallCanadaPostBubbleMailer, 
      MediumCanadaPostBubbleMailer, 
      LargeCanadaPostBubbleMailer, 
      PaddedBags, 
      ToughBags, 
      ExpandableToughBags, 
      MailingBoxes, 
      Winepak, 
      CustomCode166
);

  { "urn:ebay:apis:eBLBaseComponents" }
  ShippingRateTypeCodeType = (OnDemand, DailyPickup, CustomCode167);

  { "urn:ebay:apis:eBLBaseComponents" }
  ShippingServiceCodeType = (
      UPSGround, 
      UPS3rdDay, 
      UPS2ndDay, 
      UPSNextDay, 
      USPSPriority, 
      USPSParcel, 
      USPSMedia, 
      USPSFirstClass, 
      ShippingMethodStandard, 
      ShippingMethodExpress, 
      USPSExpressMail, 
      UPSNextDayAir, 
      UPS2DayAirAM, 
      USPSExpressMailFlatRateEnvelope, 
      USPSPriorityMailFlatRateEnvelope, 
      USPSPriorityMailFlatRateBox, 
      Other5, 
      LocalDelivery, 
      NotSelected, 
      InternationalNotSelected, 
      StandardInternational, 
      ExpeditedInternational, 
      USPSGlobalExpress, 
      USPSGlobalPriority, 
      USPSEconomyParcel, 
      USPSEconomyLetter, 
      USPSAirmailLetter, 
      USPSAirmailParcel, 
      UPSWorldWideExpressPlus, 
      UPSWorldWideExpress, 
      UPSWorldWideExpedited, 
      UPSStandardToCanada, 
      USPSExpressMailInternationalFlatRateEnvelope, 
      USPSPriorityMailInternationalFlatRateEnvelope, 
      USPSPriorityMailInternationalFlatRateBox, 
      OtherInternational, 
      AT_StandardDispatch, 
      AT_InsuredDispatch, 
      AT_Writing, 
      AT_COD, 
      AT_ExpressOrCourier, 
      AT_InsuredExpressOrCourier, 
      AT_SpecialDispatch, 
      AT_InsuredSpecialDispatch, 
      AT_Sonstige, 
      AT_UnversicherterVersandInternational, 
      AT_VersicherterVersandInternational, 
      AT_SonstigerVersandInternational, 
      AT_UnversicherterExpressVersandInternational, 
      AT_VersicherterExpressVersandInternational, 
      AU_Regular, 
      AU_Express, 
      AU_Registered, 
      AU_Courier, 
      AU_Other, 
      AU_EMSInternationalCourierParcels, 
      AU_EMSInternationalCourierDocuments, 
      AU_ExpressPostInternationalDocuments, 
      AU_AirMailInternational, 
      AU_EconomyAirInternational, 
      AU_SeaMailInternational, 
      AU_StandardInternational, 
      AU_ExpeditedInternational, 
      AU_OtherInternational, 
      BEFR_StandardDelivery, 
      BEFR_PriorityDelivery, 
      BEFR_ParcelPost, 
      BEFR_RegisteredMail, 
      BEFR_Other, 
      BEFR_DePostInternational, 
      BEFR_UPSInternational, 
      BEFR_FedExInternational, 
      BEFR_DHLInternational, 
      BEFR_TPGPostTNTInternational, 
      BEFR_StandardInternational, 
      BEFR_ExpeditedInternational, 
      BEFR_OtherInternational, 
      BEFR_LaPosteInternational, 
      BENL_StandardDelivery, 
      BENL_PriorityDelivery, 
      BENL_ParcelPost, 
      BENL_RegisteredMail, 
      BENL_Other, 
      BENL_DePostInternational, 
      BENL_UPSInternational, 
      BENL_FedExInternational, 
      BENL_DHLInternational, 
      BENL_TPGPostTNTInternational, 
      BENL_StandardInternational, 
      BENL_ExpeditedInternational, 
      BENL_OtherInternational, 
      BENL_LaPosteInternational, 
      CA_StandardDelivery, 
      CA_ExpeditedDelivery, 
      CA_PostLettermail, 
      CA_PostRegularParcel, 
      CA_PostExpeditedParcel, 
      CA_PostXpresspost, 
      CA_PostPriorityCourier, 
      CA_StandardInternational, 
      CA_ExpeditedInternational, 
      CA_OtherInternational, 
      CA_PostExpeditedParcelUSA, 
      CA_PostSmallPacketsUSA, 
      CA_PostXpresspostUSA, 
      CA_PostXpresspostInternational, 
      CA_PostInternationalParcelSurface, 
      CA_PostInternationalParcelAir, 
      CA_SmallPacketsInternational, 
      CA_PurolatorInternational, 
      CA_PostSmallPacketsUSAGround, 
      CA_PostSmallPacketsUSAAir, 
      CA_SmallPacketsInternationalGround, 
      CA_SmallPacketsInternationalAir, 
      CA_PostUSALetterPost, 
      CA_PostInternationalLetterPost, 
      CA_UPSExpressCanada, 
      CA_UPSExpressSaverCanada, 
      CA_UPSExpeditedCanada, 
      CA_UPSStandardCanada, 
      CA_UPSExpressUnitedStates, 
      CA_UPSExpeditedUnitedStates, 
      CA_UPS3DaySelectUnitedStates, 
      CA_UPSStandardUnitedStates, 
      CA_UPSWorldWideExpress, 
      CA_UPSWorldWideExpedited, 
      CH_StandardDispatchAPost, 
      CH_StandardDispatchBPost, 
      CH_InsuredDispatch, 
      CH_Writing, 
      CH_COD, 
      CH_ExpressOrCourier, 
      CH_InsuredExpressOrCourier, 
      CH_SpecialDispatch, 
      CH_InsuredSpecialDispatch, 
      CH_Sonstige, 
      CH_SonstigerVersandInternational, 
      CH_EconomySendungenInternational, 
      CH_PrioritySendungenInternational, 
      CH_UrgentSendungenInternational, 
      CN_PersonalDelivery, 
      CN_RegularPackage, 
      CN_DeliveryCompanyExpress, 
      CN_PostOfficeExpress, 
      CN_Others, 
      CN_FastPostOffice, 
      CN_ExpressDeliverySameCity, 
      CN_ExpressDeliveryOtherCities, 
      CN_StandardInternational, 
      CN_ExpeditedInternational, 
      CN_OtherInternational, 
      CN_CODInternational, 
      CN_StandardMailingInternational, 
      CN_RegularLogisticsInternational, 
      CN_EMSInternational, 
      CN_OthersInternational, 
      DE_StandardDispatch, 
      DE_InsuredDispatch, 
      DE_Writing, 
      DE_COD, 
      DE_ExpressOrCourier, 
      DE_InsuredExpressOrCourier, 
      DE_SpecialDispatch, 
      DE_InsuredSpecialDispatch, 
      DE_UnversicherterVersand, 
      DE_DeutschePostBrief, 
      DE_DHLPostpaket, 
      DE_DHLPackchen, 
      DE_DeutschePostWarensendung, 
      DE_DeutschePostBuchersendung, 
      DE_HermesPaketUnversichert, 
      DE_HermesPaketVersichert, 
      DE_IloxxTransportXXL, 
      DE_IloxxUbernachtExpress, 
      DE_IloxxStandard, 
      DE_Sonstige, 
      DE_UnversicherterVersandInternational, 
      DE_VersicherterVersandInternational, 
      DE_DHLPostpaketInternational, 
      DE_DHLPackchenInternational, 
      DE_SonstigerVersandInternational, 
      DE_UnversicherterExpressVersandInternational, 
      DE_VersicherterExpressVersandInternational, 
      DE_DeutschePostBriefLandInternational, 
      DE_DeutschePostBriefLuftInternational, 
      DE_IloxxEuropaInternational, 
      DE_IloxxWorldWideInternational, 
      ES_CartasNacionalesHasta20, 
      ES_CartasNacionalesDeMas20, 
      ES_CartasInternacionalesHasta20, 
      ES_CartasInternacionalesDeMas20, 
      ES_PaqueteAzulHasta2kg, 
      ES_PaqueteAzulDeMas2kg, 
      ES_PaqueteInternacionalEconomico, 
      ES_Urgente, 
      ES_Otros, 
      ES_StandardInternational, 
      ES_ExpeditedInternational, 
      ES_OtherInternational, 
      ES_CartasPostalInternational, 
      ES_EmsPostalExpressInternational, 
      ES_EconomyPacketInternational, 
      FR_ChronoposteInternationalClassic, 
      FR_ColiposteColissimoDirect, 
      FR_DHLExpressEuropack, 
      FR_UPSStandard, 
      FR_PostOfficeLetter, 
      FR_PostOfficeLetterFollowed, 
      FR_PostOfficeLetterRecommended, 
      FR_ColiposteColissimo, 
      FR_ColiposteColissimoRecommended, 
      FR_UPSStandardAgainstRefund, 
      FR_Autre, 
      FR_Ecopli, 
      FR_Colieco, 
      FR_AuteModeDenvoiDeColis, 
      FR_RemiseEnMainPropre, 
      FR_StandardInternational, 
      FR_ExpeditedInternational, 
      FR_OtherInternational, 
      FR_LaPosteInternationalPriorityCourier, 
      FR_LaPosteInternationalEconomyCourier, 
      FR_LaPosteColissimoInternational, 
      FR_LaPosteColisEconomiqueInternational, 
      FR_LaPosteColissimoEmballageInternational, 
      FR_ChronopostClassicInternational, 
      FR_ChronopostPremiumInternational, 
      FR_UPSStandardInternational, 
      FR_UPSExpressInternational, 
      FR_DHLInternational, 
      FR_LaPosteLetterMax, 
      IN_Regular, 
      IN_Express, 
      IN_NationalCOD, 
      IN_Courier, 
      IN_LocalCOD, 
      IN_StandardInternational, 
      IN_ExpeditedInternational, 
      IN_OtherInternational, 
      IN_FlatRateCOD, 
      IN_BuyerPicksUpAndPays, 
      IT_RegularMail, 
      IT_PriorityMail, 
      IT_MailRegisteredLetter, 
      IT_MailRegisteredLetterWithMark, 
      IT_InsuredMail, 
      IT_QuickMail, 
      IT_RegularPackage, 
      IT_QuickPackage1, 
      IT_QuickPackage3, 
      IT_ExpressCourier, 
      IT_StandardInternational, 
      IT_ExpeditedInternational, 
      IT_OtherInternational, 
      NL_StandardDelivery, 
      NL_ParcelPost, 
      NL_RegisteredMail, 
      NL_Other, 
      NL_TPGPostTNTInternational, 
      NL_UPSInternational, 
      NL_FedExInternational, 
      NL_DHLInternational, 
      NL_DPDGBRInternational, 
      NL_GLSBusinessInternational, 
      NL_StandardInternational, 
      NL_ExpeditedInternational, 
      NL_OtherInternational, 
      TW_RegisteredMail, 
      TW_UnregisteredMail, 
      TW_COD, 
      TW_DwellingMatchPost, 
      TW_DwellingMatchCOD, 
      TW_SelfPickup, 
      TW_ParcelPost, 
      TW_ExpressMail, 
      TW_Other, 
      TW_CPInternationalLetterPost, 
      TW_CPInternationalParcelPost, 
      TW_CPInternationalRegisteredLetterPost, 
      TW_CPInternationalRegisteredParcelPost, 
      TW_CPInternationalEMS, 
      TW_CPInternationalOceanShippingParcel, 
      TW_FedExInternationalPriority, 
      TW_FedExInternationalEconomy, 
      TW_UPSWorldwideExpedited, 
      TW_UPSWorldwideExpress, 
      TW_UPSWorldwideExpressPlus, 
      TW_OtherInternational, 
      UK_RoyalMailFirstClassStandard, 
      UK_RoyalMailSecondClassStandard, 
      UK_RoyalMailFirstClassRecorded, 
      UK_RoyalMailSecondClassRecorded, 
      UK_RoyalMailSpecialDelivery, 
      UK_RoyalMailStandardParcel, 
      UK_Parcelforce24, 
      UK_Parcelforce48, 
      UK_OtherCourier, 
      UK_SellersStandardRate, 
      UK_CollectInPerson, 
      UK_SellersStandardInternationalRate, 
      UK_RoyalMailAirmailInternational, 
      UK_RoyalMailAirsureInternational, 
      UK_RoyalMailSurfaceMailInternational, 
      UK_RoyalMailInternationalSignedFor, 
      UK_RoyalMailHMForcesMailInternational, 
      UK_ParcelForceInternationalDatapost, 
      UK_ParcelForceIreland24International, 
      UK_ParcelForceEuro48International, 
      UK_ParcelForceInternationalScheduled, 
      UK_OtherCourierOrDeliveryInternational, 
      UK_CollectInPersonInternational, 
      IE_SellersStandardRate, 
      IE_FirstClassLetterService, 
      IE_SwiftPostNational, 
      IE_RegisteredPost, 
      IE_EMSSDSCourier, 
      IE_EconomySDSCourier, 
      IE_OtherCourier, 
      IE_CollectionInPerson, 
      IE_SellersStandardRateInternational, 
      IE_InternationalEconomyService, 
      IE_InternationalPriorityService, 
      IE_SwiftPostExpressInternational, 
      IE_SwiftPostInternational, 
      IE_EMSSDSCourierInternational, 
      IE_EconomySDSCourierInternational, 
      IE_OtherCourierInternational, 
      IE_CollectionInPersonInternational, 
      PL_DomesticRegular, 
      PL_DomesticSpecial, 
      FreightShipping, 
      FreightShippingInternational, 
      USPSGround, 
      ShippingMethodOvernight, 
      CustomCode168, 
      USPSPriorityFlatRateEnvelope, 
      USPSPriorityFlatRateBox, 
      USPSGlobalPrioritySmallEnvelope, 
      USPSGlobalPriorityLargeEnvelope, 
      USPSExpressFlatRateEnvelope, 
      UPSWorldWideExpressBox10kg, 
      UPSWorldWideExpressBox25kg, 
      UPSWorldWideExpressPlusBox10kg, 
      UPSWorldWideExpressPlusBox25kg, 
      HK_LocalPickUpOnly, 
      HK_LocalCourier, 
      HK_DomesticRegularShipping, 
      HK_DomesticSpecialShipping, 
      HK_InternationalRegularShipping, 
      HK_InternationalSpecialShipping, 
      SG_LocalPickUpOnly, 
      SG_LocalCourier, 
      SG_DomesticStandardMail, 
      SG_DomesticNonStandardMail, 
      SG_DomesticSpeedpostIslandwide, 
      SG_InternationalStandardMail, 
      SG_InternationalExpressMailService, 
      SG_InternationalCourier, 
      BENL_DePostZendingNONPRIOR, 
      BENL_DePostZendingPRIOR, 
      BENL_DePostZendingAangetekend, 
      BENL_KilopostPakje, 
      BENL_Taxipost, 
      BENL_KialaAfhaalpunt, 
      BENL_VasteKostenStandaardVerzending, 
      BENL_VasteKostenVersneldeVerzending, 
      BENL_VerzekerdeVerzending, 
      BEFR_LaPosteEnvoiNONPRIOR, 
      BEFR_LaPosteEnvoiPRIOR, 
      BEFR_LaPosteEnvoiRecommande, 
      BEFR_PaquetKilopost, 
      BEFR_Taxipost, 
      BEFR_PointRetraitKiala, 
      BEFR_LivraisonStandardPrixforFaitaire, 
      BEFR_LivraisonExpressPrixforFaitaire, 
      BEFR_LivraisonSecurise, 
      BENL_DePostZendingPRIORInternational, 
      BENL_DePostZendingNONPRIORInternational, 
      BENL_DePostZendingAangetekendInternational, 
      BENL_KilopostPakjeInternational, 
      BENL_TaxipostExpressverzending, 
      BENL_VerzekerdeVerzendingInternational, 
      BEFR_LaPosteenvoiePRIOR, 
      BEFR_LaPosteenvoieNONPRIOR, 
      BEFR_LaPosteenvoieRecommande, 
      BEFR_PaquetKilopostInternationale, 
      BEFR_ExpressTaxipost, 
      BEFR_LivraisonStandardInternationalePrixforFaitaire, 
      BEFR_LivraisonExpressInternationalePrixforFaitaire, 
      BEFR_LivraisonSecuriseInternational, 
      FR_Chronopost, 
      UK_RoyalMailSpecialDeliveryNextDay, 
      CA_PostLightPacketInternational, 
      CA_PostLightPacketUSA, 
      PL_DHLInternational, 
      PL_InternationalRegular, 
      PL_InternationalSpecial, 
      PL_UPSInternational, 
      CAFR_StandardDelivery, 
      CAFR_ExpeditedDelivery, 
      CAFR_PostLettermail, 
      CAFR_PostRegularParcel, 
      CAFR_PostExpeditedParcel, 
      CAFR_PostXpresspost, 
      CAFR_PostPriorityCourier, 
      CAFR_StandardInternational, 
      CAFR_ExpeditedInternational, 
      CAFR_OtherInternational, 
      CAFR_PostExpeditedParcelUSA, 
      CAFR_PostSmallPacketsUSA, 
      CAFR_PostXpresspostUSA, 
      CAFR_PostXpresspostInternational, 
      CAFR_PostInternationalParcelSurface, 
      CAFR_PostInternationalParcelAir, 
      CAFR_SmallPacketsInternational, 
      CAFR_PurolatorInternational, 
      CAFR_PostSmallPacketsUSAGround, 
      CAFR_PostSmallPacketsUSAAir, 
      CAFR_SmallPacketsInternationalGround, 
      CAFR_SmallPacketsInternationalAir, 
      CAFR_PostUSALetterPost, 
      CAFR_PostInternationalLetterPost, 
      CAFR_UPSExpressCanada, 
      CAFR_UPSExpressSaverCanada, 
      CAFR_UPSExpeditedCanada, 
      CAFR_UPSStandardCanada, 
      CAFR_UPSExpressUnitedStates, 
      CAFR_UPSExpeditedUnitedStates, 
      CAFR_UPS3DaySelectUnitedStates, 
      CAFR_UPSStandardUnitedStates, 
      CAFR_UPSWorldWideExpress, 
      CAFR_UPSWorldWideExpedited, 
      UK_RoyalMailSpecialDelivery9am, 
      USPSFirstClassMailInternational, 
      USPSPriorityMailInternational, 
      USPSExpressMailInternational, 
      CH_StandardInternational, 
      CH_ExpeditedInternational, 
      CH_SonstigerVersandSieheArtikelbeschreibung, 
      TW_StandardInternationalFixedRate, 
      TW_ExpeditedInternationalFixedRate, 
      USPSGlobalExpressGuaranteed, 
      AU_RegularWithInsurance, 
      AU_ExpressWithInsurance, 
      DE_DeutschePostWarensendungInternational, 
      DE_DeutschePostByendung, 
      DE_HermesPaketUnversichertInternational, 
      DE_HermesPaketVersichertInternational, 
      DE_iLoxxTransportXXLInternational, 
      DE_iLoxxUbernachtExpressInternational, 
      DE_iLoxxStandardInternational, 
      DE_StandardInternational, 
      DE_ExpeditedInternational, 
      AT_BitteTreffenSieEineAuswahl, 
      AT_EinschreibenVersandInklEinschreibengebuhr, 
      AT_NachnahmeVersandInklNachnahmegebuhr, 
      AT_ExpressOrCourierInternational, 
      AT_InsuredExpressOrCourierInternational, 
      AT_SpecialDispatchInternational, 
      AT_InsuredSpecialDispatchInternational, 
      AT_StandardInternational, 
      AT_ExpeditedInternational, 
      AT_OtherInternationalShipping, 
      CH_BitteTreffenSieEineAuswahl, 
      CH_UnversicherterVersand, 
      CH_VersicherterVersand, 
      CH_EinschreibenVersandInklEinschreibengebuhr, 
      CH_NachnahmeVersandInklNachnahmegebuhr, 
      CH_ExpressOrCourierInternational, 
      CH_InsuredExpressOrCourierInternational, 
      CH_SonderversandZBSperrgutKFZ, 
      CH_VersicherterSonderversandZBSperrgutKFZ, 
      CH_StandardversandAPostPriority, 
      CH_StandardversandBPostEconomy, 
      DE_BitteTreffenSieEineAuswahl, 
      DE_EinschreibenVersandInklEinschreibengebuhr, 
      DE_NachnahmeVersandInklNachnahmegebuhr, 
      DE_ExpressOrCourierInternational, 
      DE_InsuredExpressOrCourierInternational, 
      DE_SonderversandZBMobelKFZ, 
      DE_VersicherterSonderversandZBMobelKFZ, 
      DE_DeutschePostBriefInternational, 
      IE_StandardInternationalFlatRatePostage, 
      IE_ExpeditedInternationalFlatRatePostage, 
      IE_OtherInternationalPostage, 
      UK_StandardInternationalFlatRatePostage, 
      UK_ExpeditedInternationalFlatRatePostage, 
      UK_OtherInternationalPostage, 
      FR_ChronopostChronoRelais, 
      FR_Chrono10, 
      FR_Chrono13, 
      FR_Chrono18, 
      FR_ChronopostExpressInternational, 
      Pickup, 
      Delivery, 
      CA_Pickup, 
      DE_Pickup, 
      AU_Pickup, 
      FR_Pickup, 
      AT_Pickup, 
      BENL_Pickup, 
      BEFR_Pickup, 
      CH_Pickup, 
      IT_Pickup, 
      NL_Pickup, 
      PL_Pickup, 
      ES_Pickup, 
      SG_Delivery
);

  { "urn:ebay:apis:eBLBaseComponents" }
  ShippingTypeCodeType = (Flat, Calculated, Freight, Free2, NotSpecified, FlatDomesticCalculatedInternational, CalculatedDomesticFlatInternational, CustomCode169);

  { "urn:ebay:apis:eBLBaseComponents" }
  SiteCodeType = (
      US2, 
      Canada, 
      UK, 
      Australia, 
      Austria, 
      Belgium_French, 
      France, 
      Germany, 
      Italy, 
      Belgium_Dutch, 
      Netherlands, 
      Spain, 
      Switzerland, 
      Taiwan, 
      eBayMotors, 
      HongKong, 
      Singapore, 
      India, 
      China, 
      Ireland, 
      Malaysia, 
      Philippines, 
      Poland, 
      Sweden, 
      CustomCode170, 
      CanadaFrench
);

  { "urn:ebay:apis:eBLBaseComponents" }
  SiteIDFilterCodeType = (ListedInCurrencyImplied, LocatedInCountryImplied, AvailableInCountryImplied, SiteImplied, BelgiumListing, CustomCode171);

  { "urn:ebay:apis:eBLBaseComponents" }
  SkypeContactOptionCodeType = (Chat, Voice, CustomCode172);

  { "urn:ebay:apis:eBLBaseComponents" }
  SortOrderCodeType = (Ascending, Descending, CustomCode173);

  { "urn:ebay:apis:eBLBaseComponents" }
  StatusCodeType = (Active7, Inactive4, CustomCode174);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreCategoryUpdateActionCodeType = (Add4, Delete4, Move2, Rename3, CustomCode175);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomHeaderLayoutCodeType = (NoHeader, CustomHeaderShown, CustomCode176);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomListingHeaderDisplayCodeType = (None16, Full2, FullAndLeftNavigationBar, CustomCode177);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomListingHeaderLinkCodeType = (None17, AboutMePage, CustomPage, CustomCategory, CustomCode178);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreCustomPageStatusCodeType = (Active8, Delete5, Inactive5, CustomCode179);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreFontFaceCodeType = (Arial, Courier, Times, Verdana, CustomCode180);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreFontSizeCodeType = (XXS, XS, S, M2, L, XL, XXL, CustomCode181);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreHeaderStyleCodeType = (Full3, Minimized, CustomCode182);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreItemListLayoutCodeType = (ListView, GalleryView, CustomCode183);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreItemListSortOrderCodeType = (EndingFirst, NewlyListed2, LowestPriced, HighestPriced, CustomCode184);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreSearchCodeType = (AllItemsInTheStore, AuctionItemsInTheStore, BuyItNowItemsInTheStore, BuyItNowItemsInAllStores, CustomCode185);

  { "urn:ebay:apis:eBLBaseComponents" }
  StoreSubscriptionLevelCodeType = (Close, Basic, Featured4, Anchor, CustomCode186);

  { "urn:ebay:apis:eBLBaseComponents" }
  StringMatchCodeType = (CustomCode187, StartsWith, Contains_);

  { "urn:ebay:apis:eBLBaseComponents" }
  SummaryFrequencyCodeType = (
      EverySunday, 
      EveryMonday, 
      EveryTuesday, 
      EveryWednesday, 
      EveryThursday, 
      EveryFriday, 
      EverySaturday, 
      MonthlyOn1st, 
      MonthlyOn2nd, 
      MonthlyOn3rd, 
      MonthlyOn4th, 
      MonthlyOn5th, 
      MonthlyOn6th, 
      MonthlyOn7th, 
      MonthlyOn8th, 
      MonthlyOn9th, 
      MonthlyOn10th, 
      MonthlyOn11th, 
      MonthlyOn12th, 
      MonthlyOn13th, 
      MonthlyOn14th, 
      MonthlyOn15th, 
      MonthlyOn16th, 
      MonthlyOn17th, 
      MonthlyOn18th, 
      MonthlyOn19th, 
      MonthlyOn20th, 
      MonthlyOn21st, 
      MonthlyOn22nd, 
      MonthlyOn23rd, 
      MonthlyOn24th, 
      MonthlyOn25th, 
      MonthlyOn26th, 
      MonthlyOn27th, 
      MonthlyOn28th, 
      MonthlyOn29th, 
      MonthlyOn30th, 
      MonthlyOn31st, 
      Every31Days, 
      Every60Days, 
      CustomCode188
);

  { "urn:ebay:apis:eBLBaseComponents" }
  SummaryWindowPeriodCodeType = (Last24Hours, Last7Days, Last31Days, CurrentWeek, LastWeek, CurrentMonth, LastMonth, Last60Days, CustomCode189);

  { "urn:ebay:apis:eBLBaseComponents" }
  TaskStatusCodeType = (Pending9, InProgress2, Complete2, Failed3, CustomCode190);

  { "urn:ebay:apis:eBLBaseComponents" }
  TicketEventTypeCodeType = (
      Any, 
      DE_ComedyAndKabarett, 
      DE_FreizeitAndEvents, 
      DE_KonzerteAndFestivals, 
      DE_KulturAndKlassik, 
      DE_MusicalsAndShows, 
      DE_Sportveranstaltungen, 
      DE_Sonstige2, 
      UK_AmusementParks, 
      UK_Comedy, 
      UK_ConcertsAndGigs, 
      UK_ConferencesAndSeminars, 
      UK_ExhibitionsAndShows, 
      UK_Experiences, 
      UK_SportingEvents, 
      UK_TheatreCinemaAndCircus, 
      UK_Other, 
      US_Concerts, 
      US_Movies, 
      US_SportingEvents, 
      US_Theater, 
      US_Other, 
      CustomCode191
);

  { "urn:ebay:apis:eBLBaseComponents" }
  TokenReturnMethodCodeType = (Redirect, FetchToken, CustomCode192);

  { "urn:ebay:apis:eBLBaseComponents" }
  TradingRoleCodeType = (Buyer2, Seller2, CustomCode193);

  { "urn:ebay:apis:eBLBaseComponents" }
  TransactionPlatformCodeType = (eBay4, Express2, Half2, Shopping, CustomCode194);

  { "urn:ebay:apis:eBLBaseComponents" }
  TransactionPlatformType = (eBay5, Express3);

  { "urn:ebay:apis:eBLBaseComponents" }
  UPSRateOptionCodeType = (UPSDailyRates, UPSOnDemandRates, CustomCode195);

  { "urn:ebay:apis:eBLBaseComponents" }
  URLTypeCodeType = (
      ViewItemURL, 
      ViewUserURL, 
      MyeBayURL, 
      MyeBayBiddingURL, 
      MyeBayNotWonURL, 
      MyeBayWonURL, 
      MyeBayWatchingURL, 
      eBayStoreURL, 
      SmallLogoURL, 
      MediumLogoURL, 
      LargeLogoURL, 
      CustomCode196
);

  { "urn:ebay:apis:eBLBaseComponents" }
  UserStatusCodeType = (
      Unknown7, 
      Suspended2, 
      Confirmed2, 
      Unconfirmed2, 
      Ghost, 
      InMaintenance, 
      Deleted2, 
      CreditCardVerify, 
      AccountOnHold, 
      Merged2, 
      RegistrationCodeMailOut, 
      TermPending, 
      UnconfirmedHalfOptIn, 
      CreditCardVerifyHalfOptIn, 
      UnconfirmedPassport, 
      CreditCardVerifyPassport, 
      UnconfirmedExpress, 
      Guest, 
      CustomCode197
);

  { "urn:ebay:apis:eBLBaseComponents" }
  VATStatusCodeType = (NoVATTax, VATTax, VATExempt, CustomCode198);

  { "urn:ebay:apis:eBLBaseComponents" }
  VeROItemStatusCodeType = (Received, Submitted, Removed, SubmissionFailed, ClarificationRequired, CustomCode199);

  { "urn:ebay:apis:eBLBaseComponents" }
  VeROReportPacketStatusCodeType = (Received2, InProcess2, Processed, CustomCode200);

  { "urn:ebay:apis:eBLBaseComponents" }
  WirelessCarrierIDCodeType = (
      Cingular, 
      TMobile, 
      Sprint, 
      Nextel, 
      Verizon, 
      CincinnatiBell, 
      Dobson, 
      Alltel, 
      Leap, 
      USCellular, 
      Movistar, 
      Amena, 
      Vodafone, 
      ATT, 
      CustomCode201
);

  { "urn:ebay:apis:eBLBaseComponents" }
  WishListSortCodeType = (CreationDateDescending, CreationDateAscending, PriceAscending, PriceDescending2, CustomCode202);

  DisputeIDType   =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  UUIDType        =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  BestOfferIDType =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  ItemIDType      =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesAlertIDType =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesMessageIDType =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  OrderIDType     =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  SKUType         =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  UserIDType      =  type WideString;      { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessagesAAQToBidderRequestType = array of AddMemberMessagesAAQToBidderRequestContainerType;   { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessagesAAQToBidderRequest = AddMemberMessagesAAQToBidderRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  AddMemberMessagesAAQToBidderResponseType = array of AddMemberMessagesAAQToBidderResponseContainerType;   { "urn:ebay:apis:eBLBaseComponents" }
  AddMemberMessagesAAQToBidderResponse = AddMemberMessagesAAQToBidderResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  AddToWatchListRequestType = array of ItemIDType;   { "urn:ebay:apis:eBLBaseComponents" }
  AddToWatchListRequest = AddToWatchListRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetApiAccessRulesResponseType = array of ApiAccessRuleType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetApiAccessRulesResponse = GetApiAccessRulesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetAttributesXSLResponseType = array of XSLFileType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetAttributesXSLResponse = GetAttributesXSLResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetCategorySpecificsResponseType = array of CategoryItemSpecificsType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetCategorySpecificsResponse = GetCategorySpecificsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetCharitiesResponseType = array of CharityInfoType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetCharitiesResponse = GetCharitiesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetContextualKeywordsResponseType = array of ContextSearchAssetType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetContextualKeywordsResponse = GetContextualKeywordsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetItemRecommendationsRequestType = array of GetRecommendationsRequestContainerType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetItemRecommendationsRequest = GetItemRecommendationsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetItemRecommendationsResponseType = array of GetRecommendationsResponseContainerType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetItemRecommendationsResponse = GetItemRecommendationsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetLiveAuctionCatalogDetailsResponseType = array of LiveAuctionCatalogType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetLiveAuctionCatalogDetailsResponse = GetLiveAuctionCatalogDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetProductFamilyMembersRequestType = array of ProductSearchType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductFamilyMembersRequest = GetProductFamilyMembersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetProductFinderXSLResponseType = array of XSLFileType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductFinderXSLResponse = GetProductFinderXSLResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GetProductSearchResultsRequestType = array of ProductSearchType;   { "urn:ebay:apis:eBLBaseComponents" }
  GetProductSearchResultsRequest = GetProductSearchResultsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }
  GeteBayDetailsRequestType = array of DetailNameCodeType;   { "urn:ebay:apis:eBLBaseComponents" }
  GeteBayDetailsRequest = GeteBayDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserIdPasswordType = class(TRemotable)
  private
    FAppId: WideString;
    FDevId: WideString;
    FAuthCert: WideString;
    FUsername: WideString;
    FPassword: WideString;
  published
    property AppId: WideString read FAppId write FAppId;
    property DevId: WideString read FDevId write FDevId;
    property AuthCert: WideString read FAuthCert write FAuthCert;
    property Username: WideString read FUsername write FUsername;
    property Password: WideString read FPassword write FPassword;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CustomSecurityHeaderType = class(TSOAPHeader)
  private
    FeBayAuthToken: WideString;
    FHardExpirationWarning: WideString;
    FCredentials: UserIdPasswordType;
    FNotificationSignature: WideString;
  public
    destructor Destroy; override;
  published
    property eBayAuthToken: WideString read FeBayAuthToken write FeBayAuthToken;
    property HardExpirationWarning: WideString read FHardExpirationWarning write FHardExpirationWarning;
    property Credentials: UserIdPasswordType read FCredentials write FCredentials;
    property NotificationSignature: WideString read FNotificationSignature write FNotificationSignature;
  end;

  RequesterCredentials = CustomSecurityHeaderType;      { "urn:ebay:apis:eBLBaseComponents"[H] }
  LookupAttributeArrayType = array of LookupAttributeType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentDetailsType = class(TRemotable)
  private
    FHoursToDeposit: Integer;
    FDaysToFullPayment: Integer;
  published
    property HoursToDeposit: Integer read FHoursToDeposit write FHoursToDeposit;
    property DaysToFullPayment: Integer read FDaysToFullPayment write FDaysToFullPayment;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DistanceType = class(TRemotable)
  private
    FDistanceMeasurement: Integer;
    FDistanceUnit: WideString;
  published
    property DistanceMeasurement: Integer read FDistanceMeasurement write FDistanceMeasurement;
    property DistanceUnit: WideString read FDistanceUnit write FDistanceUnit;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDesignerType = class(TRemotable)
  private
    FLayoutID: Integer;
    FOptimalPictureSize: Boolean;
    FThemeID: Integer;
  published
    property LayoutID: Integer read FLayoutID write FLayoutID;
    property OptimalPictureSize: Boolean read FOptimalPictureSize write FOptimalPictureSize;
    property ThemeID: Integer read FThemeID write FThemeID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReviseStatusType = class(TRemotable)
  private
    FItemRevised: Boolean;
    FBuyItNowAdded: Boolean;
    FBuyItNowLowered: Boolean;
    FReserveLowered: Boolean;
    FReserveRemoved: Boolean;
  published
    property ItemRevised: Boolean read FItemRevised write FItemRevised;
    property BuyItNowAdded: Boolean read FBuyItNowAdded write FBuyItNowAdded;
    property BuyItNowLowered: Boolean read FBuyItNowLowered write FBuyItNowLowered;
    property ReserveLowered: Boolean read FReserveLowered write FReserveLowered;
    property ReserveRemoved: Boolean read FReserveRemoved write FReserveRemoved;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchDetailsType = class(TRemotable)
  private
    FBuyItNowEnabled: Boolean;
    FPicture: Boolean;
    FRecentListing: Boolean;
  published
    property BuyItNowEnabled: Boolean read FBuyItNowEnabled write FBuyItNowEnabled;
    property Picture: Boolean read FPicture write FPicture;
    property RecentListing: Boolean read FRecentListing write FRecentListing;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExternalProductIDType = class(TRemotable)
  private
    FValue: WideString;
    FReturnSearchResultOnDuplicates: Boolean;
    FType_: ExternalProductCodeType;
    FAlternateValue: WideString;
  published
    property Value: WideString read FValue write FValue;
    property ReturnSearchResultOnDuplicates: Boolean read FReturnSearchResultOnDuplicates write FReturnSearchResultOnDuplicates;
    property Type_: ExternalProductCodeType read FType_ write FType_;
    property AlternateValue: WideString read FAlternateValue write FAlternateValue;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingCheckoutRedirectPreferenceType = class(TRemotable)
  private
    FProStoresStoreName: WideString;
    FSellerThirdPartyUsername: WideString;
  published
    property ProStoresStoreName: WideString read FProStoresStoreName write FProStoresStoreName;
    property SellerThirdPartyUsername: WideString read FSellerThirdPartyUsername write FSellerThirdPartyUsername;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddressType = class(TRemotable)
  private
    FName_: WideString;
    FStreet: WideString;
    FStreet1: WideString;
    FStreet2: WideString;
    FCityName: WideString;
    FCounty: WideString;
    FStateOrProvince: WideString;
    FCountry: CountryCodeType;
    FCountryName: WideString;
    FPhone: WideString;
    FPhoneCountryCode: CountryCodeType;
    FPhoneCountryPrefix: WideString;
    FPhoneAreaOrCityCode: WideString;
    FPhoneLocalNumber: WideString;
    FPhone2CountryCode: CountryCodeType;
    FPhone2CountryPrefix: WideString;
    FPhone2AreaOrCityCode: WideString;
    FPhone2LocalNumber: WideString;
    FPostalCode: WideString;
    FAddressID: WideString;
    FAddressOwner: AddressOwnerCodeType;
    FAddressStatus: AddressStatusCodeType;
    FExternalAddressID: WideString;
    FInternationalName: WideString;
    FInternationalStateAndCity: WideString;
    FInternationalStreet: WideString;
    FCompanyName: WideString;
    FAddressRecordType: AddressRecordTypeCodeType;
  published
    property Name_: WideString read FName_ write FName_;
    property Street: WideString read FStreet write FStreet;
    property Street1: WideString read FStreet1 write FStreet1;
    property Street2: WideString read FStreet2 write FStreet2;
    property CityName: WideString read FCityName write FCityName;
    property County: WideString read FCounty write FCounty;
    property StateOrProvince: WideString read FStateOrProvince write FStateOrProvince;
    property Country: CountryCodeType read FCountry write FCountry;
    property CountryName: WideString read FCountryName write FCountryName;
    property Phone: WideString read FPhone write FPhone;
    property PhoneCountryCode: CountryCodeType read FPhoneCountryCode write FPhoneCountryCode;
    property PhoneCountryPrefix: WideString read FPhoneCountryPrefix write FPhoneCountryPrefix;
    property PhoneAreaOrCityCode: WideString read FPhoneAreaOrCityCode write FPhoneAreaOrCityCode;
    property PhoneLocalNumber: WideString read FPhoneLocalNumber write FPhoneLocalNumber;
    property Phone2CountryCode: CountryCodeType read FPhone2CountryCode write FPhone2CountryCode;
    property Phone2CountryPrefix: WideString read FPhone2CountryPrefix write FPhone2CountryPrefix;
    property Phone2AreaOrCityCode: WideString read FPhone2AreaOrCityCode write FPhone2AreaOrCityCode;
    property Phone2LocalNumber: WideString read FPhone2LocalNumber write FPhone2LocalNumber;
    property PostalCode: WideString read FPostalCode write FPostalCode;
    property AddressID: WideString read FAddressID write FAddressID;
    property AddressOwner: AddressOwnerCodeType read FAddressOwner write FAddressOwner;
    property AddressStatus: AddressStatusCodeType read FAddressStatus write FAddressStatus;
    property ExternalAddressID: WideString read FExternalAddressID write FExternalAddressID;
    property InternationalName: WideString read FInternationalName write FInternationalName;
    property InternationalStateAndCity: WideString read FInternationalStateAndCity write FInternationalStateAndCity;
    property InternationalStreet: WideString read FInternationalStreet write FInternationalStreet;
    property CompanyName: WideString read FCompanyName write FCompanyName;
    property AddressRecordType: AddressRecordTypeCodeType read FAddressRecordType write FAddressRecordType;
  end;

  NameValueListArrayType = array of NameValueListType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerProtectionDetailsType = class(TRemotable)
  private
    FBuyerProtectionSource: BuyerProtectionSourceCodeType;
    FBuyerProtectionStatus: BuyerProtectionCodeType;
  published
    property BuyerProtectionSource: BuyerProtectionSourceCodeType read FBuyerProtectionSource write FBuyerProtectionSource;
    property BuyerProtectionStatus: BuyerProtectionCodeType read FBuyerProtectionStatus write FBuyerProtectionStatus;
  end;


  { ============ WARNING ============ }
  { WARNING - Attribute - Name:attributeID, Type:Integer }
  { WARNING - Attribute - Name:attributeLabel, Type:WideString }
  AttributeType = array of ValType;             { "urn:ebay:apis:eBLBaseComponents" }


  { ============ WARNING ============ }
  { WARNING - Attribute - Name:attributeSetID, Type:Integer }
  { WARNING - Attribute - Name:attributeSetVersion, Type:WideString }
  AttributeSetType = array of AttributeType;    { "urn:ebay:apis:eBLBaseComponents" }

  AttributeSetArrayType = array of AttributeSetType;   { "urn:ebay:apis:eBLBaseComponents" }
  AttributeArrayType = array of AttributeType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ValType = class(TRemotable)
  private
    FValueLiteral: WideString;
    FSuggestedValueLiteral: WideString;
    FValueID: Integer;
  published
    property ValueLiteral: WideString read FValueLiteral write FValueLiteral;
    property SuggestedValueLiteral: WideString read FSuggestedValueLiteral write FSuggestedValueLiteral;
    property ValueID: Integer read FValueID write FValueID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LookupAttributeType = class(TRemotable)
  private
    FName_: WideString;
    FValue: WideString;
  published
    property Name_: WideString read FName_ write FName_;
    property Value: WideString read FValue write FValue;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AmountType = class(TRemotable)
  private
    FcurrencyID: CurrencyCodeType;
  published
    property currencyID: CurrencyCodeType read FcurrencyID write FcurrencyID stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LiveAuctionDetailsType = class(TRemotable)
  private
    FUserCatalogID: Integer;
    FScheduleID: Integer;
    FLotNumber: WideString;
    FHighEstimate: AmountType;
    FLowEstimate: AmountType;
  public
    destructor Destroy; override;
  published
    property UserCatalogID: Integer read FUserCatalogID write FUserCatalogID;
    property ScheduleID: Integer read FScheduleID write FScheduleID;
    property LotNumber: WideString read FLotNumber write FLotNumber;
    property HighEstimate: AmountType read FHighEstimate write FHighEstimate;
    property LowEstimate: AmountType read FLowEstimate write FLowEstimate;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferDetailsType = class(TRemotable)
  private
    FBestOfferCount: Integer;
    FBestOfferEnabled: Boolean;
    FBestOffer: AmountType;
    FBestOfferStatus: BestOfferStatusCodeType;
    FBestOfferType: BestOfferTypeCodeType;
  public
    destructor Destroy; override;
  published
    property BestOfferCount: Integer read FBestOfferCount write FBestOfferCount;
    property BestOfferEnabled: Boolean read FBestOfferEnabled write FBestOfferEnabled;
    property BestOffer: AmountType read FBestOffer write FBestOffer;
    property BestOfferStatus: BestOfferStatusCodeType read FBestOfferStatus write FBestOfferStatus;
    property BestOfferType: BestOfferTypeCodeType read FBestOfferType write FBestOfferType;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BiddingDetailsType = class(TRemotable)
  private
    FConvertedMaxBid: AmountType;
    FMaxBid: AmountType;
    FQuantityBid: Integer;
    FQuantityWon: Integer;
    FWinning: Boolean;
    FBidAssistant: Boolean;
  public
    destructor Destroy; override;
  published
    property ConvertedMaxBid: AmountType read FConvertedMaxBid write FConvertedMaxBid;
    property MaxBid: AmountType read FMaxBid write FMaxBid;
    property QuantityBid: Integer read FQuantityBid write FQuantityBid;
    property QuantityWon: Integer read FQuantityWon write FQuantityWon;
    property Winning: Boolean read FWinning write FWinning;
    property BidAssistant: Boolean read FBidAssistant write FBidAssistant;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VATDetailsType = class(TRemotable)
  private
    FBusinessSeller: Boolean;
    FRestrictedToBusiness: Boolean;
    FVATPercent: Single;
  published
    property BusinessSeller: Boolean read FBusinessSeller write FBusinessSeller;
    property RestrictedToBusiness: Boolean read FRestrictedToBusiness write FRestrictedToBusiness;
    property VATPercent: Single read FVATPercent write FVATPercent;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityType = class(TRemotable)
  private
    FCharityName: WideString;
    FCharityNumber: Integer;
    FDonationPercent: Single;
    FCharityID: WideString;
    FMission: WideString;
    FLogoURL: WideString;
    FStatus: CharityStatusCodeType;
    FCharityListing: Boolean;
  published
    property CharityName: WideString read FCharityName write FCharityName;
    property CharityNumber: Integer read FCharityNumber write FCharityNumber;
    property DonationPercent: Single read FDonationPercent write FDonationPercent;
    property CharityID: WideString read FCharityID write FCharityID;
    property Mission: WideString read FMission write FMission;
    property LogoURL: WideString read FLogoURL write FLogoURL;
    property Status: CharityStatusCodeType read FStatus write FStatus;
    property CharityListing: Boolean read FCharityListing write FCharityListing;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionDetailsType = class(TRemotable)
  private
    FPromotionPrice: AmountType;
    FPromotionPriceType: PromotionItemPriceTypeCodeType;
    FBidCount: Integer;
    FConvertedPromotionPrice: AmountType;
  public
    destructor Destroy; override;
  published
    property PromotionPrice: AmountType read FPromotionPrice write FPromotionPrice;
    property PromotionPriceType: PromotionItemPriceTypeCodeType read FPromotionPriceType write FPromotionPriceType;
    property BidCount: Integer read FBidCount write FBidCount;
    property ConvertedPromotionPrice: AmountType read FConvertedPromotionPrice write FConvertedPromotionPrice;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotedItemType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FPictureURL: WideString;
    FPosition: Integer;
    FSelectionType: PromotionItemSelectionCodeType;
    FTitle: WideString;
    FListingType: ListingTypeCodeType;
    FPromotionDetails: PromotionDetailsType;
    FTimeLeft: TXSDuration;
  public
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property PictureURL: WideString read FPictureURL write FPictureURL;
    property Position: Integer read FPosition write FPosition;
    property SelectionType: PromotionItemSelectionCodeType read FSelectionType write FSelectionType;
    property Title: WideString read FTitle write FTitle;
    property ListingType: ListingTypeCodeType read FListingType write FListingType;
    property PromotionDetails: PromotionDetailsType read FPromotionDetails write FPromotionDetails;
    property TimeLeft: TXSDuration read FTimeLeft write FTimeLeft;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossPromotionsType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FPrimaryScheme: PromotionSchemeCodeType;
    FPromotionMethod: PromotionMethodCodeType;
    FSellerID: WideString;
    FShippingDiscount: Boolean;
    FStoreName: WideString;
    FPromotedItem: PromotedItemType;
  public
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property PrimaryScheme: PromotionSchemeCodeType read FPrimaryScheme write FPrimaryScheme;
    property PromotionMethod: PromotionMethodCodeType read FPromotionMethod write FPromotionMethod;
    property SellerID: WideString read FSellerID write FSellerID;
    property ShippingDiscount: Boolean read FShippingDiscount write FShippingDiscount;
    property StoreName: WideString read FStoreName write FStoreName;
    property PromotedItem: PromotedItemType read FPromotedItem write FPromotedItem;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressDetailsType = class(TRemotable)
  private
    FExpressLargeImage: WideString;
    FExpressSmallImage: WideString;
    FCondition: WideString;
  published
    property ExpressLargeImage: WideString read FExpressLargeImage write FExpressLargeImage;
    property ExpressSmallImage: WideString read FExpressSmallImage write FExpressSmallImage;
    property Condition: WideString read FCondition write FCondition;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DigitalDeliveryDetailsType = class(TRemotable)
  private
    FRequirements: WideString;
    FMethod: DigitalDeliveryMethodCodeType;
    FURL: WideString;
    FInstructions: WideString;
  published
    property Requirements: WideString read FRequirements write FRequirements;
    property Method: DigitalDeliveryMethodCodeType read FMethod write FMethod;
    property URL: WideString read FURL write FURL;
    property Instructions: WideString read FInstructions write FInstructions;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureDetailsType = class(TRemotable)
  private
    FGalleryType: GalleryTypeCodeType;
    FGalleryURL: WideString;
    FPhotoDisplay: PhotoDisplayCodeType;
    FPictureURL: WideString;
    FPictureSource: PictureSourceCodeType;
  published
    property GalleryType: GalleryTypeCodeType read FGalleryType write FGalleryType;
    property GalleryURL: WideString read FGalleryURL write FGalleryURL;
    property PhotoDisplay: PhotoDisplayCodeType read FPhotoDisplay write FPhotoDisplay;
    property PictureURL: WideString read FPictureURL write FPictureURL;
    property PictureSource: PictureSourceCodeType read FPictureSource write FPictureSource;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StorefrontType = class(TRemotable)
  private
    FStoreCategoryID: Int64;
    FStoreCategory2ID: Int64;
    FStoreURL: WideString;
    FStoreName: WideString;
  published
    property StoreCategoryID: Int64 read FStoreCategoryID write FStoreCategoryID;
    property StoreCategory2ID: Int64 read FStoreCategory2ID write FStoreCategory2ID;
    property StoreURL: WideString read FStoreURL write FStoreURL;
    property StoreName: WideString read FStoreName write FStoreName;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductListingDetailsType = class(TRemotable)
  private
    FProductID: WideString;
    FIncludeStockPhotoURL: Boolean;
    FIncludePrefilledItemInformation: Boolean;
    FUseStockPhotoURLAsGallery: Boolean;
    FStockPhotoURL: WideString;
    FCopyright: WideString;
  published
    property ProductID: WideString read FProductID write FProductID;
    property IncludeStockPhotoURL: Boolean read FIncludeStockPhotoURL write FIncludeStockPhotoURL;
    property IncludePrefilledItemInformation: Boolean read FIncludePrefilledItemInformation write FIncludePrefilledItemInformation;
    property UseStockPhotoURLAsGallery: Boolean read FUseStockPhotoURLAsGallery write FUseStockPhotoURLAsGallery;
    property StockPhotoURL: WideString read FStockPhotoURL write FStockPhotoURL;
    property Copyright: WideString read FCopyright write FCopyright;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressItemRequirementsType = class(TRemotable)
  private
    FSellerExpressEligible: Boolean;
    FExpressOptOut: Boolean;
    FExpressApproved: Boolean;
    FExpressEligibleListingType: Boolean;
    FExpressEnabledCategory: Boolean;
    FEligiblePayPalAccount: Boolean;
    FDomesticShippingCost: Boolean;
    FEligibleReturnPolicy: Boolean;
    FPicture: Boolean;
    FEligibleItemCondition: Boolean;
    FPriceAboveMinimum: Boolean;
    FPriceBelowMaximum: Boolean;
    FEligibleCheckout: Boolean;
    FNoPreapprovedBidderList: Boolean;
    FNoCharity: Boolean;
    FNoDigitalDelivery: Boolean;
    FCombinedShippingDiscount: Boolean;
    FShipFromEligibleCountry: Boolean;
    FPayPalAccountAcceptsUnconfirmedAddress: Boolean;
  published
    property SellerExpressEligible: Boolean read FSellerExpressEligible write FSellerExpressEligible;
    property ExpressOptOut: Boolean read FExpressOptOut write FExpressOptOut;
    property ExpressApproved: Boolean read FExpressApproved write FExpressApproved;
    property ExpressEligibleListingType: Boolean read FExpressEligibleListingType write FExpressEligibleListingType;
    property ExpressEnabledCategory: Boolean read FExpressEnabledCategory write FExpressEnabledCategory;
    property EligiblePayPalAccount: Boolean read FEligiblePayPalAccount write FEligiblePayPalAccount;
    property DomesticShippingCost: Boolean read FDomesticShippingCost write FDomesticShippingCost;
    property EligibleReturnPolicy: Boolean read FEligibleReturnPolicy write FEligibleReturnPolicy;
    property Picture: Boolean read FPicture write FPicture;
    property EligibleItemCondition: Boolean read FEligibleItemCondition write FEligibleItemCondition;
    property PriceAboveMinimum: Boolean read FPriceAboveMinimum write FPriceAboveMinimum;
    property PriceBelowMaximum: Boolean read FPriceBelowMaximum write FPriceBelowMaximum;
    property EligibleCheckout: Boolean read FEligibleCheckout write FEligibleCheckout;
    property NoPreapprovedBidderList: Boolean read FNoPreapprovedBidderList write FNoPreapprovedBidderList;
    property NoCharity: Boolean read FNoCharity write FNoCharity;
    property NoDigitalDelivery: Boolean read FNoDigitalDelivery write FNoDigitalDelivery;
    property CombinedShippingDiscount: Boolean read FCombinedShippingDiscount write FCombinedShippingDiscount;
    property ShipFromEligibleCountry: Boolean read FShipFromEligibleCountry write FShipFromEligibleCountry;
    property PayPalAccountAcceptsUnconfirmedAddress: Boolean read FPayPalAccountAcceptsUnconfirmedAddress write FPayPalAccountAcceptsUnconfirmedAddress;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDetailsType = class(TRemotable)
  private
    FAdult: Boolean;
    FBindingAuction: Boolean;
    FCheckoutEnabled: Boolean;
    FConvertedBuyItNowPrice: AmountType;
    FConvertedStartPrice: AmountType;
    FConvertedReservePrice: AmountType;
    FHasReservePrice: Boolean;
    FRelistedItemID: ItemIDType;
    FSecondChanceOriginalItemID: ItemIDType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
    FViewItemURL: WideString;
    FHasUnansweredQuestions: Boolean;
    FHasPublicMessages: Boolean;
    FBuyItNowAvailable: Boolean;
    FSellerBusinessType: SellerBusinessCodeType;
    FMinimumBestOfferPrice: AmountType;
    FMinimumBestOfferMessage: WideString;
    FLocalListingDistance: WideString;
    FExpressListing: Boolean;
    FExpressItemRequirements: ExpressItemRequirementsType;
    FTCROriginalItemID: ItemIDType;
    FViewItemURLForNaturalSearch: WideString;
    FPayPerLeadEnabled: Boolean;
    FBestOfferAutoAcceptPrice: AmountType;
  public
    destructor Destroy; override;
  published
    property Adult: Boolean read FAdult write FAdult;
    property BindingAuction: Boolean read FBindingAuction write FBindingAuction;
    property CheckoutEnabled: Boolean read FCheckoutEnabled write FCheckoutEnabled;
    property ConvertedBuyItNowPrice: AmountType read FConvertedBuyItNowPrice write FConvertedBuyItNowPrice;
    property ConvertedStartPrice: AmountType read FConvertedStartPrice write FConvertedStartPrice;
    property ConvertedReservePrice: AmountType read FConvertedReservePrice write FConvertedReservePrice;
    property HasReservePrice: Boolean read FHasReservePrice write FHasReservePrice;
    property RelistedItemID: ItemIDType read FRelistedItemID write FRelistedItemID;
    property SecondChanceOriginalItemID: ItemIDType read FSecondChanceOriginalItemID write FSecondChanceOriginalItemID;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
    property ViewItemURL: WideString read FViewItemURL write FViewItemURL;
    property HasUnansweredQuestions: Boolean read FHasUnansweredQuestions write FHasUnansweredQuestions;
    property HasPublicMessages: Boolean read FHasPublicMessages write FHasPublicMessages;
    property BuyItNowAvailable: Boolean read FBuyItNowAvailable write FBuyItNowAvailable;
    property SellerBusinessType: SellerBusinessCodeType read FSellerBusinessType write FSellerBusinessType;
    property MinimumBestOfferPrice: AmountType read FMinimumBestOfferPrice write FMinimumBestOfferPrice;
    property MinimumBestOfferMessage: WideString read FMinimumBestOfferMessage write FMinimumBestOfferMessage;
    property LocalListingDistance: WideString read FLocalListingDistance write FLocalListingDistance;
    property ExpressListing: Boolean read FExpressListing write FExpressListing;
    property ExpressItemRequirements: ExpressItemRequirementsType read FExpressItemRequirements write FExpressItemRequirements;
    property TCROriginalItemID: ItemIDType read FTCROriginalItemID write FTCROriginalItemID;
    property ViewItemURLForNaturalSearch: WideString read FViewItemURLForNaturalSearch write FViewItemURLForNaturalSearch;
    property PayPerLeadEnabled: Boolean read FPayPerLeadEnabled write FPayPerLeadEnabled;
    property BestOfferAutoAcceptPrice: AmountType read FBestOfferAutoAcceptPrice write FBestOfferAutoAcceptPrice;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExtendedProductFinderIDType = class(TRemotable)
  private
    FProductFinderID: Integer;
    FProductFinderBuySide: Boolean;
  published
    property ProductFinderID: Integer read FProductFinderID write FProductFinderID;
    property ProductFinderBuySide: Boolean read FProductFinderBuySide write FProductFinderBuySide;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LabelType = class(TRemotable)
  private
    FName_: WideString;
    Fvisible: Boolean;
  published
    property Name_: WideString read FName_ write FName_;
    property visible: Boolean read Fvisible write Fvisible stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharacteristicType = class(TRemotable)
  private
    FAttributeID: Integer;
    FDateFormat: WideString;
    FDisplaySequence: WideString;
    FDisplayUOM: WideString;
    FLabel_: LabelType;
    FSortOrder: SortOrderCodeType;
    FValueList: ValType;
  public
    destructor Destroy; override;
  published
    property AttributeID: Integer read FAttributeID write FAttributeID;
    property DateFormat: WideString read FDateFormat write FDateFormat;
    property DisplaySequence: WideString read FDisplaySequence write FDisplaySequence;
    property DisplayUOM: WideString read FDisplayUOM write FDisplayUOM;
    property Label_: LabelType read FLabel_ write FLabel_;
    property SortOrder: SortOrderCodeType read FSortOrder write FSortOrder;
    property ValueList: ValType read FValueList write FValueList;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharacteristicsSetType = class(TRemotable)
  private
    FName_: WideString;
    FAttributeSetID: Integer;
    FAttributeSetVersion: WideString;
    FCharacteristics: CharacteristicType;
  public
    destructor Destroy; override;
  published
    property Name_: WideString read FName_ write FName_;
    property AttributeSetID: Integer read FAttributeSetID write FAttributeSetID;
    property AttributeSetVersion: WideString read FAttributeSetVersion write FAttributeSetVersion;
    property Characteristics: CharacteristicType read FCharacteristics write FCharacteristics;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryType = class(TRemotable)
  private
    FBestOfferEnabled: Boolean;
    FAutoPayEnabled: Boolean;
    FB2BVATEnabled: Boolean;
    FCatalogEnabled: Boolean;
    FCategoryID: WideString;
    FCategoryLevel: Integer;
    FCategoryName: WideString;
    FCategoryParentID: WideString;
    FCategoryParentName: WideString;
    FProductSearchPageAvailable: Boolean;
    FProductFinderIDs: ExtendedProductFinderIDType;
    FCharacteristicsSets: CharacteristicsSetType;
    FExpired: Boolean;
    FIntlAutosFixedCat: Boolean;
    FLeafCategory: Boolean;
    FVirtual_: Boolean;
    FNumOfItems: Integer;
    FSellerGuaranteeEligible: Boolean;
    FORPA: Boolean;
    FORRA: Boolean;
    FLSD: Boolean;
    FKeywords: WideString;
  public
    destructor Destroy; override;
  published
    property BestOfferEnabled: Boolean read FBestOfferEnabled write FBestOfferEnabled;
    property AutoPayEnabled: Boolean read FAutoPayEnabled write FAutoPayEnabled;
    property B2BVATEnabled: Boolean read FB2BVATEnabled write FB2BVATEnabled;
    property CatalogEnabled: Boolean read FCatalogEnabled write FCatalogEnabled;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property CategoryLevel: Integer read FCategoryLevel write FCategoryLevel;
    property CategoryName: WideString read FCategoryName write FCategoryName;
    property CategoryParentID: WideString read FCategoryParentID write FCategoryParentID;
    property CategoryParentName: WideString read FCategoryParentName write FCategoryParentName;
    property ProductSearchPageAvailable: Boolean read FProductSearchPageAvailable write FProductSearchPageAvailable;
    property ProductFinderIDs: ExtendedProductFinderIDType read FProductFinderIDs write FProductFinderIDs;
    property CharacteristicsSets: CharacteristicsSetType read FCharacteristicsSets write FCharacteristicsSets;
    property Expired: Boolean read FExpired write FExpired;
    property IntlAutosFixedCat: Boolean read FIntlAutosFixedCat write FIntlAutosFixedCat;
    property LeafCategory: Boolean read FLeafCategory write FLeafCategory;
    property Virtual_: Boolean read FVirtual_ write FVirtual_;
    property NumOfItems: Integer read FNumOfItems write FNumOfItems;
    property SellerGuaranteeEligible: Boolean read FSellerGuaranteeEligible write FSellerGuaranteeEligible;
    property ORPA: Boolean read FORPA write FORPA;
    property ORRA: Boolean read FORRA write FORRA;
    property LSD: Boolean read FLSD write FLSD;
    property Keywords: WideString read FKeywords write FKeywords;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerType = class(TRemotable)
  private
    FShippingAddress: AddressType;
  public
    destructor Destroy; override;
  published
    property ShippingAddress: AddressType read FShippingAddress write FShippingAddress;
  end;

  CharityAffiliationsType = array of CharityIDType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SchedulingInfoType = class(TRemotable)
  private
    FMaxScheduledMinutes: Integer;
    FMinScheduledMinutes: Integer;
    FMaxScheduledItems: Integer;
  published
    property MaxScheduledMinutes: Integer read FMaxScheduledMinutes write FMaxScheduledMinutes;
    property MinScheduledMinutes: Integer read FMinScheduledMinutes write FMinScheduledMinutes;
    property MaxScheduledItems: Integer read FMaxScheduledItems write FMaxScheduledItems;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProStoresDetailsType = class(TRemotable)
  private
    FSellerThirdPartyUsername: WideString;
    FStoreName: WideString;
    FStatus: EnableCodeType;
  published
    property SellerThirdPartyUsername: WideString read FSellerThirdPartyUsername write FSellerThirdPartyUsername;
    property StoreName: WideString read FStoreName write FStoreName;
    property Status: EnableCodeType read FStatus write FStatus;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProStoresCheckoutPreferenceType = class(TRemotable)
  private
    FCheckoutRedirectProStores: Boolean;
    FProStoresDetails: ProStoresDetailsType;
  public
    destructor Destroy; override;
  published
    property CheckoutRedirectProStores: Boolean read FCheckoutRedirectProStores write FCheckoutRedirectProStores;
    property ProStoresDetails: ProStoresDetailsType read FProStoresDetails write FProStoresDetails;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackRequirementsType = class(TRemotable)
  private
    Fminimum: WideString;
  published
    property minimum: WideString read Fminimum write Fminimum stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressSellerRequirementsType = class(TRemotable)
  private
    FExpressSellingPreference: Boolean;
    FExpressApproved: Boolean;
    FGoodStanding: Boolean;
    FFeedbackScore: FeedbackRequirementsType;
    FPositiveFeedbackPercent: FeedbackRequirementsType;
    FFeedbackAsSellerScore: FeedbackRequirementsType;
    FPositiveFeedbackAsSellerPercent: FeedbackRequirementsType;
    FBusinessSeller: Boolean;
    FEligiblePayPalAccount: Boolean;
    FPayPalAccountAcceptsUnconfirmedAddress: Boolean;
    FCombinedPaymentsAccepted: Boolean;
    FFeedbackPublic: Boolean;
  public
    destructor Destroy; override;
  published
    property ExpressSellingPreference: Boolean read FExpressSellingPreference write FExpressSellingPreference;
    property ExpressApproved: Boolean read FExpressApproved write FExpressApproved;
    property GoodStanding: Boolean read FGoodStanding write FGoodStanding;
    property FeedbackScore: FeedbackRequirementsType read FFeedbackScore write FFeedbackScore;
    property PositiveFeedbackPercent: FeedbackRequirementsType read FPositiveFeedbackPercent write FPositiveFeedbackPercent;
    property FeedbackAsSellerScore: FeedbackRequirementsType read FFeedbackAsSellerScore write FFeedbackAsSellerScore;
    property PositiveFeedbackAsSellerPercent: FeedbackRequirementsType read FPositiveFeedbackAsSellerPercent write FPositiveFeedbackAsSellerPercent;
    property BusinessSeller: Boolean read FBusinessSeller write FBusinessSeller;
    property EligiblePayPalAccount: Boolean read FEligiblePayPalAccount write FEligiblePayPalAccount;
    property PayPalAccountAcceptsUnconfirmedAddress: Boolean read FPayPalAccountAcceptsUnconfirmedAddress write FPayPalAccountAcceptsUnconfirmedAddress;
    property CombinedPaymentsAccepted: Boolean read FCombinedPaymentsAccepted write FCombinedPaymentsAccepted;
    property FeedbackPublic: Boolean read FFeedbackPublic write FFeedbackPublic;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerType = class(TRemotable)
  private
    FPaisaPayStatus: Integer;
    FAllowPaymentEdit: Boolean;
    FBillingCurrency: CurrencyCodeType;
    FCheckoutEnabled: Boolean;
    FCIPBankAccountStored: Boolean;
    FGoodStanding: Boolean;
    FLiveAuctionAuthorized: Boolean;
    FMerchandizingPref: MerchandizingPrefCodeType;
    FQualifiesForB2BVAT: Boolean;
    FSellerGuaranteeLevel: SellerGuaranteeLevelCodeType;
    FSellerLevel: SellerLevelCodeType;
    FSellerPaymentAddress: AddressType;
    FSchedulingInfo: SchedulingInfoType;
    FStoreOwner: Boolean;
    FStoreURL: WideString;
    FSellerBusinessType: SellerBusinessCodeType;
    FRegisteredBusinessSeller: Boolean;
    FExpressEligible: Boolean;
    FPaymentMethod: SellerPaymentMethodCodeType;
    FProStoresPreference: ProStoresCheckoutPreferenceType;
    FExpressWallet: Boolean;
    FExpressSellerRequirements: ExpressSellerRequirementsType;
    FCharityRegistered: Boolean;
    FSafePaymentExempt: Boolean;
    FPaisaPayEscrowEMIStatus: Integer;
  public
    destructor Destroy; override;
  published
    property PaisaPayStatus: Integer read FPaisaPayStatus write FPaisaPayStatus;
    property AllowPaymentEdit: Boolean read FAllowPaymentEdit write FAllowPaymentEdit;
    property BillingCurrency: CurrencyCodeType read FBillingCurrency write FBillingCurrency;
    property CheckoutEnabled: Boolean read FCheckoutEnabled write FCheckoutEnabled;
    property CIPBankAccountStored: Boolean read FCIPBankAccountStored write FCIPBankAccountStored;
    property GoodStanding: Boolean read FGoodStanding write FGoodStanding;
    property LiveAuctionAuthorized: Boolean read FLiveAuctionAuthorized write FLiveAuctionAuthorized;
    property MerchandizingPref: MerchandizingPrefCodeType read FMerchandizingPref write FMerchandizingPref;
    property QualifiesForB2BVAT: Boolean read FQualifiesForB2BVAT write FQualifiesForB2BVAT;
    property SellerGuaranteeLevel: SellerGuaranteeLevelCodeType read FSellerGuaranteeLevel write FSellerGuaranteeLevel;
    property SellerLevel: SellerLevelCodeType read FSellerLevel write FSellerLevel;
    property SellerPaymentAddress: AddressType read FSellerPaymentAddress write FSellerPaymentAddress;
    property SchedulingInfo: SchedulingInfoType read FSchedulingInfo write FSchedulingInfo;
    property StoreOwner: Boolean read FStoreOwner write FStoreOwner;
    property StoreURL: WideString read FStoreURL write FStoreURL;
    property SellerBusinessType: SellerBusinessCodeType read FSellerBusinessType write FSellerBusinessType;
    property RegisteredBusinessSeller: Boolean read FRegisteredBusinessSeller write FRegisteredBusinessSeller;
    property ExpressEligible: Boolean read FExpressEligible write FExpressEligible;
    property PaymentMethod: SellerPaymentMethodCodeType read FPaymentMethod write FPaymentMethod;
    property ProStoresPreference: ProStoresCheckoutPreferenceType read FProStoresPreference write FProStoresPreference;
    property ExpressWallet: Boolean read FExpressWallet write FExpressWallet;
    property ExpressSellerRequirements: ExpressSellerRequirementsType read FExpressSellerRequirements write FExpressSellerRequirements;
    property CharityRegistered: Boolean read FCharityRegistered write FCharityRegistered;
    property SafePaymentExempt: Boolean read FSafePaymentExempt write FSafePaymentExempt;
    property PaisaPayEscrowEMIStatus: Integer read FPaisaPayEscrowEMIStatus write FPaisaPayEscrowEMIStatus;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityIDType = class(TRemotable)
  private
    Ftype_: CharityAffiliationTypeCodeType;
  published
    property type_: CharityAffiliationTypeCodeType read Ftype_ write Ftype_ stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityAffiliationType = class(TRemotable)
  private
    Fid: WideString;
    Ftype_: CharityAffiliationTypeCodeType;
  published
    property id: WideString read Fid write Fid stored AS_ATTRIBUTE;
    property type_: CharityAffiliationTypeCodeType read Ftype_ write Ftype_ stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharitySellerType = class(TRemotable)
  private
    FCharitySellerStatus: CharitySellerStatusCodeType;
    FCharityAffiliation: CharityAffiliationType;
  public
    destructor Destroy; override;
  published
    property CharitySellerStatus: CharitySellerStatusCodeType read FCharitySellerStatus write FCharitySellerStatus;
    property CharityAffiliation: CharityAffiliationType read FCharityAffiliation write FCharityAffiliation;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemBidDetailsType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FCategoryID: WideString;
    FBidCount: Integer;
    FSellerID: UserIDType;
    FLastBidTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property BidCount: Integer read FBidCount write FBidCount;
    property SellerID: UserIDType read FSellerID write FSellerID;
    property LastBidTime: TXSDateTime read FLastBidTime write FLastBidTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BiddingSummaryType = class(TRemotable)
  private
    FSummaryDays: Integer;
    FTotalBids: Integer;
    FBidActivityWithSeller: Integer;
    FBidsToUniqueSellers: Integer;
    FBidsToUniqueCategories: Integer;
    FBidRetractions: Integer;
    FItemBidDetails: ItemBidDetailsType;
  public
    destructor Destroy; override;
  published
    property SummaryDays: Integer read FSummaryDays write FSummaryDays;
    property TotalBids: Integer read FTotalBids write FTotalBids;
    property BidActivityWithSeller: Integer read FBidActivityWithSeller write FBidActivityWithSeller;
    property BidsToUniqueSellers: Integer read FBidsToUniqueSellers write FBidsToUniqueSellers;
    property BidsToUniqueCategories: Integer read FBidsToUniqueCategories write FBidsToUniqueCategories;
    property BidRetractions: Integer read FBidRetractions write FBidRetractions;
    property ItemBidDetails: ItemBidDetailsType read FItemBidDetails write FItemBidDetails;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserType = class(TRemotable)
  private
    FAboutMePage: Boolean;
    FEIASToken: WideString;
    FRESTToken: WideString;
    FEmail: WideString;
    FFeedbackScore: Integer;
    FUniqueNegativeFeedbackCount: Integer;
    FUniquePositiveFeedbackCount: Integer;
    FPositiveFeedbackPercent: Single;
    FFeedbackPrivate: Boolean;
    FFeedbackRatingStar: FeedbackRatingStarCodeType;
    FIDVerified: Boolean;
    FeBayGoodStanding: Boolean;
    FNewUser: Boolean;
    FRegistrationAddress: AddressType;
    FRegistrationDate: TXSDateTime;
    FSite: SiteCodeType;
    FStatus: UserStatusCodeType;
    FUserID: UserIDType;
    FUserIDChanged: Boolean;
    FUserIDLastChanged: TXSDateTime;
    FVATStatus: VATStatusCodeType;
    FBuyerInfo: BuyerType;
    FSellerInfo: SellerType;
    FCharityAffiliations: CharityAffiliationsType;
    FCharitySeller: CharitySellerType;
    FPayPalAccountLevel: PayPalAccountLevelCodeType;
    FPayPalAccountType: PayPalAccountTypeCodeType;
    FPayPalAccountStatus: PayPalAccountStatusCodeType;
    FUserSubscription: EBaySubscriptionTypeCodeType;
    FSiteVerified: Boolean;
    FSkypeID: WideString;
    FeBayWikiReadOnly: Boolean;
    FTUVLevel: Integer;
    FVATID: WideString;
    FMotorsDealer: Boolean;
    FSellerPaymentMethod: SellerPaymentMethodCodeType;
    FBiddingSummary: BiddingSummaryType;
    FUserAnonymized: Boolean;
  public
    destructor Destroy; override;
  published
    property AboutMePage: Boolean read FAboutMePage write FAboutMePage;
    property EIASToken: WideString read FEIASToken write FEIASToken;
    property RESTToken: WideString read FRESTToken write FRESTToken;
    property Email: WideString read FEmail write FEmail;
    property FeedbackScore: Integer read FFeedbackScore write FFeedbackScore;
    property UniqueNegativeFeedbackCount: Integer read FUniqueNegativeFeedbackCount write FUniqueNegativeFeedbackCount;
    property UniquePositiveFeedbackCount: Integer read FUniquePositiveFeedbackCount write FUniquePositiveFeedbackCount;
    property PositiveFeedbackPercent: Single read FPositiveFeedbackPercent write FPositiveFeedbackPercent;
    property FeedbackPrivate: Boolean read FFeedbackPrivate write FFeedbackPrivate;
    property FeedbackRatingStar: FeedbackRatingStarCodeType read FFeedbackRatingStar write FFeedbackRatingStar;
    property IDVerified: Boolean read FIDVerified write FIDVerified;
    property eBayGoodStanding: Boolean read FeBayGoodStanding write FeBayGoodStanding;
    property NewUser: Boolean read FNewUser write FNewUser;
    property RegistrationAddress: AddressType read FRegistrationAddress write FRegistrationAddress;
    property RegistrationDate: TXSDateTime read FRegistrationDate write FRegistrationDate;
    property Site: SiteCodeType read FSite write FSite;
    property Status: UserStatusCodeType read FStatus write FStatus;
    property UserID: UserIDType read FUserID write FUserID;
    property UserIDChanged: Boolean read FUserIDChanged write FUserIDChanged;
    property UserIDLastChanged: TXSDateTime read FUserIDLastChanged write FUserIDLastChanged;
    property VATStatus: VATStatusCodeType read FVATStatus write FVATStatus;
    property BuyerInfo: BuyerType read FBuyerInfo write FBuyerInfo;
    property SellerInfo: SellerType read FSellerInfo write FSellerInfo;
    property CharityAffiliations: CharityAffiliationsType read FCharityAffiliations write FCharityAffiliations;
    property CharitySeller: CharitySellerType read FCharitySeller write FCharitySeller;
    property PayPalAccountLevel: PayPalAccountLevelCodeType read FPayPalAccountLevel write FPayPalAccountLevel;
    property PayPalAccountType: PayPalAccountTypeCodeType read FPayPalAccountType write FPayPalAccountType;
    property PayPalAccountStatus: PayPalAccountStatusCodeType read FPayPalAccountStatus write FPayPalAccountStatus;
    property UserSubscription: EBaySubscriptionTypeCodeType read FUserSubscription write FUserSubscription;
    property SiteVerified: Boolean read FSiteVerified write FSiteVerified;
    property SkypeID: WideString read FSkypeID write FSkypeID;
    property eBayWikiReadOnly: Boolean read FeBayWikiReadOnly write FeBayWikiReadOnly;
    property TUVLevel: Integer read FTUVLevel write FTUVLevel;
    property VATID: WideString read FVATID write FVATID;
    property MotorsDealer: Boolean read FMotorsDealer write FMotorsDealer;
    property SellerPaymentMethod: SellerPaymentMethodCodeType read FSellerPaymentMethod write FSellerPaymentMethod;
    property BiddingSummary: BiddingSummaryType read FBiddingSummary write FBiddingSummary;
    property UserAnonymized: Boolean read FUserAnonymized write FUserAnonymized;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionalSaleDetailsType = class(TRemotable)
  private
    FOriginalPrice: AmountType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property OriginalPrice: AmountType read FOriginalPrice write FOriginalPrice;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingStatusType = class(TRemotable)
  private
    FBidCount: Integer;
    FBidIncrement: AmountType;
    FConvertedCurrentPrice: AmountType;
    FCurrentPrice: AmountType;
    FHighBidder: UserType;
    FLeadCount: Integer;
    FMinimumToBid: AmountType;
    FQuantitySold: Integer;
    FReserveMet: Boolean;
    FSecondChanceEligible: Boolean;
    FBidderCount: Int64;
    FListingStatus: ListingStatusCodeType;
    FFinalValueFee: AmountType;
    FPromotionalSaleDetails: PromotionalSaleDetailsType;
  public
    destructor Destroy; override;
  published
    property BidCount: Integer read FBidCount write FBidCount;
    property BidIncrement: AmountType read FBidIncrement write FBidIncrement;
    property ConvertedCurrentPrice: AmountType read FConvertedCurrentPrice write FConvertedCurrentPrice;
    property CurrentPrice: AmountType read FCurrentPrice write FCurrentPrice;
    property HighBidder: UserType read FHighBidder write FHighBidder;
    property LeadCount: Integer read FLeadCount write FLeadCount;
    property MinimumToBid: AmountType read FMinimumToBid write FMinimumToBid;
    property QuantitySold: Integer read FQuantitySold write FQuantitySold;
    property ReserveMet: Boolean read FReserveMet write FReserveMet;
    property SecondChanceEligible: Boolean read FSecondChanceEligible write FSecondChanceEligible;
    property BidderCount: Int64 read FBidderCount write FBidderCount;
    property ListingStatus: ListingStatusCodeType read FListingStatus write FListingStatus;
    property FinalValueFee: AmountType read FFinalValueFee write FFinalValueFee;
    property PromotionalSaleDetails: PromotionalSaleDetailsType read FPromotionalSaleDetails write FPromotionalSaleDetails;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SalesTaxType = class(TRemotable)
  private
    FSalesTaxPercent: Single;
    FSalesTaxState: WideString;
    FShippingIncludedInTax: Boolean;
    FSalesTaxAmount: AmountType;
  public
    destructor Destroy; override;
  published
    property SalesTaxPercent: Single read FSalesTaxPercent write FSalesTaxPercent;
    property SalesTaxState: WideString read FSalesTaxState write FSalesTaxState;
    property ShippingIncludedInTax: Boolean read FShippingIncludedInTax write FShippingIncludedInTax;
    property SalesTaxAmount: AmountType read FSalesTaxAmount write FSalesTaxAmount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingServiceOptionsType = class(TRemotable)
  private
    FShippingInsuranceCost: AmountType;
    FShippingService: WideString;
    FShippingServiceCost: AmountType;
    FShippingServiceAdditionalCost: AmountType;
    FShippingServicePriority: Integer;
    FExpeditedService: Boolean;
    FShippingTimeMin: Integer;
    FShippingTimeMax: Integer;
    FShippingSurcharge: AmountType;
  public
    destructor Destroy; override;
  published
    property ShippingInsuranceCost: AmountType read FShippingInsuranceCost write FShippingInsuranceCost;
    property ShippingService: WideString read FShippingService write FShippingService;
    property ShippingServiceCost: AmountType read FShippingServiceCost write FShippingServiceCost;
    property ShippingServiceAdditionalCost: AmountType read FShippingServiceAdditionalCost write FShippingServiceAdditionalCost;
    property ShippingServicePriority: Integer read FShippingServicePriority write FShippingServicePriority;
    property ExpeditedService: Boolean read FExpeditedService write FExpeditedService;
    property ShippingTimeMin: Integer read FShippingTimeMin write FShippingTimeMin;
    property ShippingTimeMax: Integer read FShippingTimeMax write FShippingTimeMax;
    property ShippingSurcharge: AmountType read FShippingSurcharge write FShippingSurcharge;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InternationalShippingServiceOptionsType = class(TRemotable)
  private
    FShippingService: WideString;
    FShippingServiceCost: AmountType;
    FShippingServiceAdditionalCost: AmountType;
    FShippingServicePriority: Integer;
    FShipToLocation: WideString;
    FShippingInsuranceCost: AmountType;
  public
    destructor Destroy; override;
  published
    property ShippingService: WideString read FShippingService write FShippingService;
    property ShippingServiceCost: AmountType read FShippingServiceCost write FShippingServiceCost;
    property ShippingServiceAdditionalCost: AmountType read FShippingServiceAdditionalCost write FShippingServiceAdditionalCost;
    property ShippingServicePriority: Integer read FShippingServicePriority write FShippingServicePriority;
    property ShipToLocation: WideString read FShipToLocation write FShipToLocation;
    property ShippingInsuranceCost: AmountType read FShippingInsuranceCost write FShippingInsuranceCost;
  end;

  TaxTableType = array of TaxJurisdictionType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  InsuranceDetailsType = class(TRemotable)
  private
    FInsuranceFee: AmountType;
    FInsuranceOption: InsuranceOptionCodeType;
  public
    destructor Destroy; override;
  published
    property InsuranceFee: AmountType read FInsuranceFee write FInsuranceFee;
    property InsuranceOption: InsuranceOptionCodeType read FInsuranceOption write FInsuranceOption;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionalShippingDiscountDetailsType = class(TRemotable)
  private
    FDiscountName: DiscountNameCodeType;
    FShippingCost: AmountType;
    FOrderAmount: AmountType;
    FItemCount: Integer;
  public
    destructor Destroy; override;
  published
    property DiscountName: DiscountNameCodeType read FDiscountName write FDiscountName;
    property ShippingCost: AmountType read FShippingCost write FShippingCost;
    property OrderAmount: AmountType read FOrderAmount write FOrderAmount;
    property ItemCount: Integer read FItemCount write FItemCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MeasureType = class(TRemotable)
  private
    Funit_: WideString;
    FmeasurementSystem: MeasurementSystemCodeType;
  published
    property unit_: WideString read Funit_ write Funit_ stored AS_ATTRIBUTE;
    property measurementSystem: MeasurementSystemCodeType read FmeasurementSystem write FmeasurementSystem stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedShippingRateType = class(TRemotable)
  private
    FOriginatingPostalCode: WideString;
    FMeasurementUnit: MeasurementSystemCodeType;
    FPackageDepth: MeasureType;
    FPackageLength: MeasureType;
    FPackageWidth: MeasureType;
    FPackagingHandlingCosts: AmountType;
    FShippingIrregular: Boolean;
    FShippingPackage: ShippingPackageCodeType;
    FWeightMajor: MeasureType;
    FWeightMinor: MeasureType;
    FInternationalPackagingHandlingCosts: AmountType;
  public
    destructor Destroy; override;
  published
    property OriginatingPostalCode: WideString read FOriginatingPostalCode write FOriginatingPostalCode;
    property MeasurementUnit: MeasurementSystemCodeType read FMeasurementUnit write FMeasurementUnit;
    property PackageDepth: MeasureType read FPackageDepth write FPackageDepth;
    property PackageLength: MeasureType read FPackageLength write FPackageLength;
    property PackageWidth: MeasureType read FPackageWidth write FPackageWidth;
    property PackagingHandlingCosts: AmountType read FPackagingHandlingCosts write FPackagingHandlingCosts;
    property ShippingIrregular: Boolean read FShippingIrregular write FShippingIrregular;
    property ShippingPackage: ShippingPackageCodeType read FShippingPackage write FShippingPackage;
    property WeightMajor: MeasureType read FWeightMajor write FWeightMajor;
    property WeightMinor: MeasureType read FWeightMinor write FWeightMinor;
    property InternationalPackagingHandlingCosts: AmountType read FInternationalPackagingHandlingCosts write FInternationalPackagingHandlingCosts;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TaxJurisdictionType = class(TRemotable)
  private
    FJurisdictionID: WideString;
    FSalesTaxPercent: Single;
    FShippingIncludedInTax: Boolean;
    FJurisdictionName: WideString;
  published
    property JurisdictionID: WideString read FJurisdictionID write FJurisdictionID;
    property SalesTaxPercent: Single read FSalesTaxPercent write FSalesTaxPercent;
    property ShippingIncludedInTax: Boolean read FShippingIncludedInTax write FShippingIncludedInTax;
    property JurisdictionName: WideString read FJurisdictionName write FJurisdictionName;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DiscountProfileType = class(TRemotable)
  private
    FDiscountProfileID: WideString;
    FDiscountProfileName: WideString;
    FEachAdditionalAmount: AmountType;
    FEachAdditionalAmountOff: AmountType;
    FEachAdditionalPercentOff: Single;
    FWeightOff: MeasureType;
    FMappedDiscountProfileID: WideString;
  public
    destructor Destroy; override;
  published
    property DiscountProfileID: WideString read FDiscountProfileID write FDiscountProfileID;
    property DiscountProfileName: WideString read FDiscountProfileName write FDiscountProfileName;
    property EachAdditionalAmount: AmountType read FEachAdditionalAmount write FEachAdditionalAmount;
    property EachAdditionalAmountOff: AmountType read FEachAdditionalAmountOff write FEachAdditionalAmountOff;
    property EachAdditionalPercentOff: Single read FEachAdditionalPercentOff write FEachAdditionalPercentOff;
    property WeightOff: MeasureType read FWeightOff write FWeightOff;
    property MappedDiscountProfileID: WideString read FMappedDiscountProfileID write FMappedDiscountProfileID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedShippingDiscountType = class(TRemotable)
  private
    FDiscountName: DiscountNameCodeType;
    FDiscountProfile: DiscountProfileType;
  public
    destructor Destroy; override;
  published
    property DiscountName: DiscountNameCodeType read FDiscountName write FDiscountName;
    property DiscountProfile: DiscountProfileType read FDiscountProfile write FDiscountProfile;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FlatShippingDiscountType = class(TRemotable)
  private
    FDiscountName: DiscountNameCodeType;
    FDiscountProfile: DiscountProfileType;
  public
    destructor Destroy; override;
  published
    property DiscountName: DiscountNameCodeType read FDiscountName write FDiscountName;
    property DiscountProfile: DiscountProfileType read FDiscountProfile write FDiscountProfile;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingDetailsType = class(TRemotable)
  private
    FAllowPaymentEdit: Boolean;
    FApplyShippingDiscount: Boolean;
    FCalculatedShippingRate: CalculatedShippingRateType;
    FChangePaymentInstructions: Boolean;
    FInsuranceFee: AmountType;
    FInsuranceOption: InsuranceOptionCodeType;
    FInsuranceWanted: Boolean;
    FPaymentEdited: Boolean;
    FPaymentInstructions: WideString;
    FSalesTax: SalesTaxType;
    FShippingRateErrorMessage: WideString;
    FShippingRateType: ShippingRateTypeCodeType;
    FShippingServiceOptions: ShippingServiceOptionsType;
    FInternationalShippingServiceOption: InternationalShippingServiceOptionsType;
    FShippingType: ShippingTypeCodeType;
    FSellingManagerSalesRecordNumber: Integer;
    FThirdPartyCheckout: Boolean;
    FTaxTable: TaxTableType;
    FGetItFast: Boolean;
    FShipmentTrackingNumber: WideString;
    FShippingServiceUsed: WideString;
    FDefaultShippingCost: AmountType;
    FInsuranceDetails: InsuranceDetailsType;
    FInternationalInsuranceDetails: InsuranceDetailsType;
    FShippingDiscountProfileID: WideString;
    FFlatShippingDiscount: FlatShippingDiscountType;
    FCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FPromotionalShippingDiscount: Boolean;
    FInternationalShippingDiscountProfileID: WideString;
    FInternationalFlatShippingDiscount: FlatShippingDiscountType;
    FInternationalCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FInternationalPromotionalShippingDiscount: Boolean;
    FPromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType;
  public
    destructor Destroy; override;
  published
    property AllowPaymentEdit: Boolean read FAllowPaymentEdit write FAllowPaymentEdit;
    property ApplyShippingDiscount: Boolean read FApplyShippingDiscount write FApplyShippingDiscount;
    property CalculatedShippingRate: CalculatedShippingRateType read FCalculatedShippingRate write FCalculatedShippingRate;
    property ChangePaymentInstructions: Boolean read FChangePaymentInstructions write FChangePaymentInstructions;
    property InsuranceFee: AmountType read FInsuranceFee write FInsuranceFee;
    property InsuranceOption: InsuranceOptionCodeType read FInsuranceOption write FInsuranceOption;
    property InsuranceWanted: Boolean read FInsuranceWanted write FInsuranceWanted;
    property PaymentEdited: Boolean read FPaymentEdited write FPaymentEdited;
    property PaymentInstructions: WideString read FPaymentInstructions write FPaymentInstructions;
    property SalesTax: SalesTaxType read FSalesTax write FSalesTax;
    property ShippingRateErrorMessage: WideString read FShippingRateErrorMessage write FShippingRateErrorMessage;
    property ShippingRateType: ShippingRateTypeCodeType read FShippingRateType write FShippingRateType;
    property ShippingServiceOptions: ShippingServiceOptionsType read FShippingServiceOptions write FShippingServiceOptions;
    property InternationalShippingServiceOption: InternationalShippingServiceOptionsType read FInternationalShippingServiceOption write FInternationalShippingServiceOption;
    property ShippingType: ShippingTypeCodeType read FShippingType write FShippingType;
    property SellingManagerSalesRecordNumber: Integer read FSellingManagerSalesRecordNumber write FSellingManagerSalesRecordNumber;
    property ThirdPartyCheckout: Boolean read FThirdPartyCheckout write FThirdPartyCheckout;
    property TaxTable: TaxTableType read FTaxTable write FTaxTable;
    property GetItFast: Boolean read FGetItFast write FGetItFast;
    property ShipmentTrackingNumber: WideString read FShipmentTrackingNumber write FShipmentTrackingNumber;
    property ShippingServiceUsed: WideString read FShippingServiceUsed write FShippingServiceUsed;
    property DefaultShippingCost: AmountType read FDefaultShippingCost write FDefaultShippingCost;
    property InsuranceDetails: InsuranceDetailsType read FInsuranceDetails write FInsuranceDetails;
    property InternationalInsuranceDetails: InsuranceDetailsType read FInternationalInsuranceDetails write FInternationalInsuranceDetails;
    property ShippingDiscountProfileID: WideString read FShippingDiscountProfileID write FShippingDiscountProfileID;
    property FlatShippingDiscount: FlatShippingDiscountType read FFlatShippingDiscount write FFlatShippingDiscount;
    property CalculatedShippingDiscount: CalculatedShippingDiscountType read FCalculatedShippingDiscount write FCalculatedShippingDiscount;
    property PromotionalShippingDiscount: Boolean read FPromotionalShippingDiscount write FPromotionalShippingDiscount;
    property InternationalShippingDiscountProfileID: WideString read FInternationalShippingDiscountProfileID write FInternationalShippingDiscountProfileID;
    property InternationalFlatShippingDiscount: FlatShippingDiscountType read FInternationalFlatShippingDiscount write FInternationalFlatShippingDiscount;
    property InternationalCalculatedShippingDiscount: CalculatedShippingDiscountType read FInternationalCalculatedShippingDiscount write FInternationalCalculatedShippingDiscount;
    property InternationalPromotionalShippingDiscount: Boolean read FInternationalPromotionalShippingDiscount write FInternationalPromotionalShippingDiscount;
    property PromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType read FPromotionalShippingDiscountDetails write FPromotionalShippingDiscountDetails;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MaximumItemRequirementsType = class(TRemotable)
  private
    FMaximumItemCount: Integer;
    FMinimumFeedbackScore: Integer;
  published
    property MaximumItemCount: Integer read FMaximumItemCount write FMaximumItemCount;
    property MinimumFeedbackScore: Integer read FMinimumFeedbackScore write FMinimumFeedbackScore;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VerifiedUserRequirementsType = class(TRemotable)
  private
    FVerifiedUser: Boolean;
    FMinimumFeedbackScore: Integer;
  published
    property VerifiedUser: Boolean read FVerifiedUser write FVerifiedUser;
    property MinimumFeedbackScore: Integer read FMinimumFeedbackScore write FMinimumFeedbackScore;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyerRequirementsType = class(TRemotable)
  private
    FShipToRegistrationCountry: Boolean;
    FZeroFeedbackScore: Boolean;
    FMinimumFeedbackScore: Integer;
    FMaximumUnpaidItemStrikes: Boolean;
    FMaximumItemRequirements: MaximumItemRequirementsType;
    FLinkedPayPalAccount: Boolean;
    FVerifiedUserRequirements: VerifiedUserRequirementsType;
  public
    destructor Destroy; override;
  published
    property ShipToRegistrationCountry: Boolean read FShipToRegistrationCountry write FShipToRegistrationCountry;
    property ZeroFeedbackScore: Boolean read FZeroFeedbackScore write FZeroFeedbackScore;
    property MinimumFeedbackScore: Integer read FMinimumFeedbackScore write FMinimumFeedbackScore;
    property MaximumUnpaidItemStrikes: Boolean read FMaximumUnpaidItemStrikes write FMaximumUnpaidItemStrikes;
    property MaximumItemRequirements: MaximumItemRequirementsType read FMaximumItemRequirements write FMaximumItemRequirements;
    property LinkedPayPalAccount: Boolean read FLinkedPayPalAccount write FLinkedPayPalAccount;
    property VerifiedUserRequirements: VerifiedUserRequirementsType read FVerifiedUserRequirements write FVerifiedUserRequirements;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ContactHoursDetailsType = class(TRemotable)
  private
    FTimeZoneID: WideString;
    FHours1Days: DaysCodeType;
    FHours1AnyTime: Boolean;
    FHours1From: TXSTime;
    FHours1To: TXSTime;
    FHours2Days: DaysCodeType;
    FHours2AnyTime: Boolean;
    FHours2From: TXSTime;
    FHours2To: TXSTime;
  public
    destructor Destroy; override;
  published
    property TimeZoneID: WideString read FTimeZoneID write FTimeZoneID;
    property Hours1Days: DaysCodeType read FHours1Days write FHours1Days;
    property Hours1AnyTime: Boolean read FHours1AnyTime write FHours1AnyTime;
    property Hours1From: TXSTime read FHours1From write FHours1From;
    property Hours1To: TXSTime read FHours1To write FHours1To;
    property Hours2Days: DaysCodeType read FHours2Days write FHours2Days;
    property Hours2AnyTime: Boolean read FHours2AnyTime write FHours2AnyTime;
    property Hours2From: TXSTime read FHours2From write FHours2From;
    property Hours2To: TXSTime read FHours2To write FHours2To;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExtendedContactDetailsType = class(TRemotable)
  private
    FContactHoursDetails: ContactHoursDetailsType;
    FClassifiedAdContactByEmailEnabled: Boolean;
    FPayPerLeadPhoneNumber: WideString;
  public
    destructor Destroy; override;
  published
    property ContactHoursDetails: ContactHoursDetailsType read FContactHoursDetails write FContactHoursDetails;
    property ClassifiedAdContactByEmailEnabled: Boolean read FClassifiedAdContactByEmailEnabled write FClassifiedAdContactByEmailEnabled;
    property PayPerLeadPhoneNumber: WideString read FPayPerLeadPhoneNumber write FPayPerLeadPhoneNumber;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemType = class(TRemotable)
  private
    FApplicationData: WideString;
    FAttributeSetArray: AttributeSetArrayType;
    FAttributeArray: AttributeArrayType;
    FLookupAttributeArray: LookupAttributeArrayType;
    FApplyShippingDiscount: Boolean;
    FAutoPay: Boolean;
    FPaymentDetails: PaymentDetailsType;
    FBiddingDetails: BiddingDetailsType;
    FMotorsGermanySearchable: Boolean;
    FBuyerProtection: BuyerProtectionCodeType;
    FBuyItNowPrice: AmountType;
    FCategoryMappingAllowed: Boolean;
    FCharity: CharityType;
    FCountry: CountryCodeType;
    FCrossPromotion: CrossPromotionsType;
    FCurrency: CurrencyCodeType;
    FDescription: WideString;
    FDescriptionReviseMode: DescriptionReviseModeCodeType;
    FDistance: DistanceType;
    FGiftIcon: Integer;
    FGiftServices: GiftServicesCodeType;
    FHitCounter: HitCounterCodeType;
    FItemID: ItemIDType;
    FListingDetails: ListingDetailsType;
    FListingDesigner: ListingDesignerType;
    FListingDuration: WideString;
    FListingEnhancement: ListingEnhancementsCodeType;
    FListingType: ListingTypeCodeType;
    FLocation: WideString;
    FLotSize: Integer;
    FNowAndNew: Boolean;
    FPartnerCode: WideString;
    FPartnerName: WideString;
    FPaymentMethods: BuyerPaymentMethodCodeType;
    FPayPalEmailAddress: WideString;
    FPrimaryCategory: CategoryType;
    FPrivateListing: Boolean;
    FProductListingDetails: ProductListingDetailsType;
    FQuantity: Integer;
    FPrivateNotes: WideString;
    FRegionID: WideString;
    FRelistLink: Boolean;
    FReservePrice: AmountType;
    FReviseStatus: ReviseStatusType;
    FScheduleTime: TXSDateTime;
    FSecondaryCategory: CategoryType;
    FFreeAddedCategory: CategoryType;
    FSeller: UserType;
    FSellingStatus: SellingStatusType;
    FShippingDetails: ShippingDetailsType;
    FShipToLocations: WideString;
    FSite: SiteCodeType;
    FStartPrice: AmountType;
    FStorefront: StorefrontType;
    FSubTitle: WideString;
    FTimeLeft: TXSDuration;
    FTitle: WideString;
    FUUID: UUIDType;
    FVATDetails: VATDetailsType;
    FSellerVacationNote: WideString;
    FWatchCount: Int64;
    FHitCount: Int64;
    FDisableBuyerRequirements: Boolean;
    FBuyerRequirements: BuyerRequirementsType;
    FBestOfferDetails: BestOfferDetailsType;
    FLiveAuctionDetails: LiveAuctionDetailsType;
    FLocationDefaulted: Boolean;
    FThirdPartyCheckout: Boolean;
    FUseTaxTable: Boolean;
    FGetItFast: Boolean;
    FBuyerResponsibleForShipping: Boolean;
    FLimitedWarrantyEligible: Boolean;
    FeBayNotes: WideString;
    FQuestionCount: Int64;
    FRelisted: Boolean;
    FQuantityAvailable: Integer;
    FSKU: SKUType;
    FCategoryBasedAttributesPrefill: Boolean;
    FSearchDetails: SearchDetailsType;
    FPostalCode: WideString;
    FShippingTermsInDescription: Boolean;
    FExternalProductID: ExternalProductIDType;
    FSellerInventoryID: WideString;
    FPictureDetails: PictureDetailsType;
    FDigitalDeliveryDetails: DigitalDeliveryDetailsType;
    FDispatchTimeMax: Integer;
    FSkypeEnabled: Boolean;
    FSkypeID: WideString;
    FSkypeContactOption: SkypeContactOptionCodeType;
    FBestOfferEnabled: Boolean;
    FLocalListing: Boolean;
    FThirdPartyCheckoutIntegration: Boolean;
    FExpressOptOut: Boolean;
    FListingCheckoutRedirectPreference: ListingCheckoutRedirectPreferenceType;
    FExpressDetails: ExpressDetailsType;
    FSellerContactDetails: AddressType;
    FTotalQuestionCount: Int64;
    FProxyItem: Boolean;
    FExtendedSellerContactDetails: ExtendedContactDetailsType;
    FLeadCount: Integer;
    FNewLeadCount: Integer;
    FItemSpecifics: NameValueListArrayType;
    FGroupCategoryID: WideString;
    FClassifiedAdPayPerLeadFee: AmountType;
    FBidGroupItem: Boolean;
    FApplyBuyerProtection: BuyerProtectionDetailsType;
    FListingSubtype2: ListingSubtypeCodeType;
    FMechanicalCheckAccepted: Boolean;
  public
    destructor Destroy; override;
  published
    property ApplicationData: WideString read FApplicationData write FApplicationData;
    property AttributeSetArray: AttributeSetArrayType read FAttributeSetArray write FAttributeSetArray;
    property AttributeArray: AttributeArrayType read FAttributeArray write FAttributeArray;
    property LookupAttributeArray: LookupAttributeArrayType read FLookupAttributeArray write FLookupAttributeArray;
    property ApplyShippingDiscount: Boolean read FApplyShippingDiscount write FApplyShippingDiscount;
    property AutoPay: Boolean read FAutoPay write FAutoPay;
    property PaymentDetails: PaymentDetailsType read FPaymentDetails write FPaymentDetails;
    property BiddingDetails: BiddingDetailsType read FBiddingDetails write FBiddingDetails;
    property MotorsGermanySearchable: Boolean read FMotorsGermanySearchable write FMotorsGermanySearchable;
    property BuyerProtection: BuyerProtectionCodeType read FBuyerProtection write FBuyerProtection;
    property BuyItNowPrice: AmountType read FBuyItNowPrice write FBuyItNowPrice;
    property CategoryMappingAllowed: Boolean read FCategoryMappingAllowed write FCategoryMappingAllowed;
    property Charity: CharityType read FCharity write FCharity;
    property Country: CountryCodeType read FCountry write FCountry;
    property CrossPromotion: CrossPromotionsType read FCrossPromotion write FCrossPromotion;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
    property Description: WideString read FDescription write FDescription;
    property DescriptionReviseMode: DescriptionReviseModeCodeType read FDescriptionReviseMode write FDescriptionReviseMode;
    property Distance: DistanceType read FDistance write FDistance;
    property GiftIcon: Integer read FGiftIcon write FGiftIcon;
    property GiftServices: GiftServicesCodeType read FGiftServices write FGiftServices;
    property HitCounter: HitCounterCodeType read FHitCounter write FHitCounter;
    property ItemID: ItemIDType read FItemID write FItemID;
    property ListingDetails: ListingDetailsType read FListingDetails write FListingDetails;
    property ListingDesigner: ListingDesignerType read FListingDesigner write FListingDesigner;
    property ListingDuration: WideString read FListingDuration write FListingDuration;
    property ListingEnhancement: ListingEnhancementsCodeType read FListingEnhancement write FListingEnhancement;
    property ListingType: ListingTypeCodeType read FListingType write FListingType;
    property Location: WideString read FLocation write FLocation;
    property LotSize: Integer read FLotSize write FLotSize;
    property NowAndNew: Boolean read FNowAndNew write FNowAndNew;
    property PartnerCode: WideString read FPartnerCode write FPartnerCode;
    property PartnerName: WideString read FPartnerName write FPartnerName;
    property PaymentMethods: BuyerPaymentMethodCodeType read FPaymentMethods write FPaymentMethods;
    property PayPalEmailAddress: WideString read FPayPalEmailAddress write FPayPalEmailAddress;
    property PrimaryCategory: CategoryType read FPrimaryCategory write FPrimaryCategory;
    property PrivateListing: Boolean read FPrivateListing write FPrivateListing;
    property ProductListingDetails: ProductListingDetailsType read FProductListingDetails write FProductListingDetails;
    property Quantity: Integer read FQuantity write FQuantity;
    property PrivateNotes: WideString read FPrivateNotes write FPrivateNotes;
    property RegionID: WideString read FRegionID write FRegionID;
    property RelistLink: Boolean read FRelistLink write FRelistLink;
    property ReservePrice: AmountType read FReservePrice write FReservePrice;
    property ReviseStatus: ReviseStatusType read FReviseStatus write FReviseStatus;
    property ScheduleTime: TXSDateTime read FScheduleTime write FScheduleTime;
    property SecondaryCategory: CategoryType read FSecondaryCategory write FSecondaryCategory;
    property FreeAddedCategory: CategoryType read FFreeAddedCategory write FFreeAddedCategory;
    property Seller: UserType read FSeller write FSeller;
    property SellingStatus: SellingStatusType read FSellingStatus write FSellingStatus;
    property ShippingDetails: ShippingDetailsType read FShippingDetails write FShippingDetails;
    property ShipToLocations: WideString read FShipToLocations write FShipToLocations;
    property Site: SiteCodeType read FSite write FSite;
    property StartPrice: AmountType read FStartPrice write FStartPrice;
    property Storefront: StorefrontType read FStorefront write FStorefront;
    property SubTitle: WideString read FSubTitle write FSubTitle;
    property TimeLeft: TXSDuration read FTimeLeft write FTimeLeft;
    property Title: WideString read FTitle write FTitle;
    property UUID: UUIDType read FUUID write FUUID;
    property VATDetails: VATDetailsType read FVATDetails write FVATDetails;
    property SellerVacationNote: WideString read FSellerVacationNote write FSellerVacationNote;
    property WatchCount: Int64 read FWatchCount write FWatchCount;
    property HitCount: Int64 read FHitCount write FHitCount;
    property DisableBuyerRequirements: Boolean read FDisableBuyerRequirements write FDisableBuyerRequirements;
    property BuyerRequirements: BuyerRequirementsType read FBuyerRequirements write FBuyerRequirements;
    property BestOfferDetails: BestOfferDetailsType read FBestOfferDetails write FBestOfferDetails;
    property LiveAuctionDetails: LiveAuctionDetailsType read FLiveAuctionDetails write FLiveAuctionDetails;
    property LocationDefaulted: Boolean read FLocationDefaulted write FLocationDefaulted;
    property ThirdPartyCheckout: Boolean read FThirdPartyCheckout write FThirdPartyCheckout;
    property UseTaxTable: Boolean read FUseTaxTable write FUseTaxTable;
    property GetItFast: Boolean read FGetItFast write FGetItFast;
    property BuyerResponsibleForShipping: Boolean read FBuyerResponsibleForShipping write FBuyerResponsibleForShipping;
    property LimitedWarrantyEligible: Boolean read FLimitedWarrantyEligible write FLimitedWarrantyEligible;
    property eBayNotes: WideString read FeBayNotes write FeBayNotes;
    property QuestionCount: Int64 read FQuestionCount write FQuestionCount;
    property Relisted: Boolean read FRelisted write FRelisted;
    property QuantityAvailable: Integer read FQuantityAvailable write FQuantityAvailable;
    property SKU: SKUType read FSKU write FSKU;
    property CategoryBasedAttributesPrefill: Boolean read FCategoryBasedAttributesPrefill write FCategoryBasedAttributesPrefill;
    property SearchDetails: SearchDetailsType read FSearchDetails write FSearchDetails;
    property PostalCode: WideString read FPostalCode write FPostalCode;
    property ShippingTermsInDescription: Boolean read FShippingTermsInDescription write FShippingTermsInDescription;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
    property SellerInventoryID: WideString read FSellerInventoryID write FSellerInventoryID;
    property PictureDetails: PictureDetailsType read FPictureDetails write FPictureDetails;
    property DigitalDeliveryDetails: DigitalDeliveryDetailsType read FDigitalDeliveryDetails write FDigitalDeliveryDetails;
    property DispatchTimeMax: Integer read FDispatchTimeMax write FDispatchTimeMax;
    property SkypeEnabled: Boolean read FSkypeEnabled write FSkypeEnabled;
    property SkypeID: WideString read FSkypeID write FSkypeID;
    property SkypeContactOption: SkypeContactOptionCodeType read FSkypeContactOption write FSkypeContactOption;
    property BestOfferEnabled: Boolean read FBestOfferEnabled write FBestOfferEnabled;
    property LocalListing: Boolean read FLocalListing write FLocalListing;
    property ThirdPartyCheckoutIntegration: Boolean read FThirdPartyCheckoutIntegration write FThirdPartyCheckoutIntegration;
    property ExpressOptOut: Boolean read FExpressOptOut write FExpressOptOut;
    property ListingCheckoutRedirectPreference: ListingCheckoutRedirectPreferenceType read FListingCheckoutRedirectPreference write FListingCheckoutRedirectPreference;
    property ExpressDetails: ExpressDetailsType read FExpressDetails write FExpressDetails;
    property SellerContactDetails: AddressType read FSellerContactDetails write FSellerContactDetails;
    property TotalQuestionCount: Int64 read FTotalQuestionCount write FTotalQuestionCount;
    property ProxyItem: Boolean read FProxyItem write FProxyItem;
    property ExtendedSellerContactDetails: ExtendedContactDetailsType read FExtendedSellerContactDetails write FExtendedSellerContactDetails;
    property LeadCount: Integer read FLeadCount write FLeadCount;
    property NewLeadCount: Integer read FNewLeadCount write FNewLeadCount;
    property ItemSpecifics: NameValueListArrayType read FItemSpecifics write FItemSpecifics;
    property GroupCategoryID: WideString read FGroupCategoryID write FGroupCategoryID;
    property ClassifiedAdPayPerLeadFee: AmountType read FClassifiedAdPayPerLeadFee write FClassifiedAdPayPerLeadFee;
    property BidGroupItem: Boolean read FBidGroupItem write FBidGroupItem;
    property ApplyBuyerProtection: BuyerProtectionDetailsType read FApplyBuyerProtection write FApplyBuyerProtection;
    property ListingSubtype2: ListingSubtypeCodeType read FListingSubtype2 write FListingSubtype2;
    property MechanicalCheckAccepted: Boolean read FMechanicalCheckAccepted write FMechanicalCheckAccepted;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NameValueListType = class(TRemotable)
  private
    FName_: WideString;
    FValue: WideString;
    FSource: ItemSpecificSourceCodeType;
  published
    property Name_: WideString read FName_ write FName_;
    property Value: WideString read FValue write FValue;
    property Source: ItemSpecificSourceCodeType read FSource write FSource;
  end;

  FeesType   = array of FeeType;                { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeeType = class(TRemotable)
  private
    FName_: WideString;
    FFee: AmountType;
  public
    destructor Destroy; override;
  published
    property Name_: WideString read FName_ write FName_;
    property Fee: AmountType read FFee write FFee;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MemberMessageType = class(TRemotable)
  private
    FMessageType: MessageTypeCodeType;
    FQuestionType: QuestionTypeCodeType;
    FEmailCopyToSender: Boolean;
    FHideSendersEmailAddress: Boolean;
    FDisplayToPublic: Boolean;
    FSenderID: WideString;
    FSenderEmail: WideString;
    FRecipientID: WideString;
    FSubject: WideString;
    FBody: WideString;
    FMessageID: WideString;
    FParentMessageID: WideString;
  published
    property MessageType: MessageTypeCodeType read FMessageType write FMessageType;
    property QuestionType: QuestionTypeCodeType read FQuestionType write FQuestionType;
    property EmailCopyToSender: Boolean read FEmailCopyToSender write FEmailCopyToSender;
    property HideSendersEmailAddress: Boolean read FHideSendersEmailAddress write FHideSendersEmailAddress;
    property DisplayToPublic: Boolean read FDisplayToPublic write FDisplayToPublic;
    property SenderID: WideString read FSenderID write FSenderID;
    property SenderEmail: WideString read FSenderEmail write FSenderEmail;
    property RecipientID: WideString read FRecipientID write FRecipientID;
    property Subject: WideString read FSubject write FSubject;
    property Body: WideString read FBody write FBody;
    property MessageID: WideString read FMessageID write FMessageID;
    property ParentMessageID: WideString read FParentMessageID write FParentMessageID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderRequestContainerType = class(TRemotable)
  private
    FCorrelationID: WideString;
    FItemID: WideString;
    FMemberMessage: MemberMessageType;
  public
    destructor Destroy; override;
  published
    property CorrelationID: WideString read FCorrelationID write FCorrelationID;
    property ItemID: WideString read FItemID write FItemID;
    property MemberMessage: MemberMessageType read FMemberMessage write FMemberMessage;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AddMemberMessagesAAQToBidderResponseContainerType = class(TRemotable)
  private
    FCorrelationID: WideString;
    FAck: AckCodeType;
  published
    property CorrelationID: WideString read FCorrelationID write FCorrelationID;
    property Ack: AckCodeType read FAck write FAck;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CheckoutStatusType = class(TRemotable)
  private
    FeBayPaymentStatus: PaymentStatusCodeType;
    FLastModifiedTime: TXSDateTime;
    FPaymentMethod: BuyerPaymentMethodCodeType;
    FStatus: CompleteStatusCodeType;
  public
    destructor Destroy; override;
  published
    property eBayPaymentStatus: PaymentStatusCodeType read FeBayPaymentStatus write FeBayPaymentStatus;
    property LastModifiedTime: TXSDateTime read FLastModifiedTime write FLastModifiedTime;
    property PaymentMethod: BuyerPaymentMethodCodeType read FPaymentMethod write FPaymentMethod;
    property Status: CompleteStatusCodeType read FStatus write FStatus;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExternalTransactionType = class(TRemotable)
  private
    FExternalTransactionID: WideString;
    FExternalTransactionTime: TXSDateTime;
    FFeeOrCreditAmount: AmountType;
    FPaymentOrRefundAmount: AmountType;
  public
    destructor Destroy; override;
  published
    property ExternalTransactionID: WideString read FExternalTransactionID write FExternalTransactionID;
    property ExternalTransactionTime: TXSDateTime read FExternalTransactionTime write FExternalTransactionTime;
    property FeeOrCreditAmount: AmountType read FFeeOrCreditAmount write FFeeOrCreditAmount;
    property PaymentOrRefundAmount: AmountType read FPaymentOrRefundAmount write FPaymentOrRefundAmount;
  end;

  TransactionArrayType = array of TransactionType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OrderType = class(TRemotable)
  private
    FOrderID: OrderIDType;
    FOrderStatus: OrderStatusCodeType;
    FAdjustmentAmount: AmountType;
    FAmountPaid: AmountType;
    FAmountSaved: AmountType;
    FCheckoutStatus: CheckoutStatusType;
    FShippingDetails: ShippingDetailsType;
    FCreatingUserRole: TradingRoleCodeType;
    FCreatedTime: TXSDateTime;
    FPaymentMethods: BuyerPaymentMethodCodeType;
    FSellerEmail: WideString;
    FShippingAddress: AddressType;
    FShippingServiceSelected: ShippingServiceOptionsType;
    FSubtotal: AmountType;
    FTotal: AmountType;
    FExternalTransaction: ExternalTransactionType;
    FDigitalDelivery: Boolean;
    FTransactionArray: TransactionArrayType;
    FBuyerUserID: UserIDType;
    FPaidTime: TXSDateTime;
    FShippedTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property OrderID: OrderIDType read FOrderID write FOrderID;
    property OrderStatus: OrderStatusCodeType read FOrderStatus write FOrderStatus;
    property AdjustmentAmount: AmountType read FAdjustmentAmount write FAdjustmentAmount;
    property AmountPaid: AmountType read FAmountPaid write FAmountPaid;
    property AmountSaved: AmountType read FAmountSaved write FAmountSaved;
    property CheckoutStatus: CheckoutStatusType read FCheckoutStatus write FCheckoutStatus;
    property ShippingDetails: ShippingDetailsType read FShippingDetails write FShippingDetails;
    property CreatingUserRole: TradingRoleCodeType read FCreatingUserRole write FCreatingUserRole;
    property CreatedTime: TXSDateTime read FCreatedTime write FCreatedTime;
    property PaymentMethods: BuyerPaymentMethodCodeType read FPaymentMethods write FPaymentMethods;
    property SellerEmail: WideString read FSellerEmail write FSellerEmail;
    property ShippingAddress: AddressType read FShippingAddress write FShippingAddress;
    property ShippingServiceSelected: ShippingServiceOptionsType read FShippingServiceSelected write FShippingServiceSelected;
    property Subtotal: AmountType read FSubtotal write FSubtotal;
    property Total: AmountType read FTotal write FTotal;
    property ExternalTransaction: ExternalTransactionType read FExternalTransaction write FExternalTransaction;
    property DigitalDelivery: Boolean read FDigitalDelivery write FDigitalDelivery;
    property TransactionArray: TransactionArrayType read FTransactionArray write FTransactionArray;
    property BuyerUserID: UserIDType read FBuyerUserID write FBuyerUserID;
    property PaidTime: TXSDateTime read FPaidTime write FPaidTime;
    property ShippedTime: TXSDateTime read FShippedTime write FShippedTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TransactionStatusType = class(TRemotable)
  private
    FeBayPaymentStatus: PaymentStatusCodeType;
    FCheckoutStatus: CheckoutStatusCodeType;
    FLastTimeModified: TXSDateTime;
    FPaymentMethodUsed: BuyerPaymentMethodCodeType;
    FCompleteStatus: CompleteStatusCodeType;
    FBuyerSelectedShipping: Boolean;
  public
    destructor Destroy; override;
  published
    property eBayPaymentStatus: PaymentStatusCodeType read FeBayPaymentStatus write FeBayPaymentStatus;
    property CheckoutStatus: CheckoutStatusCodeType read FCheckoutStatus write FCheckoutStatus;
    property LastTimeModified: TXSDateTime read FLastTimeModified write FLastTimeModified;
    property PaymentMethodUsed: BuyerPaymentMethodCodeType read FPaymentMethodUsed write FPaymentMethodUsed;
    property CompleteStatus: CompleteStatusCodeType read FCompleteStatus write FCompleteStatus;
    property BuyerSelectedShipping: Boolean read FBuyerSelectedShipping write FBuyerSelectedShipping;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingManagerProductDetailsType = class(TRemotable)
  private
    FProductName: WideString;
    FPartNumber: Integer;
    FProductPartNumber: WideString;
    FProductID: WideString;
    FCustomLabel: WideString;
    FQuantityAvailable: Integer;
    FUnitCost: AmountType;
  public
    destructor Destroy; override;
  published
    property ProductName: WideString read FProductName write FProductName;
    property PartNumber: Integer read FPartNumber write FPartNumber;
    property ProductPartNumber: WideString read FProductPartNumber write FProductPartNumber;
    property ProductID: WideString read FProductID write FProductID;
    property CustomLabel: WideString read FCustomLabel write FCustomLabel;
    property QuantityAvailable: Integer read FQuantityAvailable write FQuantityAvailable;
    property UnitCost: AmountType read FUnitCost write FUnitCost;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackInfoType = class(TRemotable)
  private
    FCommentText: WideString;
    FCommentType: CommentTypeCodeType;
    FTargetUser: UserIDType;
  published
    property CommentText: WideString read FCommentText write FCommentText;
    property CommentType: CommentTypeCodeType read FCommentType write FCommentType;
    property TargetUser: UserIDType read FTargetUser write FTargetUser;
  end;

  RefundArrayType = array of RefundType;        { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TransactionType = class(TRemotable)
  private
    FAmountPaid: AmountType;
    FAdjustmentAmount: AmountType;
    FConvertedAdjustmentAmount: AmountType;
    FBuyer: UserType;
    FShippingDetails: ShippingDetailsType;
    FConvertedAmountPaid: AmountType;
    FConvertedTransactionPrice: AmountType;
    FCreatedDate: TXSDateTime;
    FDepositType: DepositTypeCodeType;
    FItem: ItemType;
    FQuantityPurchased: Integer;
    FStatus: TransactionStatusType;
    FTransactionID: WideString;
    FTransactionPrice: AmountType;
    FBestOfferSale: Boolean;
    FVATPercent: TXSDecimal;
    FExternalTransaction: ExternalTransactionType;
    FSellingManagerProductDetails: SellingManagerProductDetailsType;
    FShippingServiceSelected: ShippingServiceOptionsType;
    FBuyerMessage: WideString;
    FDutchAuctionBid: AmountType;
    FBuyerPaidStatus: PaidStatusCodeType;
    FSellerPaidStatus: PaidStatusCodeType;
    FPaidTime: TXSDateTime;
    FShippedTime: TXSDateTime;
    FTotalPrice: AmountType;
    FFeedbackLeft: FeedbackInfoType;
    FFeedbackReceived: FeedbackInfoType;
    FContainingOrder: OrderType;
    FFinalValueFee: AmountType;
    FTransactionPlatform: TransactionPlatformType;
    FListingCheckoutRedirectPreference: ListingCheckoutRedirectPreferenceType;
    FRefundArray: RefundArrayType;
    FTransactionSiteID: SiteCodeType;
    FPlatform_: TransactionPlatformCodeType;
    FCartID: WideString;
    FSellerContactBuyerByEmail: Boolean;
    FPayPalEmailAddress: WideString;
    FPaisaPayID: WideString;
  public
    destructor Destroy; override;
  published
    property AmountPaid: AmountType read FAmountPaid write FAmountPaid;
    property AdjustmentAmount: AmountType read FAdjustmentAmount write FAdjustmentAmount;
    property ConvertedAdjustmentAmount: AmountType read FConvertedAdjustmentAmount write FConvertedAdjustmentAmount;
    property Buyer: UserType read FBuyer write FBuyer;
    property ShippingDetails: ShippingDetailsType read FShippingDetails write FShippingDetails;
    property ConvertedAmountPaid: AmountType read FConvertedAmountPaid write FConvertedAmountPaid;
    property ConvertedTransactionPrice: AmountType read FConvertedTransactionPrice write FConvertedTransactionPrice;
    property CreatedDate: TXSDateTime read FCreatedDate write FCreatedDate;
    property DepositType: DepositTypeCodeType read FDepositType write FDepositType;
    property Item: ItemType read FItem write FItem;
    property QuantityPurchased: Integer read FQuantityPurchased write FQuantityPurchased;
    property Status: TransactionStatusType read FStatus write FStatus;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property TransactionPrice: AmountType read FTransactionPrice write FTransactionPrice;
    property BestOfferSale: Boolean read FBestOfferSale write FBestOfferSale;
    property VATPercent: TXSDecimal read FVATPercent write FVATPercent;
    property ExternalTransaction: ExternalTransactionType read FExternalTransaction write FExternalTransaction;
    property SellingManagerProductDetails: SellingManagerProductDetailsType read FSellingManagerProductDetails write FSellingManagerProductDetails;
    property ShippingServiceSelected: ShippingServiceOptionsType read FShippingServiceSelected write FShippingServiceSelected;
    property BuyerMessage: WideString read FBuyerMessage write FBuyerMessage;
    property DutchAuctionBid: AmountType read FDutchAuctionBid write FDutchAuctionBid;
    property BuyerPaidStatus: PaidStatusCodeType read FBuyerPaidStatus write FBuyerPaidStatus;
    property SellerPaidStatus: PaidStatusCodeType read FSellerPaidStatus write FSellerPaidStatus;
    property PaidTime: TXSDateTime read FPaidTime write FPaidTime;
    property ShippedTime: TXSDateTime read FShippedTime write FShippedTime;
    property TotalPrice: AmountType read FTotalPrice write FTotalPrice;
    property FeedbackLeft: FeedbackInfoType read FFeedbackLeft write FFeedbackLeft;
    property FeedbackReceived: FeedbackInfoType read FFeedbackReceived write FFeedbackReceived;
    property ContainingOrder: OrderType read FContainingOrder write FContainingOrder;
    property FinalValueFee: AmountType read FFinalValueFee write FFinalValueFee;
    property TransactionPlatform: TransactionPlatformType read FTransactionPlatform write FTransactionPlatform;
    property ListingCheckoutRedirectPreference: ListingCheckoutRedirectPreferenceType read FListingCheckoutRedirectPreference write FListingCheckoutRedirectPreference;
    property RefundArray: RefundArrayType read FRefundArray write FRefundArray;
    property TransactionSiteID: SiteCodeType read FTransactionSiteID write FTransactionSiteID;
    property Platform_: TransactionPlatformCodeType read FPlatform_ write FPlatform_;
    property CartID: WideString read FCartID write FCartID;
    property SellerContactBuyerByEmail: Boolean read FSellerContactBuyerByEmail write FSellerContactBuyerByEmail;
    property PayPalEmailAddress: WideString read FPayPalEmailAddress write FPayPalEmailAddress;
    property PaisaPayID: WideString read FPaisaPayID write FPaisaPayID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RefundType = class(TRemotable)
  private
    FRefundFromSeller: AmountType;
    FTotalRefundToBuyer: AmountType;
    FRefundTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property RefundFromSeller: AmountType read FRefundFromSeller write FRefundFromSeller;
    property TotalRefundToBuyer: AmountType read FTotalRefundToBuyer write FTotalRefundToBuyer;
    property RefundTime: TXSDateTime read FRefundTime write FRefundTime;
  end;

  BidApprovalArrayType = array of BidApprovalType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidApprovalType = class(TRemotable)
  private
    FUserID: UserIDType;
    FApprovedBiddingLimit: AmountType;
    FDeclinedComment: WideString;
    FStatus: BidderStatusCodeType;
  public
    destructor Destroy; override;
  published
    property UserID: UserIDType read FUserID write FUserID;
    property ApprovedBiddingLimit: AmountType read FApprovedBiddingLimit write FApprovedBiddingLimit;
    property DeclinedComment: WideString read FDeclinedComment write FDeclinedComment;
    property Status: BidderStatusCodeType read FStatus write FStatus;
  end;

  LiveAuctionApprovalStatusArrayType = array of LiveAuctionApprovalStatusType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LiveAuctionApprovalStatusType = class(TRemotable)
  private
    FUserID: UserIDType;
    FStatus: WideString;
  published
    property UserID: UserIDType read FUserID write FUserID;
    property Status: WideString read FStatus write FStatus;
  end;

  MyMessagesAlertIDArrayType = array of MyMessagesAlertIDType;   { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesMessageIDArrayType = array of MyMessagesMessageIDType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginationType = class(TRemotable)
  private
    FEntriesPerPage: Integer;
    FPageNumber: Integer;
  published
    property EntriesPerPage: Integer read FEntriesPerPage write FEntriesPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
  end;

  AccountEntriesType = array of AccountEntryType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginationResultType = class(TRemotable)
  private
    FTotalNumberOfPages: Integer;
    FTotalNumberOfEntries: Integer;
  published
    property TotalNumberOfPages: Integer read FTotalNumberOfPages write FTotalNumberOfPages;
    property TotalNumberOfEntries: Integer read FTotalNumberOfEntries write FTotalNumberOfEntries;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdditionalAccountType = class(TRemotable)
  private
    FBalance: AmountType;
    FCurrency: CurrencyCodeType;
    FAccountCode: WideString;
  public
    destructor Destroy; override;
  published
    property Balance: AmountType read FBalance write FBalance;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
    property AccountCode: WideString read FAccountCode write FAccountCode;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AccountSummaryType = class(TRemotable)
  private
    FAccountState: AccountStateCodeType;
    FInvoicePayment: AmountType;
    FInvoiceCredit: AmountType;
    FInvoiceNewFee: AmountType;
    FAdditionalAccount: AdditionalAccountType;
    FAmountPastDue: AmountType;
    FBankAccountInfo: WideString;
    FBankModifyDate: TXSDateTime;
    FBillingCycleDate: Integer;
    FCreditCardExpiration: TXSDateTime;
    FCreditCardInfo: WideString;
    FCreditCardModifyDate: TXSDateTime;
    FCurrentBalance: AmountType;
    FEmail: WideString;
    FInvoiceBalance: AmountType;
    FInvoiceDate: TXSDateTime;
    FLastAmountPaid: AmountType;
    FLastPaymentDate: TXSDateTime;
    FPastDue: Boolean;
    FPaymentMethod: SellerPaymentMethodCodeType;
  public
    destructor Destroy; override;
  published
    property AccountState: AccountStateCodeType read FAccountState write FAccountState;
    property InvoicePayment: AmountType read FInvoicePayment write FInvoicePayment;
    property InvoiceCredit: AmountType read FInvoiceCredit write FInvoiceCredit;
    property InvoiceNewFee: AmountType read FInvoiceNewFee write FInvoiceNewFee;
    property AdditionalAccount: AdditionalAccountType read FAdditionalAccount write FAdditionalAccount;
    property AmountPastDue: AmountType read FAmountPastDue write FAmountPastDue;
    property BankAccountInfo: WideString read FBankAccountInfo write FBankAccountInfo;
    property BankModifyDate: TXSDateTime read FBankModifyDate write FBankModifyDate;
    property BillingCycleDate: Integer read FBillingCycleDate write FBillingCycleDate;
    property CreditCardExpiration: TXSDateTime read FCreditCardExpiration write FCreditCardExpiration;
    property CreditCardInfo: WideString read FCreditCardInfo write FCreditCardInfo;
    property CreditCardModifyDate: TXSDateTime read FCreditCardModifyDate write FCreditCardModifyDate;
    property CurrentBalance: AmountType read FCurrentBalance write FCurrentBalance;
    property Email: WideString read FEmail write FEmail;
    property InvoiceBalance: AmountType read FInvoiceBalance write FInvoiceBalance;
    property InvoiceDate: TXSDateTime read FInvoiceDate write FInvoiceDate;
    property LastAmountPaid: AmountType read FLastAmountPaid write FLastAmountPaid;
    property LastPaymentDate: TXSDateTime read FLastPaymentDate write FLastPaymentDate;
    property PastDue: Boolean read FPastDue write FPastDue;
    property PaymentMethod: SellerPaymentMethodCodeType read FPaymentMethod write FPaymentMethod;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AccountEntryType = class(TRemotable)
  private
    FAccountDetailsEntryType: AccountDetailEntryCodeType;
    FDescription: WideString;
    FBalance: AmountType;
    FDate: TXSDateTime;
    FGrossDetailAmount: AmountType;
    FItemID: ItemIDType;
    FMemo: WideString;
    FNetDetailAmount: AmountType;
    FRefNumber: WideString;
    FVATPercent: TXSDecimal;
    FTitle: WideString;
  public
    destructor Destroy; override;
  published
    property AccountDetailsEntryType: AccountDetailEntryCodeType read FAccountDetailsEntryType write FAccountDetailsEntryType;
    property Description: WideString read FDescription write FDescription;
    property Balance: AmountType read FBalance write FBalance;
    property Date: TXSDateTime read FDate write FDate;
    property GrossDetailAmount: AmountType read FGrossDetailAmount write FGrossDetailAmount;
    property ItemID: ItemIDType read FItemID write FItemID;
    property Memo: WideString read FMemo write FMemo;
    property NetDetailAmount: AmountType read FNetDetailAmount write FNetDetailAmount;
    property RefNumber: WideString read FRefNumber write FRefNumber;
    property VATPercent: TXSDecimal read FVATPercent write FVATPercent;
    property Title: WideString read FTitle write FTitle;
  end;

  MemberMessageExchangeArrayType = array of MemberMessageExchangeType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdFormatLeadType = class(TRemotable)
  private
    FAdditionalInformation: WideString;
    FAddress: AddressType;
    FBestTimeToCall: WideString;
    FEmail: WideString;
    FFirstName: WideString;
    FLastName: WideString;
    FPhone: WideString;
    FSubmittedTime: TXSDateTime;
    FItemID: ItemIDType;
    FItemTitle: WideString;
    FUserID: UserIDType;
    FMemberMessage: MemberMessageExchangeArrayType;
    FStatus: AdFormatLeadStatusCodeType;
    FPhone2: WideString;
    FLeadFee: AmountType;
  public
    destructor Destroy; override;
  published
    property AdditionalInformation: WideString read FAdditionalInformation write FAdditionalInformation;
    property Address: AddressType read FAddress write FAddress;
    property BestTimeToCall: WideString read FBestTimeToCall write FBestTimeToCall;
    property Email: WideString read FEmail write FEmail;
    property FirstName: WideString read FFirstName write FFirstName;
    property LastName: WideString read FLastName write FLastName;
    property Phone: WideString read FPhone write FPhone;
    property SubmittedTime: TXSDateTime read FSubmittedTime write FSubmittedTime;
    property ItemID: ItemIDType read FItemID write FItemID;
    property ItemTitle: WideString read FItemTitle write FItemTitle;
    property UserID: UserIDType read FUserID write FUserID;
    property MemberMessage: MemberMessageExchangeArrayType read FMemberMessage write FMemberMessage;
    property Status: AdFormatLeadStatusCodeType read FStatus write FStatus;
    property Phone2: WideString read FPhone2 write FPhone2;
    property LeadFee: AmountType read FLeadFee write FLeadFee;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MemberMessageExchangeType = class(TRemotable)
  private
    FItem: ItemType;
    FQuestion: MemberMessageType;
    FResponse: WideString;
    FMessageStatus: MessageStatusTypeCodeType;
    FCreationDate: TXSDateTime;
    FLastModifiedDate: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property Question: MemberMessageType read FQuestion write FQuestion;
    property Response: WideString read FResponse write FResponse;
    property MessageStatus: MessageStatusTypeCodeType read FMessageStatus write FMessageStatus;
    property CreationDate: TXSDateTime read FCreationDate write FCreationDate;
    property LastModifiedDate: TXSDateTime read FLastModifiedDate write FLastModifiedDate;
  end;

  OfferArrayType = array of OfferType;          { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OfferType = class(TRemotable)
  private
    FAction: BidActionCodeType;
    FCurrency: CurrencyCodeType;
    FItemID: ItemIDType;
    FMaxBid: AmountType;
    FQuantity: Integer;
    FSecondChanceEnabled: Boolean;
    FSiteCurrency: CurrencyCodeType;
    FTimeBid: TXSDateTime;
    FHighestBid: AmountType;
    FConvertedPrice: AmountType;
    FTransactionID: WideString;
    FUser: UserType;
    FUserConsent: Boolean;
    FBidCount: Integer;
    FMessage_: WideString;
    FBestOfferID: BestOfferIDType;
  public
    destructor Destroy; override;
  published
    property Action: BidActionCodeType read FAction write FAction;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
    property ItemID: ItemIDType read FItemID write FItemID;
    property MaxBid: AmountType read FMaxBid write FMaxBid;
    property Quantity: Integer read FQuantity write FQuantity;
    property SecondChanceEnabled: Boolean read FSecondChanceEnabled write FSecondChanceEnabled;
    property SiteCurrency: CurrencyCodeType read FSiteCurrency write FSiteCurrency;
    property TimeBid: TXSDateTime read FTimeBid write FTimeBid;
    property HighestBid: AmountType read FHighestBid write FHighestBid;
    property ConvertedPrice: AmountType read FConvertedPrice write FConvertedPrice;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property User: UserType read FUser write FUser;
    property UserConsent: Boolean read FUserConsent write FUserConsent;
    property BidCount: Integer read FBidCount write FBidCount;
    property Message_: WideString read FMessage_ write FMessage_;
    property BestOfferID: BestOfferIDType read FBestOfferID write FBestOfferID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ApiAccessRuleType = class(TRemotable)
  private
    FCallName: WideString;
    FCountsTowardAggregate: Boolean;
    FDailyHardLimit: Int64;
    FDailySoftLimit: Int64;
    FDailyUsage: Int64;
    FHourlyHardLimit: Int64;
    FHourlySoftLimit: Int64;
    FHourlyUsage: Int64;
    FPeriod: Integer;
    FPeriodicHardLimit: Int64;
    FPeriodicSoftLimit: Int64;
    FPeriodicUsage: Int64;
    FPeriodicStartDate: TXSDateTime;
    FModTime: TXSDateTime;
    FRuleCurrentStatus: AccessRuleCurrentStatusCodeType;
    FRuleStatus: AccessRuleStatusCodeType;
  public
    destructor Destroy; override;
  published
    property CallName: WideString read FCallName write FCallName;
    property CountsTowardAggregate: Boolean read FCountsTowardAggregate write FCountsTowardAggregate;
    property DailyHardLimit: Int64 read FDailyHardLimit write FDailyHardLimit;
    property DailySoftLimit: Int64 read FDailySoftLimit write FDailySoftLimit;
    property DailyUsage: Int64 read FDailyUsage write FDailyUsage;
    property HourlyHardLimit: Int64 read FHourlyHardLimit write FHourlyHardLimit;
    property HourlySoftLimit: Int64 read FHourlySoftLimit write FHourlySoftLimit;
    property HourlyUsage: Int64 read FHourlyUsage write FHourlyUsage;
    property Period: Integer read FPeriod write FPeriod;
    property PeriodicHardLimit: Int64 read FPeriodicHardLimit write FPeriodicHardLimit;
    property PeriodicSoftLimit: Int64 read FPeriodicSoftLimit write FPeriodicSoftLimit;
    property PeriodicUsage: Int64 read FPeriodicUsage write FPeriodicUsage;
    property PeriodicStartDate: TXSDateTime read FPeriodicStartDate write FPeriodicStartDate;
    property ModTime: TXSDateTime read FModTime write FModTime;
    property RuleCurrentStatus: AccessRuleCurrentStatusCodeType read FRuleCurrentStatus write FRuleCurrentStatus;
    property RuleStatus: AccessRuleStatusCodeType read FRuleStatus write FRuleStatus;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  XSLFileType = class(TRemotable)
  private
    FFileName: WideString;
    FFileVersion: WideString;
    FFileContent: WideString;
  published
    property FileName: WideString read FFileName write FFileName;
    property FileVersion: WideString read FFileVersion write FFileVersion;
    property FileContent: WideString read FFileContent write FFileContent;
  end;

  BestOfferArrayType = array of BestOfferType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferType = class(TRemotable)
  private
    FBestOfferID: BestOfferIDType;
    FExpirationTime: TXSDateTime;
    FBuyer: UserType;
    FPrice: AmountType;
    FStatus: BestOfferStatusCodeType;
    FQuantity: Integer;
    FBuyerMessage: WideString;
    FSellerMessage: WideString;
    FBestOfferCodeType: BestOfferTypeCodeType;
    FCallStatus: WideString;
  public
    destructor Destroy; override;
  published
    property BestOfferID: BestOfferIDType read FBestOfferID write FBestOfferID;
    property ExpirationTime: TXSDateTime read FExpirationTime write FExpirationTime;
    property Buyer: UserType read FBuyer write FBuyer;
    property Price: AmountType read FPrice write FPrice;
    property Status: BestOfferStatusCodeType read FStatus write FStatus;
    property Quantity: Integer read FQuantity write FQuantity;
    property BuyerMessage: WideString read FBuyerMessage write FBuyerMessage;
    property SellerMessage: WideString read FSellerMessage write FSellerMessage;
    property BestOfferCodeType: BestOfferTypeCodeType read FBestOfferCodeType write FBestOfferCodeType;
    property CallStatus: WideString read FCallStatus write FCallStatus;
  end;

  ItemArrayType = array of ItemType;            { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AffiliateTrackingDetailsType = class(TRemotable)
  private
    FTrackingID: WideString;
    FTrackingPartnerCode: WideString;
    FApplicationDeviceType: ApplicationDeviceTypeCodeType;
    FAffiliateUserID: WideString;
  published
    property TrackingID: WideString read FTrackingID write FTrackingID;
    property TrackingPartnerCode: WideString read FTrackingPartnerCode write FTrackingPartnerCode;
    property ApplicationDeviceType: ApplicationDeviceTypeCodeType read FApplicationDeviceType write FApplicationDeviceType;
    property AffiliateUserID: WideString read FAffiliateUserID write FAffiliateUserID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CheckoutCompleteRedirectType = class(TRemotable)
  private
    FURL: WideString;
    FName_: WideString;
  published
    property URL: WideString read FURL write FURL;
    property Name_: WideString read FName_ write FName_;
  end;

  CartItemArrayType = array of CartItemType;    { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CheckoutOrderDetailType = class(TRemotable)
  private
    FTotalCartMerchandiseCost: AmountType;
    FTotalCartShippingCost: AmountType;
    FTotalTaxAmount: AmountType;
    FTotalAmount: AmountType;
  public
    destructor Destroy; override;
  published
    property TotalCartMerchandiseCost: AmountType read FTotalCartMerchandiseCost write FTotalCartMerchandiseCost;
    property TotalCartShippingCost: AmountType read FTotalCartShippingCost write FTotalCartShippingCost;
    property TotalTaxAmount: AmountType read FTotalTaxAmount write FTotalTaxAmount;
    property TotalAmount: AmountType read FTotalAmount write FTotalAmount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CartType = class(TRemotable)
  private
    FCartID: Int64;
    FShippingAddress: AddressType;
    FCartStatus: OrderStatusCodeType;
    FCreationTime: TXSDateTime;
    FExpirationTime: TXSDateTime;
    FCheckoutURL: WideString;
    FCheckoutCompleteRedirect: CheckoutCompleteRedirectType;
    FCartItemArray: CartItemArrayType;
    FOrderDetail: CheckoutOrderDetailType;
  public
    destructor Destroy; override;
  published
    property CartID: Int64 read FCartID write FCartID;
    property ShippingAddress: AddressType read FShippingAddress write FShippingAddress;
    property CartStatus: OrderStatusCodeType read FCartStatus write FCartStatus;
    property CreationTime: TXSDateTime read FCreationTime write FCreationTime;
    property ExpirationTime: TXSDateTime read FExpirationTime write FExpirationTime;
    property CheckoutURL: WideString read FCheckoutURL write FCheckoutURL;
    property CheckoutCompleteRedirect: CheckoutCompleteRedirectType read FCheckoutCompleteRedirect write FCheckoutCompleteRedirect;
    property CartItemArray: CartItemArrayType read FCartItemArray write FCartItemArray;
    property OrderDetail: CheckoutOrderDetailType read FOrderDetail write FOrderDetail;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CartItemType = class(TRemotable)
  private
    FItem: ItemType;
    FReferenceID: Int64;
    FAction: ModifyActionCodeType;
  public
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property ReferenceID: Int64 read FReferenceID write FReferenceID;
    property Action: ModifyActionCodeType read FAction write FAction;
  end;

  CategoryArrayType = array of CategoryType;    { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteWideCharacteristicsType = class(TRemotable)
  private
    FCharacteristicsSet: CharacteristicsSetType;
    FExcludeCategoryID: WideString;
  public
    destructor Destroy; override;
  published
    property CharacteristicsSet: CharacteristicsSetType read FCharacteristicsSet write FCharacteristicsSet;
    property ExcludeCategoryID: WideString read FExcludeCategoryID write FExcludeCategoryID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingDurationReferenceType = class(TRemotable)
  private
    Ftype_: ListingTypeCodeType;
  published
    property type_: ListingTypeCodeType read Ftype_ write Ftype_ stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryFeatureType = class(TRemotable)
  private
    FCategoryID: WideString;
    FListingDuration: ListingDurationReferenceType;
    FShippingTermsRequired: Boolean;
    FBestOfferEnabled: Boolean;
    FDutchBINEnabled: Boolean;
    FUserConsentRequired: Boolean;
    FHomePageFeaturedEnabled: Boolean;
    FProPackEnabled: Boolean;
    FBasicUpgradePackEnabled: Boolean;
    FValuePackEnabled: Boolean;
    FProPackPlusEnabled: Boolean;
    FAdFormatEnabled: AdFormatEnabledCodeType;
    FDigitalDeliveryEnabled: DigitalDeliveryEnabledCodeType;
    FBestOfferCounterEnabled: Boolean;
    FBestOfferAutoDeclineEnabled: Boolean;
    FLocalMarketSpecialitySubscription: Boolean;
    FLocalMarketRegularSubscription: Boolean;
    FLocalMarketPremiumSubscription: Boolean;
    FLocalMarketNonSubscription: Boolean;
    FExpressEnabled: Boolean;
    FExpressPicturesRequired: Boolean;
    FExpressConditionRequired: Boolean;
    FMinimumReservePrice: Double;
    FSellerContactDetailsEnabled: Boolean;
    FTransactionConfirmationRequestEnabled: Boolean;
    FStoreInventoryEnabled: Boolean;
    FSkypeMeTransactionalEnabled: Boolean;
    FSkypeMeNonTransactionalEnabled: Boolean;
    FClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FClassifiedAdShippingMethodEnabled: Boolean;
    FClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FClassifiedAdCounterOfferEnabled: Boolean;
    FClassifiedAdAutoDeclineEnabled: Boolean;
    FClassifiedAdContactByPhoneEnabled: Boolean;
    FClassifiedAdContactByEmailEnabled: Boolean;
    FSafePaymentRequired: Boolean;
    FClassifiedAdPayPerLeadEnabled: Boolean;
    FItemSpecificsEnabled: ItemSpecificsEnabledCodeType;
    FPaisaPayFullEscrowEnabled: Boolean;
    FClassifiedAdAutoAcceptEnabled: Boolean;
    FBestOfferAutoAcceptEnabled: Boolean;
  public
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property ListingDuration: ListingDurationReferenceType read FListingDuration write FListingDuration;
    property ShippingTermsRequired: Boolean read FShippingTermsRequired write FShippingTermsRequired;
    property BestOfferEnabled: Boolean read FBestOfferEnabled write FBestOfferEnabled;
    property DutchBINEnabled: Boolean read FDutchBINEnabled write FDutchBINEnabled;
    property UserConsentRequired: Boolean read FUserConsentRequired write FUserConsentRequired;
    property HomePageFeaturedEnabled: Boolean read FHomePageFeaturedEnabled write FHomePageFeaturedEnabled;
    property ProPackEnabled: Boolean read FProPackEnabled write FProPackEnabled;
    property BasicUpgradePackEnabled: Boolean read FBasicUpgradePackEnabled write FBasicUpgradePackEnabled;
    property ValuePackEnabled: Boolean read FValuePackEnabled write FValuePackEnabled;
    property ProPackPlusEnabled: Boolean read FProPackPlusEnabled write FProPackPlusEnabled;
    property AdFormatEnabled: AdFormatEnabledCodeType read FAdFormatEnabled write FAdFormatEnabled;
    property DigitalDeliveryEnabled: DigitalDeliveryEnabledCodeType read FDigitalDeliveryEnabled write FDigitalDeliveryEnabled;
    property BestOfferCounterEnabled: Boolean read FBestOfferCounterEnabled write FBestOfferCounterEnabled;
    property BestOfferAutoDeclineEnabled: Boolean read FBestOfferAutoDeclineEnabled write FBestOfferAutoDeclineEnabled;
    property LocalMarketSpecialitySubscription: Boolean read FLocalMarketSpecialitySubscription write FLocalMarketSpecialitySubscription;
    property LocalMarketRegularSubscription: Boolean read FLocalMarketRegularSubscription write FLocalMarketRegularSubscription;
    property LocalMarketPremiumSubscription: Boolean read FLocalMarketPremiumSubscription write FLocalMarketPremiumSubscription;
    property LocalMarketNonSubscription: Boolean read FLocalMarketNonSubscription write FLocalMarketNonSubscription;
    property ExpressEnabled: Boolean read FExpressEnabled write FExpressEnabled;
    property ExpressPicturesRequired: Boolean read FExpressPicturesRequired write FExpressPicturesRequired;
    property ExpressConditionRequired: Boolean read FExpressConditionRequired write FExpressConditionRequired;
    property MinimumReservePrice: Double read FMinimumReservePrice write FMinimumReservePrice;
    property SellerContactDetailsEnabled: Boolean read FSellerContactDetailsEnabled write FSellerContactDetailsEnabled;
    property TransactionConfirmationRequestEnabled: Boolean read FTransactionConfirmationRequestEnabled write FTransactionConfirmationRequestEnabled;
    property StoreInventoryEnabled: Boolean read FStoreInventoryEnabled write FStoreInventoryEnabled;
    property SkypeMeTransactionalEnabled: Boolean read FSkypeMeTransactionalEnabled write FSkypeMeTransactionalEnabled;
    property SkypeMeNonTransactionalEnabled: Boolean read FSkypeMeNonTransactionalEnabled write FSkypeMeNonTransactionalEnabled;
    property ClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledCodeType read FClassifiedAdPaymentMethodEnabled write FClassifiedAdPaymentMethodEnabled;
    property ClassifiedAdShippingMethodEnabled: Boolean read FClassifiedAdShippingMethodEnabled write FClassifiedAdShippingMethodEnabled;
    property ClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType read FClassifiedAdBestOfferEnabled write FClassifiedAdBestOfferEnabled;
    property ClassifiedAdCounterOfferEnabled: Boolean read FClassifiedAdCounterOfferEnabled write FClassifiedAdCounterOfferEnabled;
    property ClassifiedAdAutoDeclineEnabled: Boolean read FClassifiedAdAutoDeclineEnabled write FClassifiedAdAutoDeclineEnabled;
    property ClassifiedAdContactByPhoneEnabled: Boolean read FClassifiedAdContactByPhoneEnabled write FClassifiedAdContactByPhoneEnabled;
    property ClassifiedAdContactByEmailEnabled: Boolean read FClassifiedAdContactByEmailEnabled write FClassifiedAdContactByEmailEnabled;
    property SafePaymentRequired: Boolean read FSafePaymentRequired write FSafePaymentRequired;
    property ClassifiedAdPayPerLeadEnabled: Boolean read FClassifiedAdPayPerLeadEnabled write FClassifiedAdPayPerLeadEnabled;
    property ItemSpecificsEnabled: ItemSpecificsEnabledCodeType read FItemSpecificsEnabled write FItemSpecificsEnabled;
    property PaisaPayFullEscrowEnabled: Boolean read FPaisaPayFullEscrowEnabled write FPaisaPayFullEscrowEnabled;
    property ClassifiedAdAutoAcceptEnabled: Boolean read FClassifiedAdAutoAcceptEnabled write FClassifiedAdAutoAcceptEnabled;
    property BestOfferAutoAcceptEnabled: Boolean read FBestOfferAutoAcceptEnabled write FBestOfferAutoAcceptEnabled;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteDefaultsType = class(TRemotable)
  private
    FListingDuration: ListingDurationReferenceType;
    FShippingTermsRequired: Boolean;
    FBestOfferEnabled: Boolean;
    FDutchBINEnabled: Boolean;
    FUserConsentRequired: Boolean;
    FHomePageFeaturedEnabled: Boolean;
    FProPackEnabled: Boolean;
    FBasicUpgradePackEnabled: Boolean;
    FValuePackEnabled: Boolean;
    FProPackPlusEnabled: Boolean;
    FAdFormatEnabled: AdFormatEnabledCodeType;
    FDigitalDeliveryEnabled: DigitalDeliveryEnabledCodeType;
    FBestOfferCounterEnabled: Boolean;
    FBestOfferAutoDeclineEnabled: Boolean;
    FLocalMarketSpecialitySubscription: Boolean;
    FLocalMarketRegularSubscription: Boolean;
    FLocalMarketPremiumSubscription: Boolean;
    FLocalMarketNonSubscription: Boolean;
    FExpressEnabled: Boolean;
    FExpressPicturesRequired: Boolean;
    FExpressConditionRequired: Boolean;
    FMinimumReservePrice: Double;
    FSellerContactDetailsEnabled: Boolean;
    FTransactionConfirmationRequestEnabled: Boolean;
    FStoreInventoryEnabled: Boolean;
    FSkypeMeTransactionalEnabled: Boolean;
    FSkypeMeNonTransactionalEnabled: Boolean;
    FLocalListingDistancesRegular: WideString;
    FLocalListingDistancesSpecialty: WideString;
    FLocalListingDistancesNonSubscription: WideString;
    FClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledCodeType;
    FClassifiedAdShippingMethodEnabled: Boolean;
    FClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType;
    FClassifiedAdCounterOfferEnabled: Boolean;
    FClassifiedAdAutoDeclineEnabled: Boolean;
    FClassifiedAdContactByPhoneEnabled: Boolean;
    FClassifiedAdContactByEmailEnabled: Boolean;
    FSafePaymentRequired: Boolean;
    FClassifiedAdPayPerLeadEnabled: Boolean;
    FItemSpecificsEnabled: ItemSpecificsEnabledCodeType;
    FPaisaPayFullEscrowEnabled: Boolean;
    FClassifiedAdAutoAcceptEnabled: Boolean;
    FBestOfferAutoAcceptEnabled: Boolean;
  public
    destructor Destroy; override;
  published
    property ListingDuration: ListingDurationReferenceType read FListingDuration write FListingDuration;
    property ShippingTermsRequired: Boolean read FShippingTermsRequired write FShippingTermsRequired;
    property BestOfferEnabled: Boolean read FBestOfferEnabled write FBestOfferEnabled;
    property DutchBINEnabled: Boolean read FDutchBINEnabled write FDutchBINEnabled;
    property UserConsentRequired: Boolean read FUserConsentRequired write FUserConsentRequired;
    property HomePageFeaturedEnabled: Boolean read FHomePageFeaturedEnabled write FHomePageFeaturedEnabled;
    property ProPackEnabled: Boolean read FProPackEnabled write FProPackEnabled;
    property BasicUpgradePackEnabled: Boolean read FBasicUpgradePackEnabled write FBasicUpgradePackEnabled;
    property ValuePackEnabled: Boolean read FValuePackEnabled write FValuePackEnabled;
    property ProPackPlusEnabled: Boolean read FProPackPlusEnabled write FProPackPlusEnabled;
    property AdFormatEnabled: AdFormatEnabledCodeType read FAdFormatEnabled write FAdFormatEnabled;
    property DigitalDeliveryEnabled: DigitalDeliveryEnabledCodeType read FDigitalDeliveryEnabled write FDigitalDeliveryEnabled;
    property BestOfferCounterEnabled: Boolean read FBestOfferCounterEnabled write FBestOfferCounterEnabled;
    property BestOfferAutoDeclineEnabled: Boolean read FBestOfferAutoDeclineEnabled write FBestOfferAutoDeclineEnabled;
    property LocalMarketSpecialitySubscription: Boolean read FLocalMarketSpecialitySubscription write FLocalMarketSpecialitySubscription;
    property LocalMarketRegularSubscription: Boolean read FLocalMarketRegularSubscription write FLocalMarketRegularSubscription;
    property LocalMarketPremiumSubscription: Boolean read FLocalMarketPremiumSubscription write FLocalMarketPremiumSubscription;
    property LocalMarketNonSubscription: Boolean read FLocalMarketNonSubscription write FLocalMarketNonSubscription;
    property ExpressEnabled: Boolean read FExpressEnabled write FExpressEnabled;
    property ExpressPicturesRequired: Boolean read FExpressPicturesRequired write FExpressPicturesRequired;
    property ExpressConditionRequired: Boolean read FExpressConditionRequired write FExpressConditionRequired;
    property MinimumReservePrice: Double read FMinimumReservePrice write FMinimumReservePrice;
    property SellerContactDetailsEnabled: Boolean read FSellerContactDetailsEnabled write FSellerContactDetailsEnabled;
    property TransactionConfirmationRequestEnabled: Boolean read FTransactionConfirmationRequestEnabled write FTransactionConfirmationRequestEnabled;
    property StoreInventoryEnabled: Boolean read FStoreInventoryEnabled write FStoreInventoryEnabled;
    property SkypeMeTransactionalEnabled: Boolean read FSkypeMeTransactionalEnabled write FSkypeMeTransactionalEnabled;
    property SkypeMeNonTransactionalEnabled: Boolean read FSkypeMeNonTransactionalEnabled write FSkypeMeNonTransactionalEnabled;
    property LocalListingDistancesRegular: WideString read FLocalListingDistancesRegular write FLocalListingDistancesRegular;
    property LocalListingDistancesSpecialty: WideString read FLocalListingDistancesSpecialty write FLocalListingDistancesSpecialty;
    property LocalListingDistancesNonSubscription: WideString read FLocalListingDistancesNonSubscription write FLocalListingDistancesNonSubscription;
    property ClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledCodeType read FClassifiedAdPaymentMethodEnabled write FClassifiedAdPaymentMethodEnabled;
    property ClassifiedAdShippingMethodEnabled: Boolean read FClassifiedAdShippingMethodEnabled write FClassifiedAdShippingMethodEnabled;
    property ClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledCodeType read FClassifiedAdBestOfferEnabled write FClassifiedAdBestOfferEnabled;
    property ClassifiedAdCounterOfferEnabled: Boolean read FClassifiedAdCounterOfferEnabled write FClassifiedAdCounterOfferEnabled;
    property ClassifiedAdAutoDeclineEnabled: Boolean read FClassifiedAdAutoDeclineEnabled write FClassifiedAdAutoDeclineEnabled;
    property ClassifiedAdContactByPhoneEnabled: Boolean read FClassifiedAdContactByPhoneEnabled write FClassifiedAdContactByPhoneEnabled;
    property ClassifiedAdContactByEmailEnabled: Boolean read FClassifiedAdContactByEmailEnabled write FClassifiedAdContactByEmailEnabled;
    property SafePaymentRequired: Boolean read FSafePaymentRequired write FSafePaymentRequired;
    property ClassifiedAdPayPerLeadEnabled: Boolean read FClassifiedAdPayPerLeadEnabled write FClassifiedAdPayPerLeadEnabled;
    property ItemSpecificsEnabled: ItemSpecificsEnabledCodeType read FItemSpecificsEnabled write FItemSpecificsEnabled;
    property PaisaPayFullEscrowEnabled: Boolean read FPaisaPayFullEscrowEnabled write FPaisaPayFullEscrowEnabled;
    property ClassifiedAdAutoAcceptEnabled: Boolean read FClassifiedAdAutoAcceptEnabled write FClassifiedAdAutoAcceptEnabled;
    property BestOfferAutoAcceptEnabled: Boolean read FBestOfferAutoAcceptEnabled write FBestOfferAutoAcceptEnabled;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingTermRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DutchBINEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserConsentRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  HomePageFeaturedEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProPackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BasicUpgradePackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ValuePackEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProPackPlusEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AdFormatEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DigitalDeliveryEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferCounterEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferAutoDeclineEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketSpecialitySubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketRegularSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketPremiumSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalMarketNonSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressPicturesRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressConditionRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MinimumReservePriceDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TCREnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerContactDetailsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreInventoryEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SkypeMeTransactionalEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SkypeMeNonTransactionalEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalListingDistancesRegularDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalListingDistancesSpecialtyDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LocalListingDistancesNonSubscriptionDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdPaymentMethodEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdShippingMethodEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdBestOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdCounterOfferEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdAutoDeclineEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdContactByPhoneEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdContactByEmailEnabledDefintionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SafePaymentRequiredDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdPayPerLeadEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemSpecificsEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaisaPayFullEscrowEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BestOfferAutoAcceptEnabledDefinitionType = class(TRemotable)
  private
  published
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ClassifiedAdAutoAcceptEnabledDefinitionType = class(TRemotable)
  private
  published
  end;


  { ============ WARNING ============ }
  { WARNING - Attribute - Name:durationSetID, Type:Integer }
  ListingDurationDefinitionType = array of WideString;   { "urn:ebay:apis:eBLBaseComponents" }


  { ============ WARNING ============ }
  { WARNING - Attribute - Name:Version, Type:Integer }
  ListingDurationDefinitionsType = array of ListingDurationDefinitionType;   { "urn:ebay:apis:eBLBaseComponents" }



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeatureDefinitionsType = class(TRemotable)
  private
    FListingDurations: ListingDurationDefinitionsType;
    FShippingTermsRequired: ShippingTermRequiredDefinitionType;
    FBestOfferEnabled: BestOfferEnabledDefinitionType;
    FDutchBINEnabled: DutchBINEnabledDefinitionType;
    FUserConsentRequired: UserConsentRequiredDefinitionType;
    FHomePageFeaturedEnabled: HomePageFeaturedEnabledDefinitionType;
    FProPackEnabled: ProPackEnabledDefinitionType;
    FBasicUpgradePackEnabled: BasicUpgradePackEnabledDefinitionType;
    FValuePackEnabled: ValuePackEnabledDefinitionType;
    FProPackPlusEnabled: ProPackPlusEnabledDefinitionType;
    FAdFormatEnabled: AdFormatEnabledDefinitionType;
    FDigitalDeliveryEnabled: DigitalDeliveryEnabledDefinitionType;
    FBestOfferCounterEnabled: BestOfferCounterEnabledDefinitionType;
    FBestOfferAutoDeclineEnabled: BestOfferAutoDeclineEnabledDefinitionType;
    FLocalMarketSpecialitySubscription: LocalMarketSpecialitySubscriptionDefinitionType;
    FLocalMarketRegularSubscription: LocalMarketRegularSubscriptionDefinitionType;
    FLocalMarketPremiumSubscription: LocalMarketPremiumSubscriptionDefinitionType;
    FLocalMarketNonSubscription: LocalMarketNonSubscriptionDefinitionType;
    FExpressEnabled: ExpressEnabledDefinitionType;
    FExpressPicturesRequired: ExpressPicturesRequiredDefinitionType;
    FExpressConditionRequired: ExpressConditionRequiredDefinitionType;
    FMinimumReservePrice: MinimumReservePriceDefinitionType;
    FTransactionConfirmationRequestEnabled: TCREnabledDefinitionType;
    FSellerContactDetailsEnabled: SellerContactDetailsEnabledDefinitionType;
    FStoreInventoryEnabled: StoreInventoryEnabledDefinitionType;
    FSkypeMeTransactionalEnabled: SkypeMeTransactionalEnabledDefinitionType;
    FSkypeMeNonTransactionalEnabled: SkypeMeNonTransactionalEnabledDefinitionType;
    FLocalListingDistancesRegular: LocalListingDistancesRegularDefinitionType;
    FLocalListingDistancesSpecialty: LocalListingDistancesSpecialtyDefinitionType;
    FLocalListingDistancesNonSubscription: LocalListingDistancesNonSubscriptionDefinitionType;
    FClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledDefinitionType;
    FClassifiedAdShippingMethodEnabled: ClassifiedAdShippingMethodEnabledDefinitionType;
    FClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledDefinitionType;
    FClassifiedAdCounterOfferEnabled: ClassifiedAdCounterOfferEnabledDefinitionType;
    FClassifiedAdAutoDeclineEnabled: ClassifiedAdAutoDeclineEnabledDefinitionType;
    FClassifiedAdContactByPhoneEnabled: ClassifiedAdContactByPhoneEnabledDefinitionType;
    FClassifiedAdContactByEmailEnabled: ClassifiedAdContactByEmailEnabledDefintionType;
    FSafePaymentRequired: SafePaymentRequiredDefinitionType;
    FClassifiedAdPayPerLeadEnabled: ClassifiedAdPayPerLeadEnabledDefinitionType;
    FItemSpecificsEnabled: ItemSpecificsEnabledDefinitionType;
    FPaisaPayFullEscrowEnabled: PaisaPayFullEscrowEnabledDefinitionType;
    FBestOfferAutoAcceptEnabled: BestOfferAutoAcceptEnabledDefinitionType;
    FClassifiedAdAutoAcceptEnabled: ClassifiedAdAutoAcceptEnabledDefinitionType;
  public
    destructor Destroy; override;
  published
    property ListingDurations: ListingDurationDefinitionsType read FListingDurations write FListingDurations;
    property ShippingTermsRequired: ShippingTermRequiredDefinitionType read FShippingTermsRequired write FShippingTermsRequired;
    property BestOfferEnabled: BestOfferEnabledDefinitionType read FBestOfferEnabled write FBestOfferEnabled;
    property DutchBINEnabled: DutchBINEnabledDefinitionType read FDutchBINEnabled write FDutchBINEnabled;
    property UserConsentRequired: UserConsentRequiredDefinitionType read FUserConsentRequired write FUserConsentRequired;
    property HomePageFeaturedEnabled: HomePageFeaturedEnabledDefinitionType read FHomePageFeaturedEnabled write FHomePageFeaturedEnabled;
    property ProPackEnabled: ProPackEnabledDefinitionType read FProPackEnabled write FProPackEnabled;
    property BasicUpgradePackEnabled: BasicUpgradePackEnabledDefinitionType read FBasicUpgradePackEnabled write FBasicUpgradePackEnabled;
    property ValuePackEnabled: ValuePackEnabledDefinitionType read FValuePackEnabled write FValuePackEnabled;
    property ProPackPlusEnabled: ProPackPlusEnabledDefinitionType read FProPackPlusEnabled write FProPackPlusEnabled;
    property AdFormatEnabled: AdFormatEnabledDefinitionType read FAdFormatEnabled write FAdFormatEnabled;
    property DigitalDeliveryEnabled: DigitalDeliveryEnabledDefinitionType read FDigitalDeliveryEnabled write FDigitalDeliveryEnabled;
    property BestOfferCounterEnabled: BestOfferCounterEnabledDefinitionType read FBestOfferCounterEnabled write FBestOfferCounterEnabled;
    property BestOfferAutoDeclineEnabled: BestOfferAutoDeclineEnabledDefinitionType read FBestOfferAutoDeclineEnabled write FBestOfferAutoDeclineEnabled;
    property LocalMarketSpecialitySubscription: LocalMarketSpecialitySubscriptionDefinitionType read FLocalMarketSpecialitySubscription write FLocalMarketSpecialitySubscription;
    property LocalMarketRegularSubscription: LocalMarketRegularSubscriptionDefinitionType read FLocalMarketRegularSubscription write FLocalMarketRegularSubscription;
    property LocalMarketPremiumSubscription: LocalMarketPremiumSubscriptionDefinitionType read FLocalMarketPremiumSubscription write FLocalMarketPremiumSubscription;
    property LocalMarketNonSubscription: LocalMarketNonSubscriptionDefinitionType read FLocalMarketNonSubscription write FLocalMarketNonSubscription;
    property ExpressEnabled: ExpressEnabledDefinitionType read FExpressEnabled write FExpressEnabled;
    property ExpressPicturesRequired: ExpressPicturesRequiredDefinitionType read FExpressPicturesRequired write FExpressPicturesRequired;
    property ExpressConditionRequired: ExpressConditionRequiredDefinitionType read FExpressConditionRequired write FExpressConditionRequired;
    property MinimumReservePrice: MinimumReservePriceDefinitionType read FMinimumReservePrice write FMinimumReservePrice;
    property TransactionConfirmationRequestEnabled: TCREnabledDefinitionType read FTransactionConfirmationRequestEnabled write FTransactionConfirmationRequestEnabled;
    property SellerContactDetailsEnabled: SellerContactDetailsEnabledDefinitionType read FSellerContactDetailsEnabled write FSellerContactDetailsEnabled;
    property StoreInventoryEnabled: StoreInventoryEnabledDefinitionType read FStoreInventoryEnabled write FStoreInventoryEnabled;
    property SkypeMeTransactionalEnabled: SkypeMeTransactionalEnabledDefinitionType read FSkypeMeTransactionalEnabled write FSkypeMeTransactionalEnabled;
    property SkypeMeNonTransactionalEnabled: SkypeMeNonTransactionalEnabledDefinitionType read FSkypeMeNonTransactionalEnabled write FSkypeMeNonTransactionalEnabled;
    property LocalListingDistancesRegular: LocalListingDistancesRegularDefinitionType read FLocalListingDistancesRegular write FLocalListingDistancesRegular;
    property LocalListingDistancesSpecialty: LocalListingDistancesSpecialtyDefinitionType read FLocalListingDistancesSpecialty write FLocalListingDistancesSpecialty;
    property LocalListingDistancesNonSubscription: LocalListingDistancesNonSubscriptionDefinitionType read FLocalListingDistancesNonSubscription write FLocalListingDistancesNonSubscription;
    property ClassifiedAdPaymentMethodEnabled: ClassifiedAdPaymentMethodEnabledDefinitionType read FClassifiedAdPaymentMethodEnabled write FClassifiedAdPaymentMethodEnabled;
    property ClassifiedAdShippingMethodEnabled: ClassifiedAdShippingMethodEnabledDefinitionType read FClassifiedAdShippingMethodEnabled write FClassifiedAdShippingMethodEnabled;
    property ClassifiedAdBestOfferEnabled: ClassifiedAdBestOfferEnabledDefinitionType read FClassifiedAdBestOfferEnabled write FClassifiedAdBestOfferEnabled;
    property ClassifiedAdCounterOfferEnabled: ClassifiedAdCounterOfferEnabledDefinitionType read FClassifiedAdCounterOfferEnabled write FClassifiedAdCounterOfferEnabled;
    property ClassifiedAdAutoDeclineEnabled: ClassifiedAdAutoDeclineEnabledDefinitionType read FClassifiedAdAutoDeclineEnabled write FClassifiedAdAutoDeclineEnabled;
    property ClassifiedAdContactByPhoneEnabled: ClassifiedAdContactByPhoneEnabledDefinitionType read FClassifiedAdContactByPhoneEnabled write FClassifiedAdContactByPhoneEnabled;
    property ClassifiedAdContactByEmailEnabled: ClassifiedAdContactByEmailEnabledDefintionType read FClassifiedAdContactByEmailEnabled write FClassifiedAdContactByEmailEnabled;
    property SafePaymentRequired: SafePaymentRequiredDefinitionType read FSafePaymentRequired write FSafePaymentRequired;
    property ClassifiedAdPayPerLeadEnabled: ClassifiedAdPayPerLeadEnabledDefinitionType read FClassifiedAdPayPerLeadEnabled write FClassifiedAdPayPerLeadEnabled;
    property ItemSpecificsEnabled: ItemSpecificsEnabledDefinitionType read FItemSpecificsEnabled write FItemSpecificsEnabled;
    property PaisaPayFullEscrowEnabled: PaisaPayFullEscrowEnabledDefinitionType read FPaisaPayFullEscrowEnabled write FPaisaPayFullEscrowEnabled;
    property BestOfferAutoAcceptEnabled: BestOfferAutoAcceptEnabledDefinitionType read FBestOfferAutoAcceptEnabled write FBestOfferAutoAcceptEnabled;
    property ClassifiedAdAutoAcceptEnabled: ClassifiedAdAutoAcceptEnabledDefinitionType read FClassifiedAdAutoAcceptEnabled write FClassifiedAdAutoAcceptEnabled;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProximitySearchType = class(TRemotable)
  private
    FMaxDistance: Integer;
    FPostalCode: WideString;
  published
    property MaxDistance: Integer read FMaxDistance write FMaxDistance;
    property PostalCode: WideString read FPostalCode write FPostalCode;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  GroupType = class(TRemotable)
  private
    FMaxGroups: Integer;
    FMaxEntriesPerGroup: Integer;
  published
    property MaxGroups: Integer read FMaxGroups write FMaxGroups;
    property MaxEntriesPerGroup: Integer read FMaxEntriesPerGroup write FMaxEntriesPerGroup;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteLocationType = class(TRemotable)
  private
    FSiteID: SiteIDFilterCodeType;
  published
    property SiteID: SiteIDFilterCodeType read FSiteID write FSiteID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchLocationType = class(TRemotable)
  private
    FRegionID: WideString;
    FSiteLocation: SiteLocationType;
  public
    destructor Destroy; override;
  published
    property RegionID: WideString read FRegionID write FRegionID;
    property SiteLocation: SiteLocationType read FSiteLocation write FSiteLocation;
  end;

  RelatedSearchKeywordArrayType = array of WideString;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyingGuideType = class(TRemotable)
  private
    FName_: WideString;
    FURL: WideString;
    FCategoryID: WideString;
    FProductFinderID: Integer;
    FTitle: WideString;
    FText: WideString;
    FCreationTime: TXSDateTime;
    FUserID: UserIDType;
  public
    destructor Destroy; override;
  published
    property Name_: WideString read FName_ write FName_;
    property URL: WideString read FURL write FURL;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property ProductFinderID: Integer read FProductFinderID write FProductFinderID;
    property Title: WideString read FTitle write FTitle;
    property Text: WideString read FText write FText;
    property CreationTime: TXSDateTime read FCreationTime write FCreationTime;
    property UserID: UserIDType read FUserID write FUserID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyingGuideDetailsType = class(TRemotable)
  private
    FBuyingGuide: BuyingGuideType;
    FBuyingGuideHub: WideString;
  public
    destructor Destroy; override;
  published
    property BuyingGuide: BuyingGuideType read FBuyingGuide write FBuyingGuide;
    property BuyingGuideHub: WideString read FBuyingGuideHub write FBuyingGuideHub;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryMappingType = class(TRemotable)
  private
    FoldID: WideString;
    Fid: WideString;
  published
    property oldID: WideString read FoldID write FoldID stored AS_ATTRIBUTE;
    property id: WideString read Fid write Fid stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CategoryItemSpecificsType = class(TRemotable)
  private
    FCategoryID: WideString;
    FUpdated: Boolean;
    FItemSpecifics: NameValueListArrayType;
  public
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Updated: Boolean read FUpdated write FUpdated;
    property ItemSpecifics: NameValueListArrayType read FItemSpecifics write FItemSpecifics;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CharityInfoType = class(TRemotable)
  private
    FName_: WideString;
    FMission: WideString;
    FLogoURL: WideString;
    FStatus: CharityStatusCodeType;
    FSearchableString: WideString;
    FCharityRegion: Integer;
    FCharityDomain: Integer;
    FCharityID: WideString;
    FLogoURLSelling: WideString;
    FDisplayLogoSelling: Boolean;
    Fid: WideString;
  published
    property Name_: WideString read FName_ write FName_;
    property Mission: WideString read FMission write FMission;
    property LogoURL: WideString read FLogoURL write FLogoURL;
    property Status: CharityStatusCodeType read FStatus write FStatus;
    property SearchableString: WideString read FSearchableString write FSearchableString;
    property CharityRegion: Integer read FCharityRegion write FCharityRegion;
    property CharityDomain: Integer read FCharityDomain write FCharityDomain;
    property CharityID: WideString read FCharityID write FCharityID;
    property LogoURLSelling: WideString read FLogoURLSelling write FLogoURLSelling;
    property DisplayLogoSelling: Boolean read FDisplayLogoSelling write FDisplayLogoSelling;
    property id: WideString read Fid write Fid stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ContextSearchAssetType = class(TRemotable)
  private
    FKeyword: WideString;
    FCategory: CategoryType;
    FRanking: Integer;
  public
    destructor Destroy; override;
  published
    property Keyword: WideString read FKeyword write FKeyword;
    property Category: CategoryType read FCategory write FCategory;
    property Ranking: Integer read FRanking write FRanking;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DescriptionTemplateType = class(TRemotable)
  private
    FGroupID: Integer;
    FID: Integer;
    FImageURL: WideString;
    FName_: WideString;
    FTemplateXML: WideString;
    FType_: DescriptionTemplateCodeType;
  published
    property GroupID: Integer read FGroupID write FGroupID;
    property ID: Integer read FID write FID;
    property ImageURL: WideString read FImageURL write FImageURL;
    property Name_: WideString read FName_ write FName_;
    property TemplateXML: WideString read FTemplateXML write FTemplateXML;
    property Type_: DescriptionTemplateCodeType read FType_ write FType_;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ThemeGroupType = class(TRemotable)
  private
    FGroupID: Integer;
    FGroupName: WideString;
    FThemeID: Integer;
    FThemeTotal: Integer;
  published
    property GroupID: Integer read FGroupID write FGroupID;
    property GroupName: WideString read FGroupName write FGroupName;
    property ThemeID: Integer read FThemeID write FThemeID;
    property ThemeTotal: Integer read FThemeTotal write FThemeTotal;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeResolutionType = class(TRemotable)
  private
    FDisputeResolutionRecordType: DisputeResolutionRecordTypeCodeType;
    FDisputeResolutionReason: DisputeResolutionReasonCodeType;
    FResolutionTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property DisputeResolutionRecordType: DisputeResolutionRecordTypeCodeType read FDisputeResolutionRecordType write FDisputeResolutionRecordType;
    property DisputeResolutionReason: DisputeResolutionReasonCodeType read FDisputeResolutionReason write FDisputeResolutionReason;
    property ResolutionTime: TXSDateTime read FResolutionTime write FResolutionTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeMessageType = class(TRemotable)
  private
    FMessageID: Integer;
    FMessageSource: DisputeMessageSourceCodeType;
    FMessageCreationTime: TXSDateTime;
    FMessageText: WideString;
  public
    destructor Destroy; override;
  published
    property MessageID: Integer read FMessageID write FMessageID;
    property MessageSource: DisputeMessageSourceCodeType read FMessageSource write FMessageSource;
    property MessageCreationTime: TXSDateTime read FMessageCreationTime write FMessageCreationTime;
    property MessageText: WideString read FMessageText write FMessageText;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeType = class(TRemotable)
  private
    FDisputeID: DisputeIDType;
    FDisputeRecordType: DisputeRecordTypeCodeType;
    FDisputeState: DisputeStateCodeType;
    FDisputeStatus: DisputeStatusCodeType;
    FOtherPartyRole: TradingRoleCodeType;
    FOtherPartyName: WideString;
    FUserRole: TradingRoleCodeType;
    FBuyerUserID: UserIDType;
    FSellerUserID: UserIDType;
    FTransactionID: WideString;
    FItem: ItemType;
    FDisputeReason: DisputeReasonCodeType;
    FDisputeExplanation: DisputeExplanationCodeType;
    FDisputeCreditEligibility: DisputeCreditEligibilityCodeType;
    FDisputeCreatedTime: TXSDateTime;
    FDisputeModifiedTime: TXSDateTime;
    FDisputeResolution: DisputeResolutionType;
    FDisputeMessage: DisputeMessageType;
    FEscalation: Boolean;
    FPurchaseProtection: Boolean;
  public
    destructor Destroy; override;
  published
    property DisputeID: DisputeIDType read FDisputeID write FDisputeID;
    property DisputeRecordType: DisputeRecordTypeCodeType read FDisputeRecordType write FDisputeRecordType;
    property DisputeState: DisputeStateCodeType read FDisputeState write FDisputeState;
    property DisputeStatus: DisputeStatusCodeType read FDisputeStatus write FDisputeStatus;
    property OtherPartyRole: TradingRoleCodeType read FOtherPartyRole write FOtherPartyRole;
    property OtherPartyName: WideString read FOtherPartyName write FOtherPartyName;
    property UserRole: TradingRoleCodeType read FUserRole write FUserRole;
    property BuyerUserID: UserIDType read FBuyerUserID write FBuyerUserID;
    property SellerUserID: UserIDType read FSellerUserID write FSellerUserID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property Item: ItemType read FItem write FItem;
    property DisputeReason: DisputeReasonCodeType read FDisputeReason write FDisputeReason;
    property DisputeExplanation: DisputeExplanationCodeType read FDisputeExplanation write FDisputeExplanation;
    property DisputeCreditEligibility: DisputeCreditEligibilityCodeType read FDisputeCreditEligibility write FDisputeCreditEligibility;
    property DisputeCreatedTime: TXSDateTime read FDisputeCreatedTime write FDisputeCreatedTime;
    property DisputeModifiedTime: TXSDateTime read FDisputeModifiedTime write FDisputeModifiedTime;
    property DisputeResolution: DisputeResolutionType read FDisputeResolution write FDisputeResolution;
    property DisputeMessage: DisputeMessageType read FDisputeMessage write FDisputeMessage;
    property Escalation: Boolean read FEscalation write FEscalation;
    property PurchaseProtection: Boolean read FPurchaseProtection write FPurchaseProtection;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressProductType = class(TRemotable)
  private
    FTitle: WideString;
    FMinPrice: AmountType;
    FMaxPrice: AmountType;
    FStockPhotoURL: WideString;
    FItemCount: Integer;
    FExternalProductID: ExternalProductIDType;
    FProductReferenceID: Int64;
    FItemSpecifics: NameValueListArrayType;
    FDetailsURL: WideString;
  public
    destructor Destroy; override;
  published
    property Title: WideString read FTitle write FTitle;
    property MinPrice: AmountType read FMinPrice write FMinPrice;
    property MaxPrice: AmountType read FMaxPrice write FMaxPrice;
    property StockPhotoURL: WideString read FStockPhotoURL write FStockPhotoURL;
    property ItemCount: Integer read FItemCount write FItemCount;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
    property ProductReferenceID: Int64 read FProductReferenceID write FProductReferenceID;
    property ItemSpecifics: NameValueListArrayType read FItemSpecifics write FItemSpecifics;
    property DetailsURL: WideString read FDetailsURL write FDetailsURL;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  WishListEntryType = class(TRemotable)
  private
    FItem: ItemType;
    FProduct: ExpressProductType;
    FNotes: WideString;
    FCreationDate: TXSDateTime;
    FQuantityWanted: Integer;
    FQuantityReceived: Integer;
  public
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property Product: ExpressProductType read FProduct write FProduct;
    property Notes: WideString read FNotes write FNotes;
    property CreationDate: TXSDateTime read FCreationDate write FCreationDate;
    property QuantityWanted: Integer read FQuantityWanted write FQuantityWanted;
    property QuantityReceived: Integer read FQuantityReceived write FQuantityReceived;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  WishListType = class(TRemotable)
  private
    FWishListID: WideString;
    FWishListURL: WideString;
    FName_: WideString;
    FDescription: WideString;
    FFirstName: WideString;
    FLastName: WideString;
    FUserLocation: WideString;
    FWishListEntry: WishListEntryType;
  public
    destructor Destroy; override;
  published
    property WishListID: WideString read FWishListID write FWishListID;
    property WishListURL: WideString read FWishListURL write FWishListURL;
    property Name_: WideString read FName_ write FName_;
    property Description: WideString read FDescription write FDescription;
    property FirstName: WideString read FFirstName write FFirstName;
    property LastName: WideString read FLastName write FLastName;
    property UserLocation: WideString read FUserLocation write FUserLocation;
    property WishListEntry: WishListEntryType read FWishListEntry write FWishListEntry;
  end;

  FeedbackDetailArrayType = array of FeedbackDetailType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackDetailType = class(TRemotable)
  private
    FCommentingUser: UserIDType;
    FCommentingUserScore: Integer;
    FCommentText: WideString;
    FCommentTime: TXSDateTime;
    FCommentType: CommentTypeCodeType;
    FFeedbackResponse: WideString;
    FFollowup: WideString;
    FItemID: ItemIDType;
    FRole: TradingRoleCodeType;
    FItemTitle: WideString;
    FItemPrice: AmountType;
    FFeedbackID: WideString;
    FTransactionID: WideString;
    FCommentReplaced: Boolean;
    FResponseReplaced: Boolean;
    FFollowUpReplaced: Boolean;
    FCountable: Boolean;
  public
    destructor Destroy; override;
  published
    property CommentingUser: UserIDType read FCommentingUser write FCommentingUser;
    property CommentingUserScore: Integer read FCommentingUserScore write FCommentingUserScore;
    property CommentText: WideString read FCommentText write FCommentText;
    property CommentTime: TXSDateTime read FCommentTime write FCommentTime;
    property CommentType: CommentTypeCodeType read FCommentType write FCommentType;
    property FeedbackResponse: WideString read FFeedbackResponse write FFeedbackResponse;
    property Followup: WideString read FFollowup write FFollowup;
    property ItemID: ItemIDType read FItemID write FItemID;
    property Role: TradingRoleCodeType read FRole write FRole;
    property ItemTitle: WideString read FItemTitle write FItemTitle;
    property ItemPrice: AmountType read FItemPrice write FItemPrice;
    property FeedbackID: WideString read FFeedbackID write FFeedbackID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property CommentReplaced: Boolean read FCommentReplaced write FCommentReplaced;
    property ResponseReplaced: Boolean read FResponseReplaced write FResponseReplaced;
    property FollowUpReplaced: Boolean read FFollowUpReplaced write FFollowUpReplaced;
    property Countable: Boolean read FCountable write FCountable;
  end;

  FeedbackPeriodArrayType = array of FeedbackPeriodType;   { "urn:ebay:apis:eBLBaseComponents" }
  AverageRatingDetailArrayType = array of AverageRatingDetailsType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackSummaryType = class(TRemotable)
  private
    FBidRetractionFeedbackPeriodArray: FeedbackPeriodArrayType;
    FNegativeFeedbackPeriodArray: FeedbackPeriodArrayType;
    FNeutralFeedbackPeriodArray: FeedbackPeriodArrayType;
    FPositiveFeedbackPeriodArray: FeedbackPeriodArrayType;
    FTotalFeedbackPeriodArray: FeedbackPeriodArrayType;
    FNeutralCommentCountFromSuspendedUsers: Integer;
    FUniqueNegativeFeedbackCount: Integer;
    FUniquePositiveFeedbackCount: Integer;
    FSellerAverageRatingDetailArray: AverageRatingDetailArrayType;
  public
    destructor Destroy; override;
  published
    property BidRetractionFeedbackPeriodArray: FeedbackPeriodArrayType read FBidRetractionFeedbackPeriodArray write FBidRetractionFeedbackPeriodArray;
    property NegativeFeedbackPeriodArray: FeedbackPeriodArrayType read FNegativeFeedbackPeriodArray write FNegativeFeedbackPeriodArray;
    property NeutralFeedbackPeriodArray: FeedbackPeriodArrayType read FNeutralFeedbackPeriodArray write FNeutralFeedbackPeriodArray;
    property PositiveFeedbackPeriodArray: FeedbackPeriodArrayType read FPositiveFeedbackPeriodArray write FPositiveFeedbackPeriodArray;
    property TotalFeedbackPeriodArray: FeedbackPeriodArrayType read FTotalFeedbackPeriodArray write FTotalFeedbackPeriodArray;
    property NeutralCommentCountFromSuspendedUsers: Integer read FNeutralCommentCountFromSuspendedUsers write FNeutralCommentCountFromSuspendedUsers;
    property UniqueNegativeFeedbackCount: Integer read FUniqueNegativeFeedbackCount write FUniqueNegativeFeedbackCount;
    property UniquePositiveFeedbackCount: Integer read FUniquePositiveFeedbackCount write FUniquePositiveFeedbackCount;
    property SellerAverageRatingDetailArray: AverageRatingDetailArrayType read FSellerAverageRatingDetailArray write FSellerAverageRatingDetailArray;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FeedbackPeriodType = class(TRemotable)
  private
    FPeriodInDays: Integer;
    FCount: Integer;
  published
    property PeriodInDays: Integer read FPeriodInDays write FPeriodInDays;
    property Count: Integer read FCount write FCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AverageRatingDetailsType = class(TRemotable)
  private
    FRatingDetail: FeedbackRatingDetailCodeType;
    FRating: Double;
    FRatingCount: Integer;
  published
    property RatingDetail: FeedbackRatingDetailCodeType read FRatingDetail write FRatingDetail;
    property Rating: Double read FRating write FRating;
    property RatingCount: Integer read FRatingCount write FRatingCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  GetRecommendationsRequestContainerType = class(TRemotable)
  private
    FListingFlow: ListingFlowCodeType;
    FItem: ItemType;
    FRecommendationEngine: RecommendationEngineCodeType;
    FQuery: WideString;
    FCorrelationID: WideString;
    FDeletedField: WideString;
  public
    destructor Destroy; override;
  published
    property ListingFlow: ListingFlowCodeType read FListingFlow write FListingFlow;
    property Item: ItemType read FItem write FItem;
    property RecommendationEngine: RecommendationEngineCodeType read FRecommendationEngine write FRecommendationEngine;
    property Query: WideString read FQuery write FQuery;
    property CorrelationID: WideString read FCorrelationID write FCorrelationID;
    property DeletedField: WideString read FDeletedField write FDeletedField;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SIFFTASRecommendationsType = class(TRemotable)
  private
    FAttributeSetArray: AttributeSetArrayType;
  published
    property AttributeSetArray: AttributeSetArrayType read FAttributeSetArray write FAttributeSetArray;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AttributeRecommendationsType = class(TRemotable)
  private
    FAttributeSetArray: AttributeSetArrayType;
  published
    property AttributeSetArray: AttributeSetArrayType read FAttributeSetArray write FAttributeSetArray;
  end;

  ProductRecommendationsType = array of ProductInfoType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemSpecificsRecommendationsType = class(TRemotable)
  private
    FItemSpecifics: NameValueListArrayType;
  public
    destructor Destroy; override;
  published
    property ItemSpecifics: NameValueListArrayType read FItemSpecifics write FItemSpecifics;
  end;

  ListingTipArrayType = array of ListingTipType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingAnalyzerRecommendationsType = class(TRemotable)
  private
    FListingTipArray: ListingTipArrayType;
  public
    destructor Destroy; override;
  published
    property ListingTipArray: ListingTipArrayType read FListingTipArray write FListingTipArray;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingTipMessageType = class(TRemotable)
  private
    FListingTipMessageID: WideString;
    FShortMessage: WideString;
    FLongMessage: WideString;
    FHelpURLPath: WideString;
  published
    property ListingTipMessageID: WideString read FListingTipMessageID write FListingTipMessageID;
    property ShortMessage: WideString read FShortMessage write FShortMessage;
    property LongMessage: WideString read FLongMessage write FLongMessage;
    property HelpURLPath: WideString read FHelpURLPath write FHelpURLPath;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingTipFieldType = class(TRemotable)
  private
    FListingTipFieldID: WideString;
    FFieldTip: WideString;
    FCurrentFieldText: WideString;
    FCurrentFieldValue: WideString;
  published
    property ListingTipFieldID: WideString read FListingTipFieldID write FListingTipFieldID;
    property FieldTip: WideString read FFieldTip write FFieldTip;
    property CurrentFieldText: WideString read FCurrentFieldText write FCurrentFieldText;
    property CurrentFieldValue: WideString read FCurrentFieldValue write FCurrentFieldValue;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ListingTipType = class(TRemotable)
  private
    FListingTipID: WideString;
    FPriority: Integer;
    FMessage_: ListingTipMessageType;
    FField: ListingTipFieldType;
  public
    destructor Destroy; override;
  published
    property ListingTipID: WideString read FListingTipID write FListingTipID;
    property Priority: Integer read FPriority write FPriority;
    property Message_: ListingTipMessageType read FMessage_ write FMessage_;
    property Field: ListingTipFieldType read FField write FField;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductInfoType = class(TRemotable)
  private
    FAverageStartPrice: AmountType;
    FAverageSoldPrice: AmountType;
    FTitle: WideString;
    FproductInfoID: WideString;
  public
    destructor Destroy; override;
  published
    property AverageStartPrice: AmountType read FAverageStartPrice write FAverageStartPrice;
    property AverageSoldPrice: AmountType read FAverageSoldPrice write FAverageSoldPrice;
    property Title: WideString read FTitle write FTitle;
    property productInfoID: WideString read FproductInfoID write FproductInfoID stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PricingRecommendationsType = class(TRemotable)
  private
    FProductInfo: ProductInfoType;
  public
    destructor Destroy; override;
  published
    property ProductInfo: ProductInfoType read FProductInfo write FProductInfo;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  GetRecommendationsResponseContainerType = class(TRemotable)
  private
    FListingAnalyzerRecommendations: ListingAnalyzerRecommendationsType;
    FSIFFTASRecommendations: SIFFTASRecommendationsType;
    FPricingRecommendations: PricingRecommendationsType;
    FAttributeRecommendations: AttributeRecommendationsType;
    FProductRecommendations: ProductRecommendationsType;
    FCorrelationID: WideString;
    FItemSpecificsRecommendations: ItemSpecificsRecommendationsType;
  public
    destructor Destroy; override;
  published
    property ListingAnalyzerRecommendations: ListingAnalyzerRecommendationsType read FListingAnalyzerRecommendations write FListingAnalyzerRecommendations;
    property SIFFTASRecommendations: SIFFTASRecommendationsType read FSIFFTASRecommendations write FSIFFTASRecommendations;
    property PricingRecommendations: PricingRecommendationsType read FPricingRecommendations write FPricingRecommendations;
    property AttributeRecommendations: AttributeRecommendationsType read FAttributeRecommendations write FAttributeRecommendations;
    property ProductRecommendations: ProductRecommendationsType read FProductRecommendations write FProductRecommendations;
    property CorrelationID: WideString read FCorrelationID write FCorrelationID;
    property ItemSpecificsRecommendations: ItemSpecificsRecommendationsType read FItemSpecificsRecommendations write FItemSpecificsRecommendations;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginatedTransactionArrayType = class(TRemotable)
  private
    FTransactionArray: TransactionArrayType;
    FPaginationResult: PaginationResultType;
  public
    destructor Destroy; override;
  published
    property TransactionArray: TransactionArrayType read FTransactionArray write FTransactionArray;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
  end;

  BidderDetailArrayType = array of BidderDetailType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LiveAuctionBidType = class(TRemotable)
  private
    FRequestedBiddingLimit: AmountType;
    FBidderStatus: BidderStatusCodeType;
    FApprovedBiddingLimit: AmountType;
    FDeclinedComment: WideString;
  public
    destructor Destroy; override;
  published
    property RequestedBiddingLimit: AmountType read FRequestedBiddingLimit write FRequestedBiddingLimit;
    property BidderStatus: BidderStatusCodeType read FBidderStatus write FBidderStatus;
    property ApprovedBiddingLimit: AmountType read FApprovedBiddingLimit write FApprovedBiddingLimit;
    property DeclinedComment: WideString read FDeclinedComment write FDeclinedComment;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidderDetailType = class(TRemotable)
  private
    FUserID: UserIDType;
    FEmail: WideString;
    FFeedbackScore: Integer;
    FUniqueNegativeFeedbackCount: Integer;
    FUniquePositiveFeedbackCount: Integer;
    FLiveAuctionBidResult: LiveAuctionBidType;
  public
    destructor Destroy; override;
  published
    property UserID: UserIDType read FUserID write FUserID;
    property Email: WideString read FEmail write FEmail;
    property FeedbackScore: Integer read FFeedbackScore write FFeedbackScore;
    property UniqueNegativeFeedbackCount: Integer read FUniqueNegativeFeedbackCount write FUniqueNegativeFeedbackCount;
    property UniquePositiveFeedbackCount: Integer read FUniquePositiveFeedbackCount write FUniquePositiveFeedbackCount;
    property LiveAuctionBidResult: LiveAuctionBidType read FLiveAuctionBidResult write FLiveAuctionBidResult;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ScheduleType = class(TRemotable)
  private
    FScheduleID: Integer;
    FScheduleTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property ScheduleID: Integer read FScheduleID write FScheduleID;
    property ScheduleTime: TXSDateTime read FScheduleTime write FScheduleTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  LiveAuctionCatalogType = class(TRemotable)
  private
    FUserCatalogID: Integer;
    FCatalogName: WideString;
    FSchedule: ScheduleType;
  public
    destructor Destroy; override;
  published
    property UserCatalogID: Integer read FUserCatalogID write FUserCatalogID;
    property CatalogName: WideString read FCatalogName write FCatalogName;
    property Schedule: ScheduleType read FSchedule write FSchedule;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ASQPreferencesType = class(TRemotable)
  private
    FResetDefaultSubjects: Boolean;
    FSubject: WideString;
  published
    property ResetDefaultSubjects: Boolean read FResetDefaultSubjects write FResetDefaultSubjects;
    property Subject: WideString read FSubject write FSubject;
  end;

  MyMessagesAlertArrayType = array of MyMessagesAlertType;   { "urn:ebay:apis:eBLBaseComponents" }
  MyMessagesMessageArrayType = array of MyMessagesMessageType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesFolderSummaryType = class(TRemotable)
  private
    FFolderID: Int64;
    FFolderName: WideString;
    FNewAlertCount: Integer;
    FNewMessageCount: Integer;
    FTotalAlertCount: Integer;
    FTotalMessageCount: Integer;
  published
    property FolderID: Int64 read FFolderID write FFolderID;
    property FolderName: WideString read FFolderName write FFolderName;
    property NewAlertCount: Integer read FNewAlertCount write FNewAlertCount;
    property NewMessageCount: Integer read FNewMessageCount write FNewMessageCount;
    property TotalAlertCount: Integer read FTotalAlertCount write FTotalAlertCount;
    property TotalMessageCount: Integer read FTotalMessageCount write FTotalMessageCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesSummaryType = class(TRemotable)
  private
    FFolderSummary: MyMessagesFolderSummaryType;
    FNewAlertCount: Integer;
    FNewMessageCount: Integer;
    FUnresolvedAlertCount: Integer;
    FFlaggedMessageCount: Integer;
    FTotalAlertCount: Integer;
    FTotalMessageCount: Integer;
  public
    destructor Destroy; override;
  published
    property FolderSummary: MyMessagesFolderSummaryType read FFolderSummary write FFolderSummary;
    property NewAlertCount: Integer read FNewAlertCount write FNewAlertCount;
    property NewMessageCount: Integer read FNewMessageCount write FNewMessageCount;
    property UnresolvedAlertCount: Integer read FUnresolvedAlertCount write FUnresolvedAlertCount;
    property FlaggedMessageCount: Integer read FFlaggedMessageCount write FFlaggedMessageCount;
    property TotalAlertCount: Integer read FTotalAlertCount write FTotalAlertCount;
    property TotalMessageCount: Integer read FTotalMessageCount write FTotalMessageCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesResponseDetailsType = class(TRemotable)
  private
    FResponseEnabled: Boolean;
    FResponseURL: WideString;
    FUserResponseDate: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property ResponseEnabled: Boolean read FResponseEnabled write FResponseEnabled;
    property ResponseURL: WideString read FResponseURL write FResponseURL;
    property UserResponseDate: TXSDateTime read FUserResponseDate write FUserResponseDate;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesForwardDetailsType = class(TRemotable)
  private
    FUserForwardDate: TXSDateTime;
    FForwardMessageEncoding: WideString;
  public
    destructor Destroy; override;
  published
    property UserForwardDate: TXSDateTime read FUserForwardDate write FUserForwardDate;
    property ForwardMessageEncoding: WideString read FForwardMessageEncoding write FForwardMessageEncoding;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesFolderType = class(TRemotable)
  private
    FFolderID: Int64;
    FFolderName: WideString;
  published
    property FolderID: Int64 read FFolderID write FFolderID;
    property FolderName: WideString read FFolderName write FFolderName;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesAlertType = class(TRemotable)
  private
    FSender: WideString;
    FRecipientUserID: WideString;
    FSubject: WideString;
    FPriority: WideString;
    FAlertID: MyMessagesAlertIDType;
    FExternalAlertID: WideString;
    FContentType: WideString;
    FText: WideString;
    FResolutionStatus: MyMessagesAlertResolutionStatusCode;
    FRead_: Boolean;
    FCreationDate: TXSDateTime;
    FReceiveDate: TXSDateTime;
    FExpirationDate: TXSDateTime;
    FResolutionDate: TXSDateTime;
    FLastReadDate: TXSDateTime;
    FItemID: ItemIDType;
    FIsTimedResolution: Boolean;
    FActionURL: WideString;
    FResponseDetails: MyMessagesResponseDetailsType;
    FForwardDetails: MyMessagesForwardDetailsType;
    FFolder: MyMessagesFolderType;
  public
    destructor Destroy; override;
  published
    property Sender: WideString read FSender write FSender;
    property RecipientUserID: WideString read FRecipientUserID write FRecipientUserID;
    property Subject: WideString read FSubject write FSubject;
    property Priority: WideString read FPriority write FPriority;
    property AlertID: MyMessagesAlertIDType read FAlertID write FAlertID;
    property ExternalAlertID: WideString read FExternalAlertID write FExternalAlertID;
    property ContentType: WideString read FContentType write FContentType;
    property Text: WideString read FText write FText;
    property ResolutionStatus: MyMessagesAlertResolutionStatusCode read FResolutionStatus write FResolutionStatus;
    property Read_: Boolean read FRead_ write FRead_;
    property CreationDate: TXSDateTime read FCreationDate write FCreationDate;
    property ReceiveDate: TXSDateTime read FReceiveDate write FReceiveDate;
    property ExpirationDate: TXSDateTime read FExpirationDate write FExpirationDate;
    property ResolutionDate: TXSDateTime read FResolutionDate write FResolutionDate;
    property LastReadDate: TXSDateTime read FLastReadDate write FLastReadDate;
    property ItemID: ItemIDType read FItemID write FItemID;
    property IsTimedResolution: Boolean read FIsTimedResolution write FIsTimedResolution;
    property ActionURL: WideString read FActionURL write FActionURL;
    property ResponseDetails: MyMessagesResponseDetailsType read FResponseDetails write FResponseDetails;
    property ForwardDetails: MyMessagesForwardDetailsType read FForwardDetails write FForwardDetails;
    property Folder: MyMessagesFolderType read FFolder write FFolder;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyMessagesMessageType = class(TRemotable)
  private
    FSender: WideString;
    FRecipientUserID: WideString;
    FSendToName: WideString;
    FSubject: WideString;
    FMessageID: MyMessagesMessageIDType;
    FExternalMessageID: WideString;
    FContentType: WideString;
    FText: WideString;
    FFlagged: Boolean;
    FRead_: Boolean;
    FCreationDate: TXSDateTime;
    FReceiveDate: TXSDateTime;
    FExpirationDate: TXSDateTime;
    FItemID: ItemIDType;
    FResponseDetails: MyMessagesResponseDetailsType;
    FForwardDetails: MyMessagesForwardDetailsType;
    FFolder: MyMessagesFolderType;
  public
    destructor Destroy; override;
  published
    property Sender: WideString read FSender write FSender;
    property RecipientUserID: WideString read FRecipientUserID write FRecipientUserID;
    property SendToName: WideString read FSendToName write FSendToName;
    property Subject: WideString read FSubject write FSubject;
    property MessageID: MyMessagesMessageIDType read FMessageID write FMessageID;
    property ExternalMessageID: WideString read FExternalMessageID write FExternalMessageID;
    property ContentType: WideString read FContentType write FContentType;
    property Text: WideString read FText write FText;
    property Flagged: Boolean read FFlagged write FFlagged;
    property Read_: Boolean read FRead_ write FRead_;
    property CreationDate: TXSDateTime read FCreationDate write FCreationDate;
    property ReceiveDate: TXSDateTime read FReceiveDate write FReceiveDate;
    property ExpirationDate: TXSDateTime read FExpirationDate write FExpirationDate;
    property ItemID: ItemIDType read FItemID write FItemID;
    property ResponseDetails: MyMessagesResponseDetailsType read FResponseDetails write FResponseDetails;
    property ForwardDetails: MyMessagesForwardDetailsType read FForwardDetails write FForwardDetails;
    property Folder: MyMessagesFolderType read FFolder write FFolder;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemListCustomizationType = class(TRemotable)
  private
    FInclude: Boolean;
    FListingType: ListingTypeCodeType;
    FSort: ItemSortTypeCodeType;
    FDurationInDays: Integer;
    FIncludeNotes: Boolean;
    FPagination: PaginationType;
  public
    destructor Destroy; override;
  published
    property Include: Boolean read FInclude write FInclude;
    property ListingType: ListingTypeCodeType read FListingType write FListingType;
    property Sort: ItemSortTypeCodeType read FSort write FSort;
    property DurationInDays: Integer read FDurationInDays write FDurationInDays;
    property IncludeNotes: Boolean read FIncludeNotes write FIncludeNotes;
    property Pagination: PaginationType read FPagination write FPagination;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBaySelectionType = class(TRemotable)
  private
    FInclude: Boolean;
    FSort: SortOrderCodeType;
    FMaxResults: Integer;
  published
    property Include: Boolean read FInclude write FInclude;
    property Sort: SortOrderCodeType read FSort write FSort;
    property MaxResults: Integer read FMaxResults write FMaxResults;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidAssistantListType = class(TRemotable)
  private
    FBidGroupID: Int64;
    FIncludeNotes: Boolean;
  published
    property BidGroupID: Int64 read FBidGroupID write FBidGroupID;
    property IncludeNotes: Boolean read FIncludeNotes write FIncludeNotes;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BuyingSummaryType = class(TRemotable)
  private
    FBiddingCount: Integer;
    FWinningCount: Integer;
    FTotalWinningCost: AmountType;
    FWonCount: Integer;
    FTotalWonCost: AmountType;
    FWonDurationInDays: Integer;
    FBestOfferCount: Integer;
  public
    destructor Destroy; override;
  published
    property BiddingCount: Integer read FBiddingCount write FBiddingCount;
    property WinningCount: Integer read FWinningCount write FWinningCount;
    property TotalWinningCost: AmountType read FTotalWinningCost write FTotalWinningCost;
    property WonCount: Integer read FWonCount write FWonCount;
    property TotalWonCost: AmountType read FTotalWonCost write FTotalWonCost;
    property WonDurationInDays: Integer read FWonDurationInDays write FWonDurationInDays;
    property BestOfferCount: Integer read FBestOfferCount write FBestOfferCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginatedItemArrayType = class(TRemotable)
  private
    FItemArray: ItemArrayType;
    FPaginationResult: PaginationResultType;
  public
    destructor Destroy; override;
  published
    property ItemArray: ItemArrayType read FItemArray write FItemArray;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
  end;

  BidGroupArrayType = array of BidGroupType;    { "urn:ebay:apis:eBLBaseComponents" }
  OrderTransactionArrayType = array of OrderTransactionType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaginatedOrderTransactionArrayType = class(TRemotable)
  private
    FOrderTransactionArray: OrderTransactionArrayType;
    FPaginationResult: PaginationResultType;
  public
    destructor Destroy; override;
  published
    property OrderTransactionArray: OrderTransactionArrayType read FOrderTransactionArray write FOrderTransactionArray;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  OrderTransactionType = class(TRemotable)
  private
    FOrder: OrderType;
    FTransaction: TransactionType;
  public
    destructor Destroy; override;
  published
    property Order: OrderType read FOrder write FOrder;
    property Transaction: TransactionType read FTransaction write FTransaction;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSearchType = class(TRemotable)
  private
    FSearchName: WideString;
    FSearchQuery: WideString;
  published
    property SearchName: WideString read FSearchName write FSearchName;
    property SearchQuery: WideString read FSearchQuery write FSearchQuery;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSearchListType = class(TRemotable)
  private
    FTotalAvailable: Integer;
    FFavoriteSearch: MyeBayFavoriteSearchType;
  public
    destructor Destroy; override;
  published
    property TotalAvailable: Integer read FTotalAvailable write FTotalAvailable;
    property FavoriteSearch: MyeBayFavoriteSearchType read FFavoriteSearch write FFavoriteSearch;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSellerType = class(TRemotable)
  private
    FUserID: WideString;
    FStoreName: WideString;
  published
    property UserID: WideString read FUserID write FUserID;
    property StoreName: WideString read FStoreName write FStoreName;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBayFavoriteSellerListType = class(TRemotable)
  private
    FTotalAvailable: Integer;
    FFavoriteSeller: MyeBayFavoriteSellerType;
  public
    destructor Destroy; override;
  published
    property TotalAvailable: Integer read FTotalAvailable write FTotalAvailable;
    property FavoriteSeller: MyeBayFavoriteSellerType read FFavoriteSeller write FFavoriteSeller;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidGroupItemType = class(TRemotable)
  private
    FItem: ItemType;
    FBidGroupItemStatus: BidGroupItemStatusCodeType;
    FMaxBidAmount: AmountType;
  public
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property BidGroupItemStatus: BidGroupItemStatusCodeType read FBidGroupItemStatus write FBidGroupItemStatus;
    property MaxBidAmount: AmountType read FMaxBidAmount write FMaxBidAmount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidGroupType = class(TRemotable)
  private
    FBidGroupItem: BidGroupItemType;
    FBidGroupID: Int64;
    FBidGroupName: WideString;
    FBidGroupStatus: BidGroupStatusCodeType;
  public
    destructor Destroy; override;
  published
    property BidGroupItem: BidGroupItemType read FBidGroupItem write FBidGroupItem;
    property BidGroupID: Int64 read FBidGroupID write FBidGroupID;
    property BidGroupName: WideString read FBidGroupName write FBidGroupName;
    property BidGroupStatus: BidGroupStatusCodeType read FBidGroupStatus write FBidGroupStatus;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReminderCustomizationType = class(TRemotable)
  private
    FDurationInDays: Integer;
    FInclude: Boolean;
  published
    property DurationInDays: Integer read FDurationInDays write FDurationInDays;
    property Include: Boolean read FInclude write FInclude;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RemindersType = class(TRemotable)
  private
    FPaymentToSendCount: Integer;
    FFeedbackToReceiveCount: Integer;
    FFeedbackToSendCount: Integer;
    FOutbidCount: Integer;
    FPaymentToReceiveCount: Integer;
    FSecondChanceOfferCount: Integer;
    FShippingNeededCount: Integer;
    FRelistingNeededCount: Integer;
    FTotalNewLeadsCount: Integer;
    FDocsForCCProcessingToSendCount: Integer;
    FRTEToProcessCount: Integer;
    FItemReceiptToConfirmCount: Integer;
    FRefundOnHoldCount: Integer;
    FRefundCancelledCount: Integer;
    FShippingDetailsToBeProvidedCount: Integer;
    FItemReceiptConfirmationToReceiveCount: Integer;
    FRefundInitiatedCount: Integer;
    FPendingRTERequestCount: Integer;
    FDeclinedRTERequestCount: Integer;
  published
    property PaymentToSendCount: Integer read FPaymentToSendCount write FPaymentToSendCount;
    property FeedbackToReceiveCount: Integer read FFeedbackToReceiveCount write FFeedbackToReceiveCount;
    property FeedbackToSendCount: Integer read FFeedbackToSendCount write FFeedbackToSendCount;
    property OutbidCount: Integer read FOutbidCount write FOutbidCount;
    property PaymentToReceiveCount: Integer read FPaymentToReceiveCount write FPaymentToReceiveCount;
    property SecondChanceOfferCount: Integer read FSecondChanceOfferCount write FSecondChanceOfferCount;
    property ShippingNeededCount: Integer read FShippingNeededCount write FShippingNeededCount;
    property RelistingNeededCount: Integer read FRelistingNeededCount write FRelistingNeededCount;
    property TotalNewLeadsCount: Integer read FTotalNewLeadsCount write FTotalNewLeadsCount;
    property DocsForCCProcessingToSendCount: Integer read FDocsForCCProcessingToSendCount write FDocsForCCProcessingToSendCount;
    property RTEToProcessCount: Integer read FRTEToProcessCount write FRTEToProcessCount;
    property ItemReceiptToConfirmCount: Integer read FItemReceiptToConfirmCount write FItemReceiptToConfirmCount;
    property RefundOnHoldCount: Integer read FRefundOnHoldCount write FRefundOnHoldCount;
    property RefundCancelledCount: Integer read FRefundCancelledCount write FRefundCancelledCount;
    property ShippingDetailsToBeProvidedCount: Integer read FShippingDetailsToBeProvidedCount write FShippingDetailsToBeProvidedCount;
    property ItemReceiptConfirmationToReceiveCount: Integer read FItemReceiptConfirmationToReceiveCount write FItemReceiptConfirmationToReceiveCount;
    property RefundInitiatedCount: Integer read FRefundInitiatedCount write FRefundInitiatedCount;
    property PendingRTERequestCount: Integer read FPendingRTERequestCount write FPendingRTERequestCount;
    property DeclinedRTERequestCount: Integer read FDeclinedRTERequestCount write FDeclinedRTERequestCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellingSummaryType = class(TRemotable)
  private
    FActiveAuctionCount: Integer;
    FAuctionSellingCount: Integer;
    FAuctionBidCount: Integer;
    FTotalAuctionSellingValue: AmountType;
    FTotalSoldCount: Integer;
    FTotalSoldValue: AmountType;
    FSoldDurationInDays: Integer;
  public
    destructor Destroy; override;
  published
    property ActiveAuctionCount: Integer read FActiveAuctionCount write FActiveAuctionCount;
    property AuctionSellingCount: Integer read FAuctionSellingCount write FAuctionSellingCount;
    property AuctionBidCount: Integer read FAuctionBidCount write FAuctionBidCount;
    property TotalAuctionSellingValue: AmountType read FTotalAuctionSellingValue write FTotalAuctionSellingValue;
    property TotalSoldCount: Integer read FTotalSoldCount write FTotalSoldCount;
    property TotalSoldValue: AmountType read FTotalSoldValue write FTotalSoldValue;
    property SoldDurationInDays: Integer read FSoldDurationInDays write FSoldDurationInDays;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MyeBaySellingSummaryType = class(TRemotable)
  private
    FActiveAuctionCount: Integer;
    FAuctionSellingCount: Integer;
    FAuctionBidCount: Integer;
    FTotalAuctionSellingValue: AmountType;
    FTotalSoldCount: Integer;
    FTotalSoldValue: AmountType;
    FSoldDurationInDays: Integer;
    FClassifiedAdCount: Integer;
    FTotalLeadCount: Integer;
    FClassifiedAdOfferCount: Integer;
    FTotalListingsWithLeads: Integer;
  public
    destructor Destroy; override;
  published
    property ActiveAuctionCount: Integer read FActiveAuctionCount write FActiveAuctionCount;
    property AuctionSellingCount: Integer read FAuctionSellingCount write FAuctionSellingCount;
    property AuctionBidCount: Integer read FAuctionBidCount write FAuctionBidCount;
    property TotalAuctionSellingValue: AmountType read FTotalAuctionSellingValue write FTotalAuctionSellingValue;
    property TotalSoldCount: Integer read FTotalSoldCount write FTotalSoldCount;
    property TotalSoldValue: AmountType read FTotalSoldValue write FTotalSoldValue;
    property SoldDurationInDays: Integer read FSoldDurationInDays write FSoldDurationInDays;
    property ClassifiedAdCount: Integer read FClassifiedAdCount write FClassifiedAdCount;
    property TotalLeadCount: Integer read FTotalLeadCount write FTotalLeadCount;
    property ClassifiedAdOfferCount: Integer read FClassifiedAdOfferCount write FClassifiedAdOfferCount;
    property TotalListingsWithLeads: Integer read FTotalListingsWithLeads write FTotalListingsWithLeads;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ApplicationDeliveryPreferencesType = class(TRemotable)
  private
    FApplicationURL: WideString;
    FApplicationEnable: EnableCodeType;
    FAlertEmail: WideString;
    FAlertEnable: EnableCodeType;
    FNotificationPayloadType: NotificationPayloadTypeCodeType;
    FDeviceType: DeviceTypeCodeType;
    FPayloadVersion: WideString;
  published
    property ApplicationURL: WideString read FApplicationURL write FApplicationURL;
    property ApplicationEnable: EnableCodeType read FApplicationEnable write FApplicationEnable;
    property AlertEmail: WideString read FAlertEmail write FAlertEmail;
    property AlertEnable: EnableCodeType read FAlertEnable write FAlertEnable;
    property NotificationPayloadType: NotificationPayloadTypeCodeType read FNotificationPayloadType write FNotificationPayloadType;
    property DeviceType: DeviceTypeCodeType read FDeviceType write FDeviceType;
    property PayloadVersion: WideString read FPayloadVersion write FPayloadVersion;
  end;

  NotificationEnableArrayType = array of NotificationEnableType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationEventPropertyType = class(TRemotable)
  private
    FEventType: NotificationEventTypeCodeType;
    FName_: NotificationEventPropertyNameCodeType;
    FValue: WideString;
  published
    property EventType: NotificationEventTypeCodeType read FEventType write FEventType;
    property Name_: NotificationEventPropertyNameCodeType read FName_ write FName_;
    property Value: WideString read FValue write FValue;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationEnableType = class(TRemotable)
  private
    FEventType: NotificationEventTypeCodeType;
    FEventEnable: EnableCodeType;
  published
    property EventType: NotificationEventTypeCodeType read FEventType write FEventType;
    property EventEnable: EnableCodeType read FEventEnable write FEventEnable;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SMSSubscriptionType = class(TRemotable)
  private
    FSMSPhone: WideString;
    FUserStatus: SMSSubscriptionUserStatusCodeType;
    FCarrierID: WirelessCarrierIDCodeType;
    FErrorCode: SMSSubscriptionErrorCodeCodeType;
    FItemToUnsubscribe: ItemIDType;
  published
    property SMSPhone: WideString read FSMSPhone write FSMSPhone;
    property UserStatus: SMSSubscriptionUserStatusCodeType read FUserStatus write FUserStatus;
    property CarrierID: WirelessCarrierIDCodeType read FCarrierID write FCarrierID;
    property ErrorCode: SMSSubscriptionErrorCodeCodeType read FErrorCode write FErrorCode;
    property ItemToUnsubscribe: ItemIDType read FItemToUnsubscribe write FItemToUnsubscribe;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SummaryEventScheduleType = class(TRemotable)
  private
    FEventType: NotificationEventTypeCodeType;
    FSummaryPeriod: SummaryWindowPeriodCodeType;
    FFrequency: SummaryFrequencyCodeType;
  published
    property EventType: NotificationEventTypeCodeType read FEventType write FEventType;
    property SummaryPeriod: SummaryWindowPeriodCodeType read FSummaryPeriod write FSummaryPeriod;
    property Frequency: SummaryFrequencyCodeType read FFrequency write FFrequency;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationUserDataType = class(TRemotable)
  private
    FSMSSubscription: SMSSubscriptionType;
    FSummarySchedule: SummaryEventScheduleType;
  public
    destructor Destroy; override;
  published
    property SMSSubscription: SMSSubscriptionType read FSMSSubscription write FSMSSubscription;
    property SummarySchedule: SummaryEventScheduleType read FSummarySchedule write FSummarySchedule;
  end;

  NotificationDetailsArrayType = array of NotificationDetailsType;   { "urn:ebay:apis:eBLBaseComponents" }
  MarkUpMarkDownHistoryType = array of MarkUpMarkDownEventType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationStatisticsType = class(TRemotable)
  private
    FDeliveredCount: Integer;
    FQueuedNewCount: Integer;
    FQueuedPendingCount: Integer;
    FExpiredCount: Integer;
    FErrorCount: Integer;
  published
    property DeliveredCount: Integer read FDeliveredCount write FDeliveredCount;
    property QueuedNewCount: Integer read FQueuedNewCount write FQueuedNewCount;
    property QueuedPendingCount: Integer read FQueuedPendingCount write FQueuedPendingCount;
    property ExpiredCount: Integer read FExpiredCount write FExpiredCount;
    property ErrorCount: Integer read FErrorCount write FErrorCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  NotificationDetailsType = class(TRemotable)
  private
    FDeliveryURL: WideString;
    FReferenceID: WideString;
    FExpirationTime: TXSDateTime;
    FType_: NotificationEventTypeCodeType;
    FRetries: Integer;
    FDeliveryStatus: NotificationEventStateCodeType;
    FNextRetryTime: TXSDateTime;
    FDeliveryTime: TXSDateTime;
    FErrorMessage: WideString;
  public
    destructor Destroy; override;
  published
    property DeliveryURL: WideString read FDeliveryURL write FDeliveryURL;
    property ReferenceID: WideString read FReferenceID write FReferenceID;
    property ExpirationTime: TXSDateTime read FExpirationTime write FExpirationTime;
    property Type_: NotificationEventTypeCodeType read FType_ write FType_;
    property Retries: Integer read FRetries write FRetries;
    property DeliveryStatus: NotificationEventStateCodeType read FDeliveryStatus write FDeliveryStatus;
    property NextRetryTime: TXSDateTime read FNextRetryTime write FNextRetryTime;
    property DeliveryTime: TXSDateTime read FDeliveryTime write FDeliveryTime;
    property ErrorMessage: WideString read FErrorMessage write FErrorMessage;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  MarkUpMarkDownEventType = class(TRemotable)
  private
    FType_: MarkUpMarkDownEventTypeCodeType;
    FTime: TXSDateTime;
    FReason: WideString;
  public
    destructor Destroy; override;
  published
    property Type_: MarkUpMarkDownEventTypeCodeType read FType_ write FType_;
    property Time: TXSDateTime read FTime write FTime;
    property Reason: WideString read FReason write FReason;
  end;

  ItemTransactionIDArrayType = array of ItemTransactionIDType;   { "urn:ebay:apis:eBLBaseComponents" }
  OrderIDArrayType = array of OrderIDType;      { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemTransactionIDType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FTransactionID: WideString;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
  end;

  OrderArrayType = array of OrderType;          { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureManagerPictureDisplayType = class(TRemotable)
  private
    FDisplayType: PictureManagerPictureDisplayTypeCodeType;
    FURL: WideString;
    FSize: Integer;
    FHeight: Integer;
    FWidth: Integer;
  published
    property DisplayType: PictureManagerPictureDisplayTypeCodeType read FDisplayType write FDisplayType;
    property URL: WideString read FURL write FURL;
    property Size: Integer read FSize write FSize;
    property Height: Integer read FHeight write FHeight;
    property Width: Integer read FWidth write FWidth;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureManagerPictureType = class(TRemotable)
  private
    FPictureURL: WideString;
    FName_: WideString;
    FDate: TXSDateTime;
    FDisplayFormat: PictureManagerPictureDisplayType;
  public
    destructor Destroy; override;
  published
    property PictureURL: WideString read FPictureURL write FPictureURL;
    property Name_: WideString read FName_ write FName_;
    property Date: TXSDateTime read FDate write FDate;
    property DisplayFormat: PictureManagerPictureDisplayType read FDisplayFormat write FDisplayFormat;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureManagerFolderType = class(TRemotable)
  private
    FFolderID: Integer;
    FName_: WideString;
    FPicture: PictureManagerPictureType;
  public
    destructor Destroy; override;
  published
    property FolderID: Integer read FFolderID write FFolderID;
    property Name_: WideString read FName_ write FName_;
    property Picture: PictureManagerPictureType read FPicture write FPicture;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureManagerDetailsType = class(TRemotable)
  private
    FSubscriptionLevel: PictureManagerSubscriptionLevelCodeType;
    FStorageUsed: Integer;
    FTotalStorageAvailable: Integer;
    FKeepOriginal: Boolean;
    FWatermarkEPS: Boolean;
    FWatermarkUserID: Boolean;
    FFolder: PictureManagerFolderType;
  public
    destructor Destroy; override;
  published
    property SubscriptionLevel: PictureManagerSubscriptionLevelCodeType read FSubscriptionLevel write FSubscriptionLevel;
    property StorageUsed: Integer read FStorageUsed write FStorageUsed;
    property TotalStorageAvailable: Integer read FTotalStorageAvailable write FTotalStorageAvailable;
    property KeepOriginal: Boolean read FKeepOriginal write FKeepOriginal;
    property WatermarkEPS: Boolean read FWatermarkEPS write FWatermarkEPS;
    property WatermarkUserID: Boolean read FWatermarkUserID write FWatermarkUserID;
    property Folder: PictureManagerFolderType read FFolder write FFolder;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureManagerSubscriptionType = class(TRemotable)
  private
    FSubscriptionLevel: PictureManagerSubscriptionLevelCodeType;
    FFee: AmountType;
    FStorageSize: Integer;
  public
    destructor Destroy; override;
  published
    property SubscriptionLevel: PictureManagerSubscriptionLevelCodeType read FSubscriptionLevel write FSubscriptionLevel;
    property Fee: AmountType read FFee write FFee;
    property StorageSize: Integer read FStorageSize write FStorageSize;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchAttributesType = class(TRemotable)
  private
    FAttributeID: Integer;
    FDateSpecifier: DateSpecifierCodeType;
    FRangeSpecifier: RangeCodeType;
    FValueList: ValType;
  public
    destructor Destroy; override;
  published
    property AttributeID: Integer read FAttributeID write FAttributeID;
    property DateSpecifier: DateSpecifierCodeType read FDateSpecifier write FDateSpecifier;
    property RangeSpecifier: RangeCodeType read FRangeSpecifier write FRangeSpecifier;
    property ValueList: ValType read FValueList write FValueList;
  end;

  CharacteristicSetIDsType = array of WideString;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductSearchType = class(TRemotable)
  private
    FProductSearchID: WideString;
    FAttributeSetID: Integer;
    FProductFinderID: Integer;
    FProductID: WideString;
    FSortAttributeID: Integer;
    FMaxChildrenPerFamily: Integer;
    FSearchAttributes: SearchAttributesType;
    FPagination: PaginationType;
    FAvailableItemsOnly: Boolean;
    FQueryKeywords: WideString;
    FCharacteristicSetIDs: CharacteristicSetIDsType;
    FProductReferenceID: WideString;
    FExternalProductID: ExternalProductIDType;
  public
    destructor Destroy; override;
  published
    property ProductSearchID: WideString read FProductSearchID write FProductSearchID;
    property AttributeSetID: Integer read FAttributeSetID write FAttributeSetID;
    property ProductFinderID: Integer read FProductFinderID write FProductFinderID;
    property ProductID: WideString read FProductID write FProductID;
    property SortAttributeID: Integer read FSortAttributeID write FSortAttributeID;
    property MaxChildrenPerFamily: Integer read FMaxChildrenPerFamily write FMaxChildrenPerFamily;
    property SearchAttributes: SearchAttributesType read FSearchAttributes write FSearchAttributes;
    property Pagination: PaginationType read FPagination write FPagination;
    property AvailableItemsOnly: Boolean read FAvailableItemsOnly write FAvailableItemsOnly;
    property QueryKeywords: WideString read FQueryKeywords write FQueryKeywords;
    property CharacteristicSetIDs: CharacteristicSetIDsType read FCharacteristicSetIDs write FCharacteristicSetIDs;
    property ProductReferenceID: WideString read FProductReferenceID write FProductReferenceID;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DataElementSetType = class(TRemotable)
  private
    FDataElement: WideString;
    FDataElementID: Integer;
    FattributeSetID: Integer;
  published
    property DataElement: WideString read FDataElement write FDataElement;
    property DataElementID: Integer read FDataElementID write FDataElementID;
    property attributeSetID: Integer read FattributeSetID write FattributeSetID stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductFinderConstraintType = class(TRemotable)
  private
    FDisplayName: WideString;
    FDisplayValue: WideString;
  published
    property DisplayName: WideString read FDisplayName write FDisplayName;
    property DisplayValue: WideString read FDisplayValue write FDisplayValue;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductType = class(TRemotable)
  private
    FCharacteristicsSet: CharacteristicsSetType;
    FDetailsURL: WideString;
    FNumItems: Integer;
    FMinPrice: AmountType;
    FMaxPrice: AmountType;
    FproductID: WideString;
    FstockPhotoURL: WideString;
    Ftitle: WideString;
  public
    destructor Destroy; override;
  published
    property CharacteristicsSet: CharacteristicsSetType read FCharacteristicsSet write FCharacteristicsSet;
    property DetailsURL: WideString read FDetailsURL write FDetailsURL;
    property NumItems: Integer read FNumItems write FNumItems;
    property MinPrice: AmountType read FMinPrice write FMinPrice;
    property MaxPrice: AmountType read FMaxPrice write FMaxPrice;
    property productID: WideString read FproductID write FproductID stored AS_ATTRIBUTE;
    property stockPhotoURL: WideString read FstockPhotoURL write FstockPhotoURL stored AS_ATTRIBUTE;
    property title: WideString read Ftitle write Ftitle stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductFamilyType = class(TRemotable)
  private
    FParentProduct: ProductType;
    FFamilyMembers: ProductType;
    FhasMoreChildren: Boolean;
  public
    destructor Destroy; override;
  published
    property ParentProduct: ProductType read FParentProduct write FParentProduct;
    property FamilyMembers: ProductType read FFamilyMembers write FFamilyMembers;
    property hasMoreChildren: Boolean read FhasMoreChildren write FhasMoreChildren stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ResponseAttributeSetType = class(TRemotable)
  private
    FApproximatePages: Integer;
    FAttributeSetID: Integer;
    FHasMore: Boolean;
    FProductFamilies: ProductFamilyType;
    FProductFinderConstraints: ProductFinderConstraintType;
    FTooManyMatchesFound: Boolean;
    FTotalProducts: Integer;
  public
    destructor Destroy; override;
  published
    property ApproximatePages: Integer read FApproximatePages write FApproximatePages;
    property AttributeSetID: Integer read FAttributeSetID write FAttributeSetID;
    property HasMore: Boolean read FHasMore write FHasMore;
    property ProductFamilies: ProductFamilyType read FProductFamilies write FProductFamilies;
    property ProductFinderConstraints: ProductFinderConstraintType read FProductFinderConstraints write FProductFinderConstraints;
    property TooManyMatchesFound: Boolean read FTooManyMatchesFound write FTooManyMatchesFound;
    property TotalProducts: Integer read FTotalProducts write FTotalProducts;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductSearchResultType = class(TRemotable)
  private
    FID: WideString;
    FNumProducts: WideString;
    FAttributeSet: ResponseAttributeSetType;
    FDisplayStockPhotos: Boolean;
  public
    destructor Destroy; override;
  published
    property ID: WideString read FID write FID;
    property NumProducts: WideString read FNumProducts write FNumProducts;
    property AttributeSet: ResponseAttributeSetType read FAttributeSet write FAttributeSet;
    property DisplayStockPhotos: Boolean read FDisplayStockPhotos write FDisplayStockPhotos;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ProductSearchPageType = class(TRemotable)
  private
    FSearchCharacteristicsSet: CharacteristicsSetType;
    FSearchType: CharacteristicsSearchCodeType;
    FSortCharacteristics: CharacteristicType;
    FDataElementSet: DataElementSetType;
  public
    destructor Destroy; override;
  published
    property SearchCharacteristicsSet: CharacteristicsSetType read FSearchCharacteristicsSet write FSearchCharacteristicsSet;
    property SearchType: CharacteristicsSearchCodeType read FSearchType write FSearchType;
    property SortCharacteristics: CharacteristicType read FSortCharacteristics write FSortCharacteristics;
    property DataElementSet: DataElementSetType read FDataElementSet write FDataElementSet;
  end;

  CharacteristicsSetProductHistogramType = array of HistogramEntryType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  HistogramEntryType = class(TRemotable)
  private
    FCount: Integer;
    Fid: WideString;
    Fname_: WideString;
  published
    property Count: Integer read FCount write FCount;
    property id: WideString read Fid write Fid stored AS_ATTRIBUTE;
    property name_: WideString read Fname_ write Fname_ stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReviewType = class(TRemotable)
  private
    FURL: WideString;
    FTitle: WideString;
    FRating: Integer;
    FText: WideString;
    FUserID: UserIDType;
    FCreationTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property URL: WideString read FURL write FURL;
    property Title: WideString read FTitle write FTitle;
    property Rating: Integer read FRating write FRating;
    property Text: WideString read FText write FText;
    property UserID: UserIDType read FUserID write FUserID;
    property CreationTime: TXSDateTime read FCreationTime write FCreationTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReviewDetailsType = class(TRemotable)
  private
    FAverageRating: Single;
    FReview: ReviewType;
  public
    destructor Destroy; override;
  published
    property AverageRating: Single read FAverageRating write FAverageRating;
    property Review: ReviewType read FReview write FReview;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CatalogProductType = class(TRemotable)
  private
    FTitle: WideString;
    FDetailsURL: WideString;
    FStockPhotoURL: WideString;
    FDisplayStockPhotos: Boolean;
    FItemCount: Integer;
    FExternalProductID: ExternalProductIDType;
    FProductReferenceID: Int64;
    FAttributeSetID: Integer;
    FItemSpecifics: NameValueListArrayType;
    FReviewCount: Integer;
    FReviewDetails: ReviewDetailsType;
  public
    destructor Destroy; override;
  published
    property Title: WideString read FTitle write FTitle;
    property DetailsURL: WideString read FDetailsURL write FDetailsURL;
    property StockPhotoURL: WideString read FStockPhotoURL write FStockPhotoURL;
    property DisplayStockPhotos: Boolean read FDisplayStockPhotos write FDisplayStockPhotos;
    property ItemCount: Integer read FItemCount write FItemCount;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
    property ProductReferenceID: Int64 read FProductReferenceID write FProductReferenceID;
    property AttributeSetID: Integer read FAttributeSetID write FAttributeSetID;
    property ItemSpecifics: NameValueListArrayType read FItemSpecifics write FItemSpecifics;
    property ReviewCount: Integer read FReviewCount write FReviewCount;
    property ReviewDetails: ReviewDetailsType read FReviewDetails write FReviewDetails;
  end;

  PromotionRuleArrayType = array of PromotionRuleType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionRuleType = class(TRemotable)
  private
    FPromotedStoreCategoryID: Int64;
    FPromotedeBayCategoryID: WideString;
    FPromotedKeywords: WideString;
    FReferringItemID: ItemIDType;
    FReferringStoreCategoryID: Int64;
    FReferringeBayCategoryID: WideString;
    FReferringKeywords: WideString;
    FPromotionScheme: PromotionSchemeCodeType;
    FPromotionMethod: PromotionMethodCodeType;
  published
    property PromotedStoreCategoryID: Int64 read FPromotedStoreCategoryID write FPromotedStoreCategoryID;
    property PromotedeBayCategoryID: WideString read FPromotedeBayCategoryID write FPromotedeBayCategoryID;
    property PromotedKeywords: WideString read FPromotedKeywords write FPromotedKeywords;
    property ReferringItemID: ItemIDType read FReferringItemID write FReferringItemID;
    property ReferringStoreCategoryID: Int64 read FReferringStoreCategoryID write FReferringStoreCategoryID;
    property ReferringeBayCategoryID: WideString read FReferringeBayCategoryID write FReferringeBayCategoryID;
    property ReferringKeywords: WideString read FReferringKeywords write FReferringKeywords;
    property PromotionScheme: PromotionSchemeCodeType read FPromotionScheme write FPromotionScheme;
    property PromotionMethod: PromotionMethodCodeType read FPromotionMethod write FPromotionMethod;
  end;

  PromotionalSaleArrayType = array of PromotionalSaleType;   { "urn:ebay:apis:eBLBaseComponents" }
  ItemIDArrayType = array of ItemIDType;        { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PromotionalSaleType = class(TRemotable)
  private
    FPromotionalSaleID: Int64;
    FPromotionalSaleName: WideString;
    FPromotionalSaleItemIDArray: ItemIDArrayType;
    FStatus: PromotionalSaleStatusCodeType;
    FDiscountType: DiscountCodeType;
    FDiscountValue: Double;
    FPromotionalSaleStartTime: TXSDateTime;
    FPromotionalSaleEndTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property PromotionalSaleID: Int64 read FPromotionalSaleID write FPromotionalSaleID;
    property PromotionalSaleName: WideString read FPromotionalSaleName write FPromotionalSaleName;
    property PromotionalSaleItemIDArray: ItemIDArrayType read FPromotionalSaleItemIDArray write FPromotionalSaleItemIDArray;
    property Status: PromotionalSaleStatusCodeType read FStatus write FStatus;
    property DiscountType: DiscountCodeType read FDiscountType write FDiscountType;
    property DiscountValue: Double read FDiscountValue write FDiscountValue;
    property PromotionalSaleStartTime: TXSDateTime read FPromotionalSaleStartTime write FPromotionalSaleStartTime;
    property PromotionalSaleEndTime: TXSDateTime read FPromotionalSaleEndTime write FPromotionalSaleEndTime;
  end;

  AuthenticationEntryArrayType = array of AuthenticationEntryType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AuthenticationEntryType = class(TRemotable)
  private
    FAcceptURL: WideString;
    FPrivacyPolicyURL: WideString;
    FRejectURL: WideString;
    FRuName: WideString;
    FTokenReturnMethod: TokenReturnMethodCodeType;
  published
    property AcceptURL: WideString read FAcceptURL write FAcceptURL;
    property PrivacyPolicyURL: WideString read FPrivacyPolicyURL write FPrivacyPolicyURL;
    property RejectURL: WideString read FRejectURL write FRejectURL;
    property RuName: WideString read FRuName write FRuName;
    property TokenReturnMethod: TokenReturnMethodCodeType read FTokenReturnMethod write FTokenReturnMethod;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PriceRangeFilterType = class(TRemotable)
  private
    FMaxPrice: AmountType;
    FMinPrice: AmountType;
  public
    destructor Destroy; override;
  published
    property MaxPrice: AmountType read FMaxPrice write FMaxPrice;
    property MinPrice: AmountType read FMinPrice write FMinPrice;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UserIdFilterType = class(TRemotable)
  private
    FExcludeSellers: UserIDType;
    FIncludeSellers: UserIDType;
  published
    property ExcludeSellers: UserIDType read FExcludeSellers write FExcludeSellers;
    property IncludeSellers: UserIDType read FIncludeSellers write FIncludeSellers;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchLocationFilterType = class(TRemotable)
  private
    FCountryCode: CountryCodeType;
    FItemLocation: ItemLocationCodeType;
    FSearchLocation: SearchLocationType;
    FCurrency: CurrencyCodeType;
  public
    destructor Destroy; override;
  published
    property CountryCode: CountryCodeType read FCountryCode write FCountryCode;
    property ItemLocation: ItemLocationCodeType read FItemLocation write FItemLocation;
    property SearchLocation: SearchLocationType read FSearchLocation write FSearchLocation;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchStoreFilterType = class(TRemotable)
  private
    FStoreName: WideString;
    FStoreSearch: StoreSearchCodeType;
  published
    property StoreName: WideString read FStoreName write FStoreName;
    property StoreSearch: StoreSearchCodeType read FStoreSearch write FStoreSearch;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchRequestType = class(TRemotable)
  private
    FProductFinderID: Integer;
    FSearchAttributes: SearchAttributesType;
  public
    destructor Destroy; override;
  published
    property ProductFinderID: Integer read FProductFinderID write FProductFinderID;
    property SearchAttributes: SearchAttributesType read FSearchAttributes write FSearchAttributes;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RequestCategoriesType = class(TRemotable)
  private
    FCategoriesOnly: Boolean;
    FMaxCategories: Integer;
    FMaxSubcategories: Integer;
    FLevels: Integer;
    FDemandData: Boolean;
  published
    property CategoriesOnly: Boolean read FCategoriesOnly write FCategoriesOnly;
    property MaxCategories: Integer read FMaxCategories write FMaxCategories;
    property MaxSubcategories: Integer read FMaxSubcategories write FMaxSubcategories;
    property Levels: Integer read FLevels write FLevels;
    property DemandData: Boolean read FDemandData write FDemandData;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidRangeType = class(TRemotable)
  private
    FMinimumBidCount: Integer;
    FMaximumBidCount: Integer;
  published
    property MinimumBidCount: Integer read FMinimumBidCount write FMinimumBidCount;
    property MaximumBidCount: Integer read FMaximumBidCount write FMaximumBidCount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DateType = class(TRemotable)
  private
    FYear: Integer;
    FMonth: Integer;
    FDay: Integer;
  published
    property Year: Integer read FYear write FYear;
    property Month: Integer read FMonth write FMonth;
    property Day: Integer read FDay write FDay;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TicketDetailsType = class(TRemotable)
  private
    FEventType: TicketEventTypeCodeType;
    FEventDate: DateType;
    FStateOrProvince: WideString;
    FCityName: WideString;
    FTicketQuantity: Integer;
  public
    destructor Destroy; override;
  published
    property EventType: TicketEventTypeCodeType read FEventType write FEventType;
    property EventDate: DateType read FEventDate write FEventDate;
    property StateOrProvince: WideString read FStateOrProvince write FStateOrProvince;
    property CityName: WideString read FCityName write FCityName;
    property TicketQuantity: Integer read FTicketQuantity write FTicketQuantity;
  end;

  SearchResultItemArrayType = array of SearchResultItemType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SpellingSuggestionType = class(TRemotable)
  private
    FMatchingItemCount: Integer;
    FText: WideString;
  published
    property MatchingItemCount: Integer read FMatchingItemCount write FMatchingItemCount;
    property Text: WideString read FText write FText;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SearchResultItemType = class(TRemotable)
  private
    FItem: ItemType;
    FItemSpecific: NameValueListArrayType;
    FSearchResultValues: SearchResultValuesCodeType;
  public
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property ItemSpecific: NameValueListArrayType read FItemSpecific write FItemSpecific;
    property SearchResultValues: SearchResultValuesCodeType read FSearchResultValues write FSearchResultValues;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpansionArrayType = class(TRemotable)
  private
    FExpansionItem: SearchResultItemType;
    FTotalAvailable: Integer;
  public
    destructor Destroy; override;
  published
    property ExpansionItem: SearchResultItemType read FExpansionItem write FExpansionItem;
    property TotalAvailable: Integer read FTotalAvailable write FTotalAvailable;
  end;

  DomainHistogramType = array of ExpressHistogramDepartmentType;   { "urn:ebay:apis:eBLBaseComponents" }
  ProductArrayType = array of ExpressProductType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressHistogramDomainDetailsType = class(TRemotable)
  private
    FName_: WideString;
    FBreadCrumb: WideString;
    FItemCount: Integer;
    FProductCount: Integer;
    FImageURL: WideString;
  published
    property Name_: WideString read FName_ write FName_;
    property BreadCrumb: WideString read FBreadCrumb write FBreadCrumb;
    property ItemCount: Integer read FItemCount write FItemCount;
    property ProductCount: Integer read FProductCount write FProductCount;
    property ImageURL: WideString read FImageURL write FImageURL;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressHistogramProductType = class(TRemotable)
  private
    FDomainDetails: ExpressHistogramDomainDetailsType;
  public
    destructor Destroy; override;
  published
    property DomainDetails: ExpressHistogramDomainDetailsType read FDomainDetails write FDomainDetails;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressHistogramAisleType = class(TRemotable)
  private
    FDomainDetails: ExpressHistogramDomainDetailsType;
    FProductType: ExpressHistogramProductType;
  public
    destructor Destroy; override;
  published
    property DomainDetails: ExpressHistogramDomainDetailsType read FDomainDetails write FDomainDetails;
    property ProductType: ExpressHistogramProductType read FProductType write FProductType;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressHistogramDepartmentType = class(TRemotable)
  private
    FDomainDetails: ExpressHistogramDomainDetailsType;
    FAisle: ExpressHistogramAisleType;
  public
    destructor Destroy; override;
  published
    property DomainDetails: ExpressHistogramDomainDetailsType read FDomainDetails write FDomainDetails;
    property Aisle: ExpressHistogramAisleType read FAisle write FAisle;
  end;

  UserIDArrayType = array of UserIDType;        { "urn:ebay:apis:eBLBaseComponents" }
  SKUArrayType = array of SKUType;              { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerPaymentType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FTransactionID: WideString;
    FOrderID: OrderIDType;
    FSellerInventoryID: WideString;
    FPrivateNotes: WideString;
    FExternalProductID: ExternalProductIDType;
    FTitle: WideString;
    FPaymentType: PaymentTypeCodeType;
    FTransactionPrice: AmountType;
    FShippingReimbursement: AmountType;
    FCommission: AmountType;
    FAmountPaid: AmountType;
    FPaidTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property OrderID: OrderIDType read FOrderID write FOrderID;
    property SellerInventoryID: WideString read FSellerInventoryID write FSellerInventoryID;
    property PrivateNotes: WideString read FPrivateNotes write FPrivateNotes;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
    property Title: WideString read FTitle write FTitle;
    property PaymentType: PaymentTypeCodeType read FPaymentType write FPaymentType;
    property TransactionPrice: AmountType read FTransactionPrice write FTransactionPrice;
    property ShippingReimbursement: AmountType read FShippingReimbursement write FShippingReimbursement;
    property Commission: AmountType read FCommission write FCommission;
    property AmountPaid: AmountType read FAmountPaid write FAmountPaid;
    property PaidTime: TXSDateTime read FPaidTime write FPaidTime;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedHandlingDiscountType = class(TRemotable)
  private
    FDiscountName: HandlingNameCodeType;
    FOrderHandlingAmount: AmountType;
    FEachAdditionalAmount: AmountType;
    FEachAdditionalOffAmount: AmountType;
    FEachAdditionalPercentOff: Single;
  public
    destructor Destroy; override;
  published
    property DiscountName: HandlingNameCodeType read FDiscountName write FDiscountName;
    property OrderHandlingAmount: AmountType read FOrderHandlingAmount write FOrderHandlingAmount;
    property EachAdditionalAmount: AmountType read FEachAdditionalAmount write FEachAdditionalAmount;
    property EachAdditionalOffAmount: AmountType read FEachAdditionalOffAmount write FEachAdditionalOffAmount;
    property EachAdditionalPercentOff: Single read FEachAdditionalPercentOff write FEachAdditionalPercentOff;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FlatRateInsuranceRangeCostType = class(TRemotable)
  private
    FFlatRateInsuranceRange: FlatRateInsuranceRangeCodeType;
    FInsuranceCost: AmountType;
  public
    destructor Destroy; override;
  published
    property FlatRateInsuranceRange: FlatRateInsuranceRangeCodeType read FFlatRateInsuranceRange write FFlatRateInsuranceRange;
    property InsuranceCost: AmountType read FInsuranceCost write FInsuranceCost;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingInsuranceType = class(TRemotable)
  private
    FInsuranceOption: InsuranceOptionCodeType;
    FFlatRateInsuranceRangeCost: FlatRateInsuranceRangeCostType;
  public
    destructor Destroy; override;
  published
    property InsuranceOption: InsuranceOptionCodeType read FInsuranceOption write FInsuranceOption;
    property FlatRateInsuranceRangeCost: FlatRateInsuranceRangeCostType read FFlatRateInsuranceRangeCost write FFlatRateInsuranceRangeCost;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreLogoType = class(TRemotable)
  private
    FLogoID: Integer;
    FName_: WideString;
    FURL: WideString;
  published
    property LogoID: Integer read FLogoID write FLogoID;
    property Name_: WideString read FName_ write FName_;
    property URL: WideString read FURL write FURL;
  end;

  StoreCustomCategoryArrayType = array of StoreCustomCategoryType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreColorType = class(TRemotable)
  private
    FPrimary: WideString;
    FSecondary: WideString;
    FAccent: WideString;
  published
    property Primary: WideString read FPrimary write FPrimary;
    property Secondary: WideString read FSecondary write FSecondary;
    property Accent: WideString read FAccent write FAccent;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreFontType = class(TRemotable)
  private
    FNameFace: StoreFontFaceCodeType;
    FNameSize: StoreFontSizeCodeType;
    FNameColor: WideString;
    FTitleFace: StoreFontFaceCodeType;
    FTitleSize: StoreFontSizeCodeType;
    FTitleColor: WideString;
    FDescFace: StoreFontFaceCodeType;
    FDescSize: StoreFontSizeCodeType;
    FDescColor: WideString;
  published
    property NameFace: StoreFontFaceCodeType read FNameFace write FNameFace;
    property NameSize: StoreFontSizeCodeType read FNameSize write FNameSize;
    property NameColor: WideString read FNameColor write FNameColor;
    property TitleFace: StoreFontFaceCodeType read FTitleFace write FTitleFace;
    property TitleSize: StoreFontSizeCodeType read FTitleSize write FTitleSize;
    property TitleColor: WideString read FTitleColor write FTitleColor;
    property DescFace: StoreFontFaceCodeType read FDescFace write FDescFace;
    property DescSize: StoreFontSizeCodeType read FDescSize write FDescSize;
    property DescColor: WideString read FDescColor write FDescColor;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreColorSchemeType = class(TRemotable)
  private
    FColorSchemeID: Integer;
    FName_: WideString;
    FColor: StoreColorType;
    FFont: StoreFontType;
  public
    destructor Destroy; override;
  published
    property ColorSchemeID: Integer read FColorSchemeID write FColorSchemeID;
    property Name_: WideString read FName_ write FName_;
    property Color: StoreColorType read FColor write FColor;
    property Font: StoreFontType read FFont write FFont;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreThemeType = class(TRemotable)
  private
    FThemeID: Integer;
    FName_: WideString;
    FColorScheme: StoreColorSchemeType;
  public
    destructor Destroy; override;
  published
    property ThemeID: Integer read FThemeID write FThemeID;
    property Name_: WideString read FName_ write FName_;
    property ColorScheme: StoreColorSchemeType read FColorScheme write FColorScheme;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomCategoryType = class(TRemotable)
  private
    FCategoryID: Int64;
    FName_: WideString;
    FOrder: Integer;
    FChildCategory: StoreCustomCategoryType;
  public
    destructor Destroy; override;
  published
    property CategoryID: Int64 read FCategoryID write FCategoryID;
    property Name_: WideString read FName_ write FName_;
    property Order: Integer read FOrder write FOrder;
    property ChildCategory: StoreCustomCategoryType read FChildCategory write FChildCategory;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomListingHeaderLinkType = class(TRemotable)
  private
    FLinkID: Integer;
    FOrder: Integer;
    FLinkType: StoreCustomListingHeaderLinkCodeType;
  published
    property LinkID: Integer read FLinkID write FLinkID;
    property Order: Integer read FOrder write FOrder;
    property LinkType: StoreCustomListingHeaderLinkCodeType read FLinkType write FLinkType;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomListingHeaderType = class(TRemotable)
  private
    FDisplayType: StoreCustomListingHeaderDisplayCodeType;
    FLogo: Boolean;
    FSearchBox: Boolean;
    FLinkToInclude: StoreCustomListingHeaderLinkType;
    FAddToFavoriteStores: Boolean;
    FSignUpForStoreNewsletter: Boolean;
  public
    destructor Destroy; override;
  published
    property DisplayType: StoreCustomListingHeaderDisplayCodeType read FDisplayType write FDisplayType;
    property Logo: Boolean read FLogo write FLogo;
    property SearchBox: Boolean read FSearchBox write FSearchBox;
    property LinkToInclude: StoreCustomListingHeaderLinkType read FLinkToInclude write FLinkToInclude;
    property AddToFavoriteStores: Boolean read FAddToFavoriteStores write FAddToFavoriteStores;
    property SignUpForStoreNewsletter: Boolean read FSignUpForStoreNewsletter write FSignUpForStoreNewsletter;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreType = class(TRemotable)
  private
    FName_: WideString;
    FURLPath: WideString;
    FURL: WideString;
    FSubscriptionLevel: StoreSubscriptionLevelCodeType;
    FDescription: WideString;
    FLogo: StoreLogoType;
    FTheme: StoreThemeType;
    FHeaderStyle: StoreHeaderStyleCodeType;
    FHomePage: Int64;
    FItemListLayout: StoreItemListLayoutCodeType;
    FItemListSortOrder: StoreItemListSortOrderCodeType;
    FCustomHeaderLayout: StoreCustomHeaderLayoutCodeType;
    FCustomHeader: WideString;
    FExportListings: Boolean;
    FCustomCategories: StoreCustomCategoryArrayType;
    FCustomListingHeader: StoreCustomListingHeaderType;
    FMerchDisplay: MerchDisplayCodeType;
    FLastOpenedTime: TXSDateTime;
  public
    destructor Destroy; override;
  published
    property Name_: WideString read FName_ write FName_;
    property URLPath: WideString read FURLPath write FURLPath;
    property URL: WideString read FURL write FURL;
    property SubscriptionLevel: StoreSubscriptionLevelCodeType read FSubscriptionLevel write FSubscriptionLevel;
    property Description: WideString read FDescription write FDescription;
    property Logo: StoreLogoType read FLogo write FLogo;
    property Theme: StoreThemeType read FTheme write FTheme;
    property HeaderStyle: StoreHeaderStyleCodeType read FHeaderStyle write FHeaderStyle;
    property HomePage: Int64 read FHomePage write FHomePage;
    property ItemListLayout: StoreItemListLayoutCodeType read FItemListLayout write FItemListLayout;
    property ItemListSortOrder: StoreItemListSortOrderCodeType read FItemListSortOrder write FItemListSortOrder;
    property CustomHeaderLayout: StoreCustomHeaderLayoutCodeType read FCustomHeaderLayout write FCustomHeaderLayout;
    property CustomHeader: WideString read FCustomHeader write FCustomHeader;
    property ExportListings: Boolean read FExportListings write FExportListings;
    property CustomCategories: StoreCustomCategoryArrayType read FCustomCategories write FCustomCategories;
    property CustomListingHeader: StoreCustomListingHeaderType read FCustomListingHeader write FCustomListingHeader;
    property MerchDisplay: MerchDisplayCodeType read FMerchDisplay write FMerchDisplay;
    property LastOpenedTime: TXSDateTime read FLastOpenedTime write FLastOpenedTime;
  end;

  StoreCustomPageArrayType = array of StoreCustomPageType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreCustomPageType = class(TRemotable)
  private
    FName_: WideString;
    FPageID: Int64;
    FURLPath: WideString;
    FURL: WideString;
    FStatus: StoreCustomPageStatusCodeType;
    FContent: WideString;
    FLeftNav: Boolean;
    FPreviewEnabled: Boolean;
    FOrder: Integer;
  published
    property Name_: WideString read FName_ write FName_;
    property PageID: Int64 read FPageID write FPageID;
    property URLPath: WideString read FURLPath write FURLPath;
    property URL: WideString read FURL write FURL;
    property Status: StoreCustomPageStatusCodeType read FStatus write FStatus;
    property Content: WideString read FContent write FContent;
    property LeftNav: Boolean read FLeftNav write FLeftNav;
    property PreviewEnabled: Boolean read FPreviewEnabled write FPreviewEnabled;
    property Order: Integer read FOrder write FOrder;
  end;

  StoreLogoArrayType = array of StoreLogoType;   { "urn:ebay:apis:eBLBaseComponents" }
  StoreSubscriptionArrayType = array of StoreSubscriptionType;   { "urn:ebay:apis:eBLBaseComponents" }
  StoreColorSchemeArrayType = array of StoreColorSchemeType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreThemeArrayType = class(TRemotable)
  private
    FTheme: StoreThemeType;
    FGenericColorSchemeArray: StoreColorSchemeArrayType;
  public
    destructor Destroy; override;
  published
    property Theme: StoreThemeType read FTheme write FTheme;
    property GenericColorSchemeArray: StoreColorSchemeArrayType read FGenericColorSchemeArray write FGenericColorSchemeArray;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreSubscriptionType = class(TRemotable)
  private
    FLevel: StoreSubscriptionLevelCodeType;
    FFee: AmountType;
  public
    destructor Destroy; override;
  published
    property Level: StoreSubscriptionLevelCodeType read FLevel write FLevel;
    property Fee: AmountType read FFee write FFee;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StoreVacationPreferencesType = class(TRemotable)
  private
    FOnVacation: Boolean;
    FReturnDate: TXSDateTime;
    FHideFixedPriceStoreItems: Boolean;
    FMessageItem: Boolean;
    FMessageStore: Boolean;
    FDisplayMessageStoreCustomText: Boolean;
    FMessageStoreCustomText: WideString;
  public
    destructor Destroy; override;
  published
    property OnVacation: Boolean read FOnVacation write FOnVacation;
    property ReturnDate: TXSDateTime read FReturnDate write FReturnDate;
    property HideFixedPriceStoreItems: Boolean read FHideFixedPriceStoreItems write FHideFixedPriceStoreItems;
    property MessageItem: Boolean read FMessageItem write FMessageItem;
    property MessageStore: Boolean read FMessageStore write FMessageStore;
    property DisplayMessageStoreCustomText: Boolean read FDisplayMessageStoreCustomText write FDisplayMessageStoreCustomText;
    property MessageStoreCustomText: WideString read FMessageStoreCustomText write FMessageStoreCustomText;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  StorePreferencesType = class(TRemotable)
  private
    FVacationPreferences: StoreVacationPreferencesType;
  public
    destructor Destroy; override;
  published
    property VacationPreferences: StoreVacationPreferencesType read FVacationPreferences write FVacationPreferences;
  end;

  SuggestedCategoryArrayType = array of SuggestedCategoryType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SuggestedCategoryType = class(TRemotable)
  private
    FCategory: CategoryType;
    FPercentItemFound: Integer;
  public
    destructor Destroy; override;
  published
    property Category: CategoryType read FCategory write FCategory;
    property PercentItemFound: Integer read FPercentItemFound write FPercentItemFound;
  end;

  DisputeArrayType = array of DisputeType;      { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DisputeFilterCountType = class(TRemotable)
  private
    FDisputeFilterType: DisputeFilterTypeCodeType;
    FTotalAvailable: Integer;
  published
    property DisputeFilterType: DisputeFilterTypeCodeType read FDisputeFilterType write FDisputeFilterType;
    property TotalAvailable: Integer read FTotalAvailable write FTotalAvailable;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BidderNoticePreferencesType = class(TRemotable)
  private
    FUnsuccessfulBidderNoticeIncludeMyItems: Boolean;
  published
    property UnsuccessfulBidderNoticeIncludeMyItems: Boolean read FUnsuccessfulBidderNoticeIncludeMyItems write FUnsuccessfulBidderNoticeIncludeMyItems;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CrossPromotionPreferencesType = class(TRemotable)
  private
    FCrossPromotionEnabled: Boolean;
    FCrossSellItemFormatSortFilter: ItemFormatSortFilterCodeType;
    FCrossSellGallerySortFilter: GallerySortFilterCodeType;
    FCrossSellItemSortFilter: ItemSortFilterCodeType;
    FUpSellItemFormatSortFilter: ItemFormatSortFilterCodeType;
    FUpSellGallerySortFilter: GallerySortFilterCodeType;
    FUpSellItemSortFilter: ItemSortFilterCodeType;
  published
    property CrossPromotionEnabled: Boolean read FCrossPromotionEnabled write FCrossPromotionEnabled;
    property CrossSellItemFormatSortFilter: ItemFormatSortFilterCodeType read FCrossSellItemFormatSortFilter write FCrossSellItemFormatSortFilter;
    property CrossSellGallerySortFilter: GallerySortFilterCodeType read FCrossSellGallerySortFilter write FCrossSellGallerySortFilter;
    property CrossSellItemSortFilter: ItemSortFilterCodeType read FCrossSellItemSortFilter write FCrossSellItemSortFilter;
    property UpSellItemFormatSortFilter: ItemFormatSortFilterCodeType read FUpSellItemFormatSortFilter write FUpSellItemFormatSortFilter;
    property UpSellGallerySortFilter: GallerySortFilterCodeType read FUpSellGallerySortFilter write FUpSellGallerySortFilter;
    property UpSellItemSortFilter: ItemSortFilterCodeType read FUpSellItemSortFilter write FUpSellItemSortFilter;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerPaymentPreferencesType = class(TRemotable)
  private
    FAlwaysUseThisPaymentAddress: Boolean;
    FDisplayPayNowButton: DisplayPayNowButtonCodeType;
    FPayPalPreferred: Boolean;
    FDefaultPayPalEmailAddress: WideString;
    FPayPalAlwaysOn: Boolean;
    FSellerPaymentAddress: AddressType;
    FUPSRateOption: UPSRateOptionCodeType;
  public
    destructor Destroy; override;
  published
    property AlwaysUseThisPaymentAddress: Boolean read FAlwaysUseThisPaymentAddress write FAlwaysUseThisPaymentAddress;
    property DisplayPayNowButton: DisplayPayNowButtonCodeType read FDisplayPayNowButton write FDisplayPayNowButton;
    property PayPalPreferred: Boolean read FPayPalPreferred write FPayPalPreferred;
    property DefaultPayPalEmailAddress: WideString read FDefaultPayPalEmailAddress write FDefaultPayPalEmailAddress;
    property PayPalAlwaysOn: Boolean read FPayPalAlwaysOn write FPayPalAlwaysOn;
    property SellerPaymentAddress: AddressType read FSellerPaymentAddress write FSellerPaymentAddress;
    property UPSRateOption: UPSRateOptionCodeType read FUPSRateOption write FUPSRateOption;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SellerFavoriteItemPreferencesType = class(TRemotable)
  private
    FSearchKeywords: WideString;
    FStoreCategoryID: Int64;
    FListingType: ListingTypeCodeType;
    FSearchSortOrder: StoreItemListSortOrderCodeType;
    FMinPrice: AmountType;
    FMaxPrice: AmountType;
    FFavoriteItemID: ItemIDType;
  public
    destructor Destroy; override;
  published
    property SearchKeywords: WideString read FSearchKeywords write FSearchKeywords;
    property StoreCategoryID: Int64 read FStoreCategoryID write FStoreCategoryID;
    property ListingType: ListingTypeCodeType read FListingType write FListingType;
    property SearchSortOrder: StoreItemListSortOrderCodeType read FSearchSortOrder write FSearchSortOrder;
    property MinPrice: AmountType read FMinPrice write FMinPrice;
    property MaxPrice: AmountType read FMaxPrice write FMaxPrice;
    property FavoriteItemID: ItemIDType read FFavoriteItemID write FFavoriteItemID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  EndOfAuctionEmailPreferencesType = class(TRemotable)
  private
    FTemplateText: WideString;
    FLogoURL: WideString;
    FLogoType: EndOfAuctionLogoTypeCodeType;
    FEmailCustomized: Boolean;
    FTextCustomized: Boolean;
    FLogoCustomized: Boolean;
    FCopyEmail: Boolean;
  published
    property TemplateText: WideString read FTemplateText write FTemplateText;
    property LogoURL: WideString read FLogoURL write FLogoURL;
    property LogoType: EndOfAuctionLogoTypeCodeType read FLogoType write FLogoType;
    property EmailCustomized: Boolean read FEmailCustomized write FEmailCustomized;
    property TextCustomized: Boolean read FTextCustomized write FTextCustomized;
    property LogoCustomized: Boolean read FLogoCustomized write FLogoCustomized;
    property CopyEmail: Boolean read FCopyEmail write FCopyEmail;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ExpressPreferencesType = class(TRemotable)
  private
    FExpressSellingPreference: ExpressSellingPreferenceCodeType;
    FDefaultPayPalAccount: WideString;
  published
    property ExpressSellingPreference: ExpressSellingPreferenceCodeType read FExpressSellingPreference write FExpressSellingPreference;
    property DefaultPayPalAccount: WideString read FDefaultPayPalAccount write FDefaultPayPalAccount;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CalculatedShippingPreferencesType = class(TRemotable)
  private
    FCalculatedShippingAmountForEntireOrder: AmountType;
    FCalculatedShippingChargeOption: CalculatedShippingChargeOptionCodeType;
    FCalculatedShippingRateOption: CalculatedShippingRateOptionCodeType;
    FInsuranceOption: InsuranceOptionCodeType;
  public
    destructor Destroy; override;
  published
    property CalculatedShippingAmountForEntireOrder: AmountType read FCalculatedShippingAmountForEntireOrder write FCalculatedShippingAmountForEntireOrder;
    property CalculatedShippingChargeOption: CalculatedShippingChargeOptionCodeType read FCalculatedShippingChargeOption write FCalculatedShippingChargeOption;
    property CalculatedShippingRateOption: CalculatedShippingRateOptionCodeType read FCalculatedShippingRateOption write FCalculatedShippingRateOption;
    property InsuranceOption: InsuranceOptionCodeType read FInsuranceOption write FInsuranceOption;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  FlatShippingPreferencesType = class(TRemotable)
  private
    FAmountPerAdditionalItem: AmountType;
    FDeductionAmountPerAdditionalItem: AmountType;
    FFlatRateInsuranceRangeCost: FlatRateInsuranceRangeCostType;
    FFlatShippingRateOption: FlatShippingRateOptionCodeType;
    FInsuranceOption: InsuranceOptionCodeType;
  public
    destructor Destroy; override;
  published
    property AmountPerAdditionalItem: AmountType read FAmountPerAdditionalItem write FAmountPerAdditionalItem;
    property DeductionAmountPerAdditionalItem: AmountType read FDeductionAmountPerAdditionalItem write FDeductionAmountPerAdditionalItem;
    property FlatRateInsuranceRangeCost: FlatRateInsuranceRangeCostType read FFlatRateInsuranceRangeCost write FFlatRateInsuranceRangeCost;
    property FlatShippingRateOption: FlatShippingRateOptionCodeType read FFlatShippingRateOption write FFlatShippingRateOption;
    property InsuranceOption: InsuranceOptionCodeType read FInsuranceOption write FInsuranceOption;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CombinedPaymentPreferencesType = class(TRemotable)
  private
    FCalculatedShippingPreferences: CalculatedShippingPreferencesType;
    FCombinedPaymentOption: CombinedPaymentOptionCodeType;
    FCombinedPaymentPeriod: CombinedPaymentPeriodCodeType;
    FFlatShippingPreferences: FlatShippingPreferencesType;
  public
    destructor Destroy; override;
  published
    property CalculatedShippingPreferences: CalculatedShippingPreferencesType read FCalculatedShippingPreferences write FCalculatedShippingPreferences;
    property CombinedPaymentOption: CombinedPaymentOptionCodeType read FCombinedPaymentOption write FCombinedPaymentOption;
    property CombinedPaymentPeriod: CombinedPaymentPeriodCodeType read FCombinedPaymentPeriod write FCombinedPaymentPeriod;
    property FlatShippingPreferences: FlatShippingPreferencesType read FFlatShippingPreferences write FFlatShippingPreferences;
  end;

  VeROReasonCodeDetailsType = array of VeROSiteDetailType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ReasonCodeDetailType = class(TRemotable)
  private
    FBriefText: WideString;
    FDetailedText: WideString;
    FcodeID: Int64;
  published
    property BriefText: WideString read FBriefText write FBriefText;
    property DetailedText: WideString read FDetailedText write FDetailedText;
    property codeID: Int64 read FcodeID write FcodeID stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VeROSiteDetailType = class(TRemotable)
  private
    FSite: SiteCodeType;
    FReasonCodeDetail: ReasonCodeDetailType;
  public
    destructor Destroy; override;
  published
    property Site: SiteCodeType read FSite write FSite;
    property ReasonCodeDetail: ReasonCodeDetailType read FReasonCodeDetail write FReasonCodeDetail;
  end;

  VeROReportedItemDetailsType = array of VeROReportedItemType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VeROReportedItemType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FItemStatus: VeROItemStatusCodeType;
    FItemReasonForFailure: WideString;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property ItemStatus: VeROItemStatusCodeType read FItemStatus write FItemStatus;
    property ItemReasonForFailure: WideString read FItemReasonForFailure write FItemReasonForFailure;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  WantItNowPostType = class(TRemotable)
  private
    FCategoryID: WideString;
    FDescription: WideString;
    FPostID: ItemIDType;
    FSite: SiteCodeType;
    FStartTime: TXSDateTime;
    FResponseCount: Integer;
    FTitle: WideString;
  public
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Description: WideString read FDescription write FDescription;
    property PostID: ItemIDType read FPostID write FPostID;
    property Site: SiteCodeType read FSite write FSite;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property ResponseCount: Integer read FResponseCount write FResponseCount;
    property Title: WideString read FTitle write FTitle;
  end;

  WantItNowPostArrayType = array of WantItNowPostType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CountryDetailsType = class(TRemotable)
  private
    FCountry: CountryCodeType;
    FDescription: WideString;
  published
    property Country: CountryCodeType read FCountry write FCountry;
    property Description: WideString read FDescription write FDescription;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  CurrencyDetailsType = class(TRemotable)
  private
    FCurrency: CurrencyCodeType;
    FDescription: WideString;
  published
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
    property Description: WideString read FDescription write FDescription;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DispatchTimeMaxDetailsType = class(TRemotable)
  private
    FDispatchTimeMax: Integer;
    FDescription: WideString;
  published
    property DispatchTimeMax: Integer read FDispatchTimeMax write FDispatchTimeMax;
    property Description: WideString read FDescription write FDescription;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PaymentOptionDetailsType = class(TRemotable)
  private
    FPaymentOption: BuyerPaymentMethodCodeType;
    FDescription: WideString;
  published
    property PaymentOption: BuyerPaymentMethodCodeType read FPaymentOption write FPaymentOption;
    property Description: WideString read FDescription write FDescription;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RegionDetailsType = class(TRemotable)
  private
    FRegionID: WideString;
    FDescription: WideString;
  published
    property RegionID: WideString read FRegionID write FRegionID;
    property Description: WideString read FDescription write FDescription;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingLocationDetailsType = class(TRemotable)
  private
    FShippingLocation: WideString;
    FDescription: WideString;
  published
    property ShippingLocation: WideString read FShippingLocation write FShippingLocation;
    property Description: WideString read FDescription write FDescription;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingServiceDetailsType = class(TRemotable)
  private
    FDescription: WideString;
    FExpeditedService: Boolean;
    FInternationalService: Boolean;
    FShippingService: WideString;
    FShippingServiceID: Integer;
    FShippingTimeMax: Integer;
    FShippingTimeMin: Integer;
    FShippingServiceCode: ShippingServiceCodeType;
    FServiceType: ShippingTypeCodeType;
    FShippingPackage: ShippingPackageCodeType;
    FDimensionsRequired: Boolean;
    FValidForSellingFlow: Boolean;
    FSurchargeApplicable: Boolean;
    FShippingCarrier: ShippingCarrierCodeType;
  published
    property Description: WideString read FDescription write FDescription;
    property ExpeditedService: Boolean read FExpeditedService write FExpeditedService;
    property InternationalService: Boolean read FInternationalService write FInternationalService;
    property ShippingService: WideString read FShippingService write FShippingService;
    property ShippingServiceID: Integer read FShippingServiceID write FShippingServiceID;
    property ShippingTimeMax: Integer read FShippingTimeMax write FShippingTimeMax;
    property ShippingTimeMin: Integer read FShippingTimeMin write FShippingTimeMin;
    property ShippingServiceCode: ShippingServiceCodeType read FShippingServiceCode write FShippingServiceCode;
    property ServiceType: ShippingTypeCodeType read FServiceType write FServiceType;
    property ShippingPackage: ShippingPackageCodeType read FShippingPackage write FShippingPackage;
    property DimensionsRequired: Boolean read FDimensionsRequired write FDimensionsRequired;
    property ValidForSellingFlow: Boolean read FValidForSellingFlow write FValidForSellingFlow;
    property SurchargeApplicable: Boolean read FSurchargeApplicable write FSurchargeApplicable;
    property ShippingCarrier: ShippingCarrierCodeType read FShippingCarrier write FShippingCarrier;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteDetailsType = class(TRemotable)
  private
    FSite: SiteCodeType;
    FSiteID: Integer;
  published
    property Site: SiteCodeType read FSite write FSite;
    property SiteID: Integer read FSiteID write FSiteID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  URLDetailsType = class(TRemotable)
  private
    FURLType: URLTypeCodeType;
    FURL: WideString;
  published
    property URLType: URLTypeCodeType read FURLType write FURLType;
    property URL: WideString read FURL write FURL;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  TimeZoneDetailsType = class(TRemotable)
  private
    FTimeZoneID: WideString;
    FStandardLabel: WideString;
    FStandardOffset: WideString;
    FDaylightSavingsLabel: WideString;
    FDaylightSavingsOffset: WideString;
    FDaylightSavingsInEffect: Boolean;
  published
    property TimeZoneID: WideString read FTimeZoneID write FTimeZoneID;
    property StandardLabel: WideString read FStandardLabel write FStandardLabel;
    property StandardOffset: WideString read FStandardOffset write FStandardOffset;
    property DaylightSavingsLabel: WideString read FDaylightSavingsLabel write FDaylightSavingsLabel;
    property DaylightSavingsOffset: WideString read FDaylightSavingsOffset write FDaylightSavingsOffset;
    property DaylightSavingsInEffect: Boolean read FDaylightSavingsInEffect write FDaylightSavingsInEffect;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemSpecificDetailsType = class(TRemotable)
  private
    FMaxItemSpecificsPerItem: Integer;
    FMaxValuesPerName: Integer;
    FMaxCharactersPerValue: Integer;
    FMaxCharactersPerName: Integer;
  published
    property MaxItemSpecificsPerItem: Integer read FMaxItemSpecificsPerItem write FMaxItemSpecificsPerItem;
    property MaxValuesPerName: Integer read FMaxValuesPerName write FMaxValuesPerName;
    property MaxCharactersPerValue: Integer read FMaxCharactersPerValue write FMaxCharactersPerValue;
    property MaxCharactersPerName: Integer read FMaxCharactersPerName write FMaxCharactersPerName;
  end;

  UnitOfMeasurementDetailsType = array of UnitOfMeasurementType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  RegionOfOriginDetailsType = class(TRemotable)
  private
    FRegionOfOrigin: WideString;
    FDescription: WideString;
    FStatus: StatusCodeType;
  published
    property RegionOfOrigin: WideString read FRegionOfOrigin write FRegionOfOrigin;
    property Description: WideString read FDescription write FDescription;
    property Status: StatusCodeType read FStatus write FStatus;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingPackageDetailsType = class(TRemotable)
  private
    FPackageID: Integer;
    FDescription: WideString;
    FShippingPackage: ShippingPackageCodeType;
    FDefault_: Boolean;
  published
    property PackageID: Integer read FPackageID write FPackageID;
    property Description: WideString read FDescription write FDescription;
    property ShippingPackage: ShippingPackageCodeType read FShippingPackage write FShippingPackage;
    property Default_: Boolean read FDefault_ write FDefault_;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ShippingCarrierDetailsType = class(TRemotable)
  private
    FShippingCarrierID: Integer;
    FDescription: WideString;
    FShippingCarrier: ShippingCarrierCodeType;
  published
    property ShippingCarrierID: Integer read FShippingCarrierID write FShippingCarrierID;
    property Description: WideString read FDescription write FDescription;
    property ShippingCarrier: ShippingCarrierCodeType read FShippingCarrier write FShippingCarrier;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  UnitOfMeasurementType = class(TRemotable)
  private
    FAlternateText: WideString;
    FSuggestedText: WideString;
  published
    property AlternateText: WideString read FAlternateText write FAlternateText;
    property SuggestedText: WideString read FSuggestedText write FSuggestedText;
  end;

  ItemRatingDetailArrayType = array of ItemRatingDetailsType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ItemRatingDetailsType = class(TRemotable)
  private
    FRatingDetail: FeedbackRatingDetailCodeType;
    FRating: Integer;
  published
    property RatingDetail: FeedbackRatingDetailCodeType read FRatingDetail write FRatingDetail;
    property Rating: Integer read FRating write FRating;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  Base64BinaryType = class(TRemotable)
  private
    FcontentType: WideString;
  published
    property contentType: WideString read FcontentType write FcontentType stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  PictureSetMemberType = class(TRemotable)
  private
    FMemberURL: WideString;
    FPictureHeight: Integer;
    FPictureWidth: Integer;
  published
    property MemberURL: WideString read FMemberURL write FMemberURL;
    property PictureHeight: Integer read FPictureHeight write FPictureHeight;
    property PictureWidth: Integer read FPictureWidth write FPictureWidth;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  SiteHostedPictureDetailsType = class(TRemotable)
  private
    FPictureName: WideString;
    FPictureSet: PictureSetCodeType;
    FPictureFormat: PictureFormatCodeType;
    FFullURL: WideString;
    FBaseURL: WideString;
    FPictureSetMember: PictureSetMemberType;
  public
    destructor Destroy; override;
  published
    property PictureName: WideString read FPictureName write FPictureName;
    property PictureSet: PictureSetCodeType read FPictureSet write FPictureSet;
    property PictureFormat: PictureFormatCodeType read FPictureFormat write FPictureFormat;
    property FullURL: WideString read FFullURL write FFullURL;
    property BaseURL: WideString read FBaseURL write FBaseURL;
    property PictureSetMember: PictureSetMemberType read FPictureSetMember write FPictureSetMember;
  end;

  VeROReportItemsType = array of VeROReportItemType;   { "urn:ebay:apis:eBLBaseComponents" }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  VeROReportItemType = class(TRemotable)
  private
    FItemID: ItemIDType;
    FVeROReasonCodeID: Int64;
    FMessageToSeller: WideString;
    FCopyEmailToRightsOwner: Boolean;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property VeROReasonCodeID: Int64 read FVeROReasonCodeID write FVeROReasonCodeID;
    property MessageToSeller: WideString read FMessageToSeller write FMessageToSeller;
    property CopyEmailToRightsOwner: Boolean read FCopyEmailToRightsOwner write FCopyEmailToRightsOwner;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BotBlockRequestType = class(TRemotable)
  private
    FBotBlockToken: WideString;
    FBotBlockUserInput: WideString;
  published
    property BotBlockToken: WideString read FBotBlockToken write FBotBlockToken;
    property BotBlockUserInput: WideString read FBotBlockUserInput write FBotBlockUserInput;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AbstractRequestType = class(TRemotable)
  private
    FDetailLevel: DetailLevelCodeType;
    FErrorLanguage: WideString;
    FMessageID: WideString;
    FVersion: WideString;
    FEndUserIP: WideString;
    FErrorHandling: ErrorHandlingCodeType;
    FInvocationID: UUIDType;
    FWarningLevel: WarningLevelCodeType;
    FBotBlock: BotBlockRequestType;
  public
    destructor Destroy; override;
  published
    property DetailLevel: DetailLevelCodeType read FDetailLevel write FDetailLevel;
    property ErrorLanguage: WideString read FErrorLanguage write FErrorLanguage;
    property MessageID: WideString read FMessageID write FMessageID;
    property Version: WideString read FVersion write FVersion;
    property EndUserIP: WideString read FEndUserIP write FEndUserIP;
    property ErrorHandling: ErrorHandlingCodeType read FErrorHandling write FErrorHandling;
    property InvocationID: UUIDType read FInvocationID write FInvocationID;
    property WarningLevel: WarningLevelCodeType read FWarningLevel write FWarningLevel;
    property BotBlock: BotBlockRequestType read FBotBlock write FBotBlock;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  VeROReportItemsRequestType = class(AbstractRequestType)
  private
    FRightsOwnerID: UserIDType;
    FReportItems: VeROReportItemsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RightsOwnerID: UserIDType read FRightsOwnerID write FRightsOwnerID;
    property ReportItems: VeROReportItemsType read FReportItems write FReportItems;
  end;

  VeROReportItemsRequest = VeROReportItemsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  UploadSiteHostedPicturesRequestType = class(AbstractRequestType)
  private
    FPictureName: WideString;
    FPictureSystemVersion: Integer;
    FPictureSet: PictureSetCodeType;
    FPictureData: Base64BinaryType;
    FPictureUploadPolicy: PictureUploadPolicyCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PictureName: WideString read FPictureName write FPictureName;
    property PictureSystemVersion: Integer read FPictureSystemVersion write FPictureSystemVersion;
    property PictureSet: PictureSetCodeType read FPictureSet write FPictureSet;
    property PictureData: Base64BinaryType read FPictureData write FPictureData;
    property PictureUploadPolicy: PictureUploadPolicyCodeType read FPictureUploadPolicy write FPictureUploadPolicy;
  end;

  UploadSiteHostedPicturesRequest = UploadSiteHostedPicturesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  LeaveFeedbackRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FCommentText: WideString;
    FCommentType: CommentTypeCodeType;
    FTransactionID: WideString;
    FTargetUser: UserIDType;
    FSellerItemRatingDetailArray: ItemRatingDetailArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property CommentText: WideString read FCommentText write FCommentText;
    property CommentType: CommentTypeCodeType read FCommentType write FCommentType;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property TargetUser: UserIDType read FTargetUser write FTargetUser;
    property SellerItemRatingDetailArray: ItemRatingDetailArrayType read FSellerItemRatingDetailArray write FSellerItemRatingDetailArray;
  end;

  LeaveFeedbackRequest = LeaveFeedbackRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetUserPreferencesRequestType = class(AbstractRequestType)
  private
    FBidderNoticePreferences: BidderNoticePreferencesType;
    FCombinedPaymentPreferences: CombinedPaymentPreferencesType;
    FCrossPromotionPreferences: CrossPromotionPreferencesType;
    FSellerPaymentPreferences: SellerPaymentPreferencesType;
    FSellerFavoriteItemPreferences: SellerFavoriteItemPreferencesType;
    FEndOfAuctionEmailPreferences: EndOfAuctionEmailPreferencesType;
    FExpressPreferences: ExpressPreferencesType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidderNoticePreferences: BidderNoticePreferencesType read FBidderNoticePreferences write FBidderNoticePreferences;
    property CombinedPaymentPreferences: CombinedPaymentPreferencesType read FCombinedPaymentPreferences write FCombinedPaymentPreferences;
    property CrossPromotionPreferences: CrossPromotionPreferencesType read FCrossPromotionPreferences write FCrossPromotionPreferences;
    property SellerPaymentPreferences: SellerPaymentPreferencesType read FSellerPaymentPreferences write FSellerPaymentPreferences;
    property SellerFavoriteItemPreferences: SellerFavoriteItemPreferencesType read FSellerFavoriteItemPreferences write FSellerFavoriteItemPreferences;
    property EndOfAuctionEmailPreferences: EndOfAuctionEmailPreferencesType read FEndOfAuctionEmailPreferences write FEndOfAuctionEmailPreferences;
    property ExpressPreferences: ExpressPreferencesType read FExpressPreferences write FExpressPreferences;
  end;

  SetUserPreferencesRequest = SetUserPreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStorePreferencesRequestType = class(AbstractRequestType)
  private
    FStorePreferences: StorePreferencesType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StorePreferences: StorePreferencesType read FStorePreferences write FStorePreferences;
  end;

  SetStorePreferencesRequest = SetStorePreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStoreCustomPageRequestType = class(AbstractRequestType)
  private
    FCustomPage: StoreCustomPageType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CustomPage: StoreCustomPageType read FCustomPage write FCustomPage;
  end;

  SetStoreCustomPageRequest = SetStoreCustomPageRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStoreCategoriesRequestType = class(AbstractRequestType)
  private
    FAction: StoreCategoryUpdateActionCodeType;
    FItemDestinationCategoryID: Int64;
    FDestinationParentCategoryID: Int64;
    FStoreCategories: StoreCustomCategoryArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Action: StoreCategoryUpdateActionCodeType read FAction write FAction;
    property ItemDestinationCategoryID: Int64 read FItemDestinationCategoryID write FItemDestinationCategoryID;
    property DestinationParentCategoryID: Int64 read FDestinationParentCategoryID write FDestinationParentCategoryID;
    property StoreCategories: StoreCustomCategoryArrayType read FStoreCategories write FStoreCategories;
  end;

  SetStoreCategoriesRequest = SetStoreCategoriesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStoreRequestType = class(AbstractRequestType)
  private
    FStore: StoreType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Store: StoreType read FStore write FStore;
  end;

  SetStoreRequest = SetStoreRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetShippingDiscountProfilesRequestType = class(AbstractRequestType)
  private
    FCurrencyID: CurrencyCodeType;
    FCombinedDuration: CombinedPaymentPeriodCodeType;
    FModifyActionCode: ModifyActionCodeType;
    FFlatShippingDiscount: FlatShippingDiscountType;
    FCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FCalculatedHandlingDiscount: CalculatedHandlingDiscountType;
    FPromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType;
    FShippingInsurance: ShippingInsuranceType;
    FInternationalShippingInsurance: ShippingInsuranceType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CurrencyID: CurrencyCodeType read FCurrencyID write FCurrencyID;
    property CombinedDuration: CombinedPaymentPeriodCodeType read FCombinedDuration write FCombinedDuration;
    property ModifyActionCode: ModifyActionCodeType read FModifyActionCode write FModifyActionCode;
    property FlatShippingDiscount: FlatShippingDiscountType read FFlatShippingDiscount write FFlatShippingDiscount;
    property CalculatedShippingDiscount: CalculatedShippingDiscountType read FCalculatedShippingDiscount write FCalculatedShippingDiscount;
    property CalculatedHandlingDiscount: CalculatedHandlingDiscountType read FCalculatedHandlingDiscount write FCalculatedHandlingDiscount;
    property PromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType read FPromotionalShippingDiscountDetails write FPromotionalShippingDiscountDetails;
    property ShippingInsurance: ShippingInsuranceType read FShippingInsurance write FShippingInsurance;
    property InternationalShippingInsurance: ShippingInsuranceType read FInternationalShippingInsurance write FInternationalShippingInsurance;
  end;

  SetShippingDiscountProfilesRequest = SetShippingDiscountProfilesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerListRequestType = class(AbstractRequestType)
  private
    FUserID: UserIDType;
    FMotorsDealerUsers: UserIDArrayType;
    FEndTimeFrom: TXSDateTime;
    FEndTimeTo: TXSDateTime;
    FSort: Integer;
    FStartTimeFrom: TXSDateTime;
    FStartTimeTo: TXSDateTime;
    FPagination: PaginationType;
    FGranularityLevel: GranularityLevelCodeType;
    FSKUArray: SKUArrayType;
    FIncludeWatchCount: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID: UserIDType read FUserID write FUserID;
    property MotorsDealerUsers: UserIDArrayType read FMotorsDealerUsers write FMotorsDealerUsers;
    property EndTimeFrom: TXSDateTime read FEndTimeFrom write FEndTimeFrom;
    property EndTimeTo: TXSDateTime read FEndTimeTo write FEndTimeTo;
    property Sort: Integer read FSort write FSort;
    property StartTimeFrom: TXSDateTime read FStartTimeFrom write FStartTimeFrom;
    property StartTimeTo: TXSDateTime read FStartTimeTo write FStartTimeTo;
    property Pagination: PaginationType read FPagination write FPagination;
    property GranularityLevel: GranularityLevelCodeType read FGranularityLevel write FGranularityLevel;
    property SKUArray: SKUArrayType read FSKUArray write FSKUArray;
    property IncludeWatchCount: Boolean read FIncludeWatchCount write FIncludeWatchCount;
  end;

  GetSellerListRequest = GetSellerListRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerTransactionsRequestType = class(AbstractRequestType)
  private
    FModTimeFrom: TXSDateTime;
    FModTimeTo: TXSDateTime;
    FPagination: PaginationType;
    FIncludeFinalValueFee: Boolean;
    FIncludeContainingOrder: Boolean;
    FSKUArray: SKUArrayType;
    FPlatform_: TransactionPlatformCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ModTimeFrom: TXSDateTime read FModTimeFrom write FModTimeFrom;
    property ModTimeTo: TXSDateTime read FModTimeTo write FModTimeTo;
    property Pagination: PaginationType read FPagination write FPagination;
    property IncludeFinalValueFee: Boolean read FIncludeFinalValueFee write FIncludeFinalValueFee;
    property IncludeContainingOrder: Boolean read FIncludeContainingOrder write FIncludeContainingOrder;
    property SKUArray: SKUArrayType read FSKUArray write FSKUArray;
    property Platform_: TransactionPlatformCodeType read FPlatform_ write FPlatform_;
  end;

  GetSellerTransactionsRequest = GetSellerTransactionsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSearchResultsRequestType = class(AbstractRequestType)
  private
    FMotorsGermanySearchable: Boolean;
    FQuery: WideString;
    FCategoryID: WideString;
    FSearchFlags: SearchFlagsCodeType;
    FPriceRangeFilter: PriceRangeFilterType;
    FProximitySearch: ProximitySearchType;
    FItemTypeFilter: ItemTypeFilterCodeType;
    FSearchType: SearchTypeCodeType;
    FUserIdFilter: UserIdFilterType;
    FSearchLocationFilter: SearchLocationFilterType;
    FStoreSearchFilter: SearchStoreFilterType;
    FOrder: SearchSortOrderCodeType;
    FPagination: PaginationType;
    FSearchRequest: SearchRequestType;
    FProductID: WideString;
    FExternalProductID: ExternalProductIDType;
    FCategories: RequestCategoriesType;
    FTotalOnly: Boolean;
    FEndTimeFrom: TXSDateTime;
    FEndTimeTo: TXSDateTime;
    FModTimeFrom: TXSDateTime;
    FIncludeGetItFastItems: Boolean;
    FPaymentMethod: PaymentMethodSearchCodeType;
    FGranularityLevel: GranularityLevelCodeType;
    FExpandSearch: Boolean;
    FLot: Boolean;
    FAdFormat: Boolean;
    FFreeShipping: Boolean;
    FQuantity: Integer;
    FQuantityOperator: QuantityOperatorCodeType;
    FSellerBusinessType: SellerBusinessCodeType;
    FDigitalDelivery: Boolean;
    FIncludeCondition: Boolean;
    FIncludeFeedback: Boolean;
    FCharityID: Integer;
    FLocalSearchPostalCode: WideString;
    FMaxRelatedSearchKeywords: Integer;
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
    FBidRange: BidRangeType;
    FItemCondition: ItemConditionCodeType;
    FTicketFinder: TicketDetailsType;
    FGroup: GroupType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property MotorsGermanySearchable: Boolean read FMotorsGermanySearchable write FMotorsGermanySearchable;
    property Query: WideString read FQuery write FQuery;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property SearchFlags: SearchFlagsCodeType read FSearchFlags write FSearchFlags;
    property PriceRangeFilter: PriceRangeFilterType read FPriceRangeFilter write FPriceRangeFilter;
    property ProximitySearch: ProximitySearchType read FProximitySearch write FProximitySearch;
    property ItemTypeFilter: ItemTypeFilterCodeType read FItemTypeFilter write FItemTypeFilter;
    property SearchType: SearchTypeCodeType read FSearchType write FSearchType;
    property UserIdFilter: UserIdFilterType read FUserIdFilter write FUserIdFilter;
    property SearchLocationFilter: SearchLocationFilterType read FSearchLocationFilter write FSearchLocationFilter;
    property StoreSearchFilter: SearchStoreFilterType read FStoreSearchFilter write FStoreSearchFilter;
    property Order: SearchSortOrderCodeType read FOrder write FOrder;
    property Pagination: PaginationType read FPagination write FPagination;
    property SearchRequest: SearchRequestType read FSearchRequest write FSearchRequest;
    property ProductID: WideString read FProductID write FProductID;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
    property Categories: RequestCategoriesType read FCategories write FCategories;
    property TotalOnly: Boolean read FTotalOnly write FTotalOnly;
    property EndTimeFrom: TXSDateTime read FEndTimeFrom write FEndTimeFrom;
    property EndTimeTo: TXSDateTime read FEndTimeTo write FEndTimeTo;
    property ModTimeFrom: TXSDateTime read FModTimeFrom write FModTimeFrom;
    property IncludeGetItFastItems: Boolean read FIncludeGetItFastItems write FIncludeGetItFastItems;
    property PaymentMethod: PaymentMethodSearchCodeType read FPaymentMethod write FPaymentMethod;
    property GranularityLevel: GranularityLevelCodeType read FGranularityLevel write FGranularityLevel;
    property ExpandSearch: Boolean read FExpandSearch write FExpandSearch;
    property Lot: Boolean read FLot write FLot;
    property AdFormat: Boolean read FAdFormat write FAdFormat;
    property FreeShipping: Boolean read FFreeShipping write FFreeShipping;
    property Quantity: Integer read FQuantity write FQuantity;
    property QuantityOperator: QuantityOperatorCodeType read FQuantityOperator write FQuantityOperator;
    property SellerBusinessType: SellerBusinessCodeType read FSellerBusinessType write FSellerBusinessType;
    property DigitalDelivery: Boolean read FDigitalDelivery write FDigitalDelivery;
    property IncludeCondition: Boolean read FIncludeCondition write FIncludeCondition;
    property IncludeFeedback: Boolean read FIncludeFeedback write FIncludeFeedback;
    property CharityID: Integer read FCharityID write FCharityID;
    property LocalSearchPostalCode: WideString read FLocalSearchPostalCode write FLocalSearchPostalCode;
    property MaxRelatedSearchKeywords: Integer read FMaxRelatedSearchKeywords write FMaxRelatedSearchKeywords;
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType read FAffiliateTrackingDetails write FAffiliateTrackingDetails;
    property BidRange: BidRangeType read FBidRange write FBidRange;
    property ItemCondition: ItemConditionCodeType read FItemCondition write FItemCondition;
    property TicketFinder: TicketDetailsType read FTicketFinder write FTicketFinder;
    property Group: GroupType read FGroup write FGroup;
  end;

  GetSearchResultsRequest = GetSearchResultsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetReturnURLRequestType = class(AbstractRequestType)
  private
    FAuthenticationEntry: AuthenticationEntryType;
    FApplicationDisplayName: WideString;
    FAction: ModifyActionCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AuthenticationEntry: AuthenticationEntryType read FAuthenticationEntry write FAuthenticationEntry;
    property ApplicationDisplayName: WideString read FApplicationDisplayName write FApplicationDisplayName;
    property Action: ModifyActionCodeType read FAction write FAction;
  end;

  SetReturnURLRequest = SetReturnURLRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetPromotionalSaleListingsRequestType = class(AbstractRequestType)
  private
    FPromotionalSaleID: Int64;
    FAction: ModifyActionCodeType;
    FPromotionalSaleItemIDArray: ItemIDArrayType;
    FStoreCategoryID: Int64;
    FCategoryID: Int64;
    FAllFixedPriceItems: Boolean;
    FAllStoreInventoryItems: Boolean;
  public
    constructor Create; override;
  published
    property PromotionalSaleID: Int64 read FPromotionalSaleID write FPromotionalSaleID;
    property Action: ModifyActionCodeType read FAction write FAction;
    property PromotionalSaleItemIDArray: ItemIDArrayType read FPromotionalSaleItemIDArray write FPromotionalSaleItemIDArray;
    property StoreCategoryID: Int64 read FStoreCategoryID write FStoreCategoryID;
    property CategoryID: Int64 read FCategoryID write FCategoryID;
    property AllFixedPriceItems: Boolean read FAllFixedPriceItems write FAllFixedPriceItems;
    property AllStoreInventoryItems: Boolean read FAllStoreInventoryItems write FAllStoreInventoryItems;
  end;

  SetPromotionalSaleListingsRequest = SetPromotionalSaleListingsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetPromotionalSaleRequestType = class(AbstractRequestType)
  private
    FAction: ModifyActionCodeType;
    FPromotionalSaleDetails: PromotionalSaleType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Action: ModifyActionCodeType read FAction write FAction;
    property PromotionalSaleDetails: PromotionalSaleType read FPromotionalSaleDetails write FPromotionalSaleDetails;
  end;

  SetPromotionalSaleRequest = SetPromotionalSaleRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductSellingPagesRequestType = class(AbstractRequestType)
  private
    FUseCase: ProductUseCaseCodeType;
    FProduct: ProductType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UseCase: ProductUseCaseCodeType read FUseCase write FUseCase;
    property Product: ProductType read FProduct write FProduct;
  end;

  GetProductSellingPagesRequest = GetProductSellingPagesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductsRequestType = class(AbstractRequestType)
  private
    FProductSearch: ProductSearchType;
    FProductSort: ProductSortCodeType;
    FIncludeItemArray: Boolean;
    FIncludeReviewDetails: Boolean;
    FIncludeBuyingGuideDetails: Boolean;
    FIncludeHistogram: Boolean;
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ProductSearch: ProductSearchType read FProductSearch write FProductSearch;
    property ProductSort: ProductSortCodeType read FProductSort write FProductSort;
    property IncludeItemArray: Boolean read FIncludeItemArray write FIncludeItemArray;
    property IncludeReviewDetails: Boolean read FIncludeReviewDetails write FIncludeReviewDetails;
    property IncludeBuyingGuideDetails: Boolean read FIncludeBuyingGuideDetails write FIncludeBuyingGuideDetails;
    property IncludeHistogram: Boolean read FIncludeHistogram write FIncludeHistogram;
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType read FAffiliateTrackingDetails write FAffiliateTrackingDetails;
  end;

  GetProductsRequest = GetProductsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetPictureManagerDetailsRequestType = class(AbstractRequestType)
  private
    FPictureManagerDetails: PictureManagerDetailsType;
    FAction: PictureManagerActionCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PictureManagerDetails: PictureManagerDetailsType read FPictureManagerDetails write FPictureManagerDetails;
    property Action: PictureManagerActionCodeType read FAction write FAction;
  end;

  SetPictureManagerDetailsRequest = SetPictureManagerDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetOrderTransactionsRequestType = class(AbstractRequestType)
  private
    FItemTransactionIDArray: ItemTransactionIDArrayType;
    FOrderIDArray: OrderIDArrayType;
    FPlatform_: TransactionPlatformCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemTransactionIDArray: ItemTransactionIDArrayType read FItemTransactionIDArray write FItemTransactionIDArray;
    property OrderIDArray: OrderIDArrayType read FOrderIDArray write FOrderIDArray;
    property Platform_: TransactionPlatformCodeType read FPlatform_ write FPlatform_;
  end;

  GetOrderTransactionsRequest = GetOrderTransactionsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetOrdersRequestType = class(AbstractRequestType)
  private
    FOrderIDArray: OrderIDArrayType;
    FCreateTimeFrom: TXSDateTime;
    FCreateTimeTo: TXSDateTime;
    FOrderRole: TradingRoleCodeType;
    FOrderStatus: OrderStatusCodeType;
    FListingType: ListingTypeCodeType;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property OrderIDArray: OrderIDArrayType read FOrderIDArray write FOrderIDArray;
    property CreateTimeFrom: TXSDateTime read FCreateTimeFrom write FCreateTimeFrom;
    property CreateTimeTo: TXSDateTime read FCreateTimeTo write FCreateTimeTo;
    property OrderRole: TradingRoleCodeType read FOrderRole write FOrderRole;
    property OrderStatus: OrderStatusCodeType read FOrderStatus write FOrderStatus;
    property ListingType: ListingTypeCodeType read FListingType write FListingType;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetOrdersRequest = GetOrdersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetNotificationPreferencesRequestType = class(AbstractRequestType)
  private
    FApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType;
    FUserDeliveryPreferenceArray: NotificationEnableArrayType;
    FUserData: NotificationUserDataType;
    FEventProperty: NotificationEventPropertyType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType read FApplicationDeliveryPreferences write FApplicationDeliveryPreferences;
    property UserDeliveryPreferenceArray: NotificationEnableArrayType read FUserDeliveryPreferenceArray write FUserDeliveryPreferenceArray;
    property UserData: NotificationUserDataType read FUserData write FUserData;
    property EventProperty: NotificationEventPropertyType read FEventProperty write FEventProperty;
  end;

  SetNotificationPreferencesRequest = SetNotificationPreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyeBayRemindersRequestType = class(AbstractRequestType)
  private
    FBuyingReminders: ReminderCustomizationType;
    FSellingReminders: ReminderCustomizationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BuyingReminders: ReminderCustomizationType read FBuyingReminders write FBuyingReminders;
    property SellingReminders: ReminderCustomizationType read FSellingReminders write FSellingReminders;
  end;

  GetMyeBayRemindersRequest = GetMyeBayRemindersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyeBayBuyingRequestType = class(AbstractRequestType)
  private
    FWatchList: ItemListCustomizationType;
    FBidList: ItemListCustomizationType;
    FBestOfferList: ItemListCustomizationType;
    FWonList: ItemListCustomizationType;
    FLostList: ItemListCustomizationType;
    FFavoriteSearches: MyeBaySelectionType;
    FFavoriteSellers: MyeBaySelectionType;
    FSecondChanceOffer: MyeBaySelectionType;
    FBidAssistantList: BidAssistantListType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property WatchList: ItemListCustomizationType read FWatchList write FWatchList;
    property BidList: ItemListCustomizationType read FBidList write FBidList;
    property BestOfferList: ItemListCustomizationType read FBestOfferList write FBestOfferList;
    property WonList: ItemListCustomizationType read FWonList write FWonList;
    property LostList: ItemListCustomizationType read FLostList write FLostList;
    property FavoriteSearches: MyeBaySelectionType read FFavoriteSearches write FFavoriteSearches;
    property FavoriteSellers: MyeBaySelectionType read FFavoriteSellers write FFavoriteSellers;
    property SecondChanceOffer: MyeBaySelectionType read FSecondChanceOffer write FSecondChanceOffer;
    property BidAssistantList: BidAssistantListType read FBidAssistantList write FBidAssistantList;
  end;

  GetMyeBayBuyingRequest = GetMyeBayBuyingRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyeBaySellingRequestType = class(AbstractRequestType)
  private
    FScheduledList: ItemListCustomizationType;
    FActiveList: ItemListCustomizationType;
    FSoldList: ItemListCustomizationType;
    FUnsoldList: ItemListCustomizationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ScheduledList: ItemListCustomizationType read FScheduledList write FScheduledList;
    property ActiveList: ItemListCustomizationType read FActiveList write FActiveList;
    property SoldList: ItemListCustomizationType read FSoldList write FSoldList;
    property UnsoldList: ItemListCustomizationType read FUnsoldList write FUnsoldList;
  end;

  GetMyeBaySellingRequest = GetMyeBaySellingRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetMessagePreferencesRequestType = class(AbstractRequestType)
  private
    FASQPreferences: ASQPreferencesType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ASQPreferences: ASQPreferencesType read FASQPreferences write FASQPreferences;
  end;

  SetMessagePreferencesRequest = SetMessagePreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoryListingsRequestType = class(AbstractRequestType)
  private
    FMotorsGermanySearchable: Boolean;
    FCategoryID: WideString;
    FAdFormat: Boolean;
    FFreeShipping: Boolean;
    FCurrency: CurrencyCodeType;
    FItemTypeFilter: ItemTypeFilterCodeType;
    FSearchType: CategoryListingsSearchCodeType;
    FOrderBy: CategoryListingsOrderCodeType;
    FPagination: PaginationType;
    FSearchLocation: SearchLocationType;
    FProximitySearch: ProximitySearchType;
    FIncludeGetItFastItems: Boolean;
    FPaymentMethod: PaymentMethodSearchCodeType;
    FIncludeCondition: Boolean;
    FIncludeFeedback: Boolean;
    FLocalSearchPostalCode: WideString;
    FMaxRelatedSearchKeywords: Integer;
    FGroup: GroupType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property MotorsGermanySearchable: Boolean read FMotorsGermanySearchable write FMotorsGermanySearchable;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property AdFormat: Boolean read FAdFormat write FAdFormat;
    property FreeShipping: Boolean read FFreeShipping write FFreeShipping;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
    property ItemTypeFilter: ItemTypeFilterCodeType read FItemTypeFilter write FItemTypeFilter;
    property SearchType: CategoryListingsSearchCodeType read FSearchType write FSearchType;
    property OrderBy: CategoryListingsOrderCodeType read FOrderBy write FOrderBy;
    property Pagination: PaginationType read FPagination write FPagination;
    property SearchLocation: SearchLocationType read FSearchLocation write FSearchLocation;
    property ProximitySearch: ProximitySearchType read FProximitySearch write FProximitySearch;
    property IncludeGetItFastItems: Boolean read FIncludeGetItFastItems write FIncludeGetItFastItems;
    property PaymentMethod: PaymentMethodSearchCodeType read FPaymentMethod write FPaymentMethod;
    property IncludeCondition: Boolean read FIncludeCondition write FIncludeCondition;
    property IncludeFeedback: Boolean read FIncludeFeedback write FIncludeFeedback;
    property LocalSearchPostalCode: WideString read FLocalSearchPostalCode write FLocalSearchPostalCode;
    property MaxRelatedSearchKeywords: Integer read FMaxRelatedSearchKeywords write FMaxRelatedSearchKeywords;
    property Group: GroupType read FGroup write FGroup;
  end;

  GetCategoryListingsRequest = GetCategoryListingsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetCartRequestType = class(AbstractRequestType)
  private
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
    FCartID: Int64;
    FShippingAddress: AddressType;
    FCheckoutCompleteRedirect: CheckoutCompleteRedirectType;
    FCartItemArray: CartItemArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType read FAffiliateTrackingDetails write FAffiliateTrackingDetails;
    property CartID: Int64 read FCartID write FCartID;
    property ShippingAddress: AddressType read FShippingAddress write FShippingAddress;
    property CheckoutCompleteRedirect: CheckoutCompleteRedirectType read FCheckoutCompleteRedirect write FCheckoutCompleteRedirect;
    property CartItemArray: CartItemArrayType read FCartItemArray write FCartItemArray;
  end;

  SetCartRequest  = SetCartRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCartRequestType = class(AbstractRequestType)
  private
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
    FCartID: Int64;
    FShippingAddress: AddressType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType read FAffiliateTrackingDetails write FAffiliateTrackingDetails;
    property CartID: Int64 read FCartID write FCartID;
    property ShippingAddress: AddressType read FShippingAddress write FShippingAddress;
  end;

  GetCartRequest  = GetCartRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSearchResultsExpressRequestType = class(AbstractRequestType)
  private
    FQuery: WideString;
    FExternalProductIDType: ExternalProductCodeType;
    FExternalProductIDValue: WideString;
    FProductReferenceID: Int64;
    FDepartmentName: WideString;
    FAisleName: WideString;
    FProductTypeName: WideString;
    FHistogramSort: ExpressHistogramSortCodeType;
    FItemSort: ExpressItemSortCodeType;
    FProductSort: ExpressProductSortCodeType;
    FHighestPrice: AmountType;
    FLowestPrice: AmountType;
    FCondition: ConditionSelectionCodeType;
    FSellerID: UserIDType;
    FPostalCode: WideString;
    FHistogramDetails: ExpressDetailLevelCodeType;
    FProductDetails: ExpressDetailLevelCodeType;
    FItemDetails: ExpressDetailLevelCodeType;
    FEntriesPerPage: Integer;
    FPageNumber: Integer;
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Query: WideString read FQuery write FQuery;
    property ExternalProductIDType: ExternalProductCodeType read FExternalProductIDType write FExternalProductIDType;
    property ExternalProductIDValue: WideString read FExternalProductIDValue write FExternalProductIDValue;
    property ProductReferenceID: Int64 read FProductReferenceID write FProductReferenceID;
    property DepartmentName: WideString read FDepartmentName write FDepartmentName;
    property AisleName: WideString read FAisleName write FAisleName;
    property ProductTypeName: WideString read FProductTypeName write FProductTypeName;
    property HistogramSort: ExpressHistogramSortCodeType read FHistogramSort write FHistogramSort;
    property ItemSort: ExpressItemSortCodeType read FItemSort write FItemSort;
    property ProductSort: ExpressProductSortCodeType read FProductSort write FProductSort;
    property HighestPrice: AmountType read FHighestPrice write FHighestPrice;
    property LowestPrice: AmountType read FLowestPrice write FLowestPrice;
    property Condition: ConditionSelectionCodeType read FCondition write FCondition;
    property SellerID: UserIDType read FSellerID write FSellerID;
    property PostalCode: WideString read FPostalCode write FPostalCode;
    property HistogramDetails: ExpressDetailLevelCodeType read FHistogramDetails write FHistogramDetails;
    property ProductDetails: ExpressDetailLevelCodeType read FProductDetails write FProductDetails;
    property ItemDetails: ExpressDetailLevelCodeType read FItemDetails write FItemDetails;
    property EntriesPerPage: Integer read FEntriesPerPage write FEntriesPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType read FAffiliateTrackingDetails write FAffiliateTrackingDetails;
  end;

  GetSearchResultsExpressRequest = GetSearchResultsExpressRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  PlaceOfferRequestType = class(AbstractRequestType)
  private
    FOffer: OfferType;
    FItemID: ItemIDType;
    FBlockOnWarning: Boolean;
    FAffiliateTrackingDetails: AffiliateTrackingDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Offer: OfferType read FOffer write FOffer;
    property ItemID: ItemIDType read FItemID write FItemID;
    property BlockOnWarning: Boolean read FBlockOnWarning write FBlockOnWarning;
    property AffiliateTrackingDetails: AffiliateTrackingDetailsType read FAffiliateTrackingDetails write FAffiliateTrackingDetails;
  end;

  PlaceOfferRequest = PlaceOfferRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAccountRequestType = class(AbstractRequestType)
  private
    FAccountHistorySelection: AccountHistorySelectionCodeType;
    FInvoiceDate: TXSDateTime;
    FBeginDate: TXSDateTime;
    FEndDate: TXSDateTime;
    FPagination: PaginationType;
    FExcludeBalance: Boolean;
    FExcludeSummary: Boolean;
    FAccountEntrySortType: AccountEntrySortTypeCodeType;
    FCurrency: CurrencyCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AccountHistorySelection: AccountHistorySelectionCodeType read FAccountHistorySelection write FAccountHistorySelection;
    property InvoiceDate: TXSDateTime read FInvoiceDate write FInvoiceDate;
    property BeginDate: TXSDateTime read FBeginDate write FBeginDate;
    property EndDate: TXSDateTime read FEndDate write FEndDate;
    property Pagination: PaginationType read FPagination write FPagination;
    property ExcludeBalance: Boolean read FExcludeBalance write FExcludeBalance;
    property ExcludeSummary: Boolean read FExcludeSummary write FExcludeSummary;
    property AccountEntrySortType: AccountEntrySortTypeCodeType read FAccountEntrySortType write FAccountEntrySortType;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
  end;

  GetAccountRequest = GetAccountRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetExpressWishListRequestType = class(AbstractRequestType)
  private
    FUserID: WideString;
    FFirstName: WideString;
    FLastName: WideString;
    FWishListID: WideString;
    FSortOrder: WishListSortCodeType;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID: WideString read FUserID write FUserID;
    property FirstName: WideString read FFirstName write FFirstName;
    property LastName: WideString read FLastName write FLastName;
    property WishListID: WideString read FWishListID write FWishListID;
    property SortOrder: WishListSortCodeType read FSortOrder write FSortOrder;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetExpressWishListRequest = GetExpressWishListRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetFeedbackRequestType = class(AbstractRequestType)
  private
    FPagination: PaginationType;
    FUserID: UserIDType;
    FFeedbackID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Pagination: PaginationType read FPagination write FPagination;
    property UserID: UserIDType read FUserID write FUserID;
    property FeedbackID: WideString read FFeedbackID write FFeedbackID;
  end;

  GetFeedbackRequest = GetFeedbackRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemTransactionsRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FModTimeFrom: TXSDateTime;
    FModTimeTo: TXSDateTime;
    FTransactionID: WideString;
    FPagination: PaginationType;
    FIncludeFinalValueFee: Boolean;
    FIncludeContainingOrder: Boolean;
    FPlatform_: TransactionPlatformCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property ModTimeFrom: TXSDateTime read FModTimeFrom write FModTimeFrom;
    property ModTimeTo: TXSDateTime read FModTimeTo write FModTimeTo;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property Pagination: PaginationType read FPagination write FPagination;
    property IncludeFinalValueFee: Boolean read FIncludeFinalValueFee write FIncludeFinalValueFee;
    property IncludeContainingOrder: Boolean read FIncludeContainingOrder write FIncludeContainingOrder;
    property Platform_: TransactionPlatformCodeType read FPlatform_ write FPlatform_;
  end;

  GetItemTransactionsRequest = GetItemTransactionsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemsAwaitingFeedbackRequestType = class(AbstractRequestType)
  private
    FSort: ItemSortTypeCodeType;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Sort: ItemSortTypeCodeType read FSort write FSort;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetItemsAwaitingFeedbackRequest = GetItemsAwaitingFeedbackRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetLiveAuctionBiddersRequestType = class(AbstractRequestType)
  private
    FUserCatalogID: Integer;
    FBidderStatus: BidderStatusCodeType;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserCatalogID: Integer read FUserCatalogID write FUserCatalogID;
    property BidderStatus: BidderStatusCodeType read FBidderStatus write FBidderStatus;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetLiveAuctionBiddersRequest = GetLiveAuctionBiddersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMemberMessagesRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FMailMessageType: MessageTypeCodeType;
    FMessageStatus: MessageStatusTypeCodeType;
    FDisplayToPublic: Boolean;
    FStartCreationTime: TXSDateTime;
    FEndCreationTime: TXSDateTime;
    FPagination: PaginationType;
    FMemberMessageID: WideString;
    FSenderID: UserIDType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property MailMessageType: MessageTypeCodeType read FMailMessageType write FMailMessageType;
    property MessageStatus: MessageStatusTypeCodeType read FMessageStatus write FMessageStatus;
    property DisplayToPublic: Boolean read FDisplayToPublic write FDisplayToPublic;
    property StartCreationTime: TXSDateTime read FStartCreationTime write FStartCreationTime;
    property EndCreationTime: TXSDateTime read FEndCreationTime write FEndCreationTime;
    property Pagination: PaginationType read FPagination write FPagination;
    property MemberMessageID: WideString read FMemberMessageID write FMemberMessageID;
    property SenderID: UserIDType read FSenderID write FSenderID;
  end;

  GetMemberMessagesRequest = GetMemberMessagesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPopularKeywordsRequestType = class(AbstractRequestType)
  private
    FCategoryID: WideString;
    FIncludeChildCategories: Boolean;
    FMaxKeywordsRetrieved: Integer;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property IncludeChildCategories: Boolean read FIncludeChildCategories write FIncludeChildCategories;
    property MaxKeywordsRetrieved: Integer read FMaxKeywordsRetrieved write FMaxKeywordsRetrieved;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetPopularKeywordsRequest = GetPopularKeywordsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerPaymentsRequestType = class(AbstractRequestType)
  private
    FPaymentStatus: RCSPaymentStatusCodeType;
    FPaymentTimeFrom: TXSDateTime;
    FPaymentTimeTo: TXSDateTime;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaymentStatus: RCSPaymentStatusCodeType read FPaymentStatus write FPaymentStatus;
    property PaymentTimeFrom: TXSDateTime read FPaymentTimeFrom write FPaymentTimeFrom;
    property PaymentTimeTo: TXSDateTime read FPaymentTimeTo write FPaymentTimeTo;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetSellerPaymentsRequest = GetSellerPaymentsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserDisputesRequestType = class(AbstractRequestType)
  private
    FDisputeFilterType: DisputeFilterTypeCodeType;
    FDisputeSortType: DisputeSortTypeCodeType;
    FModTimeFrom: TXSDateTime;
    FModTimeTo: TXSDateTime;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DisputeFilterType: DisputeFilterTypeCodeType read FDisputeFilterType write FDisputeFilterType;
    property DisputeSortType: DisputeSortTypeCodeType read FDisputeSortType write FDisputeSortType;
    property ModTimeFrom: TXSDateTime read FModTimeFrom write FModTimeFrom;
    property ModTimeTo: TXSDateTime read FModTimeTo write FModTimeTo;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetUserDisputesRequest = GetUserDisputesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetVeROReportStatusRequestType = class(AbstractRequestType)
  private
    FVeROReportPacketID: Int64;
    FItemID: ItemIDType;
    FIncludeReportedItemDetails: Boolean;
    FTimeFrom: TXSDateTime;
    FTimeTo: TXSDateTime;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property VeROReportPacketID: Int64 read FVeROReportPacketID write FVeROReportPacketID;
    property ItemID: ItemIDType read FItemID write FItemID;
    property IncludeReportedItemDetails: Boolean read FIncludeReportedItemDetails write FIncludeReportedItemDetails;
    property TimeFrom: TXSDateTime read FTimeFrom write FTimeFrom;
    property TimeTo: TXSDateTime read FTimeTo write FTimeTo;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetVeROReportStatusRequest = GetVeROReportStatusRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetWantItNowSearchResultsRequestType = class(AbstractRequestType)
  private
    FCategoryID: WideString;
    FQuery: WideString;
    FSearchInDescription: Boolean;
    FSearchWorldwide: Boolean;
    FPagination: PaginationType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Query: WideString read FQuery write FQuery;
    property SearchInDescription: Boolean read FSearchInDescription write FSearchInDescription;
    property SearchWorldwide: Boolean read FSearchWorldwide write FSearchWorldwide;
    property Pagination: PaginationType read FPagination write FPagination;
  end;

  GetWantItNowSearchResultsRequest = GetWantItNowSearchResultsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  DeleteMyMessagesRequestType = class(AbstractRequestType)
  private
    FAlertIDs: MyMessagesAlertIDArrayType;
    FMessageIDs: MyMessagesMessageIDArrayType;
  public
    constructor Create; override;
  published
    property AlertIDs: MyMessagesAlertIDArrayType read FAlertIDs write FAlertIDs;
    property MessageIDs: MyMessagesMessageIDArrayType read FMessageIDs write FMessageIDs;
  end;

  DeleteMyMessagesRequest = DeleteMyMessagesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyMessagesRequestType = class(AbstractRequestType)
  private
    FAlertIDs: MyMessagesAlertIDArrayType;
    FMessageIDs: MyMessagesMessageIDArrayType;
    FFolderID: Int64;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AlertIDs: MyMessagesAlertIDArrayType read FAlertIDs write FAlertIDs;
    property MessageIDs: MyMessagesMessageIDArrayType read FMessageIDs write FMessageIDs;
    property FolderID: Int64 read FFolderID write FFolderID;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
  end;

  GetMyMessagesRequest = GetMyMessagesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseMyMessagesRequestType = class(AbstractRequestType)
  private
    FMessageIDs: MyMessagesMessageIDArrayType;
    FAlertIDs: MyMessagesAlertIDArrayType;
    FRead_: Boolean;
    FFlagged: Boolean;
    FFolderID: Int64;
  public
    constructor Create; override;
  published
    property MessageIDs: MyMessagesMessageIDArrayType read FMessageIDs write FMessageIDs;
    property AlertIDs: MyMessagesAlertIDArrayType read FAlertIDs write FAlertIDs;
    property Read_: Boolean read FRead_ write FRead_;
    property Flagged: Boolean read FFlagged write FFlagged;
    property FolderID: Int64 read FFolderID write FFolderID;
  end;

  ReviseMyMessagesRequest = ReviseMyMessagesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ApproveLiveAuctionBiddersRequestType = class(AbstractRequestType)
  private
    FUserCatalogID: Integer;
    FBidApproval: BidApprovalArrayType;
    FApproveAllPending: Boolean;
    FAllApprovedBiddingLimit: AmountType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserCatalogID: Integer read FUserCatalogID write FUserCatalogID;
    property BidApproval: BidApprovalArrayType read FBidApproval write FBidApproval;
    property ApproveAllPending: Boolean read FApproveAllPending write FApproveAllPending;
    property AllApprovedBiddingLimit: AmountType read FAllApprovedBiddingLimit write FAllApprovedBiddingLimit;
  end;

  ApproveLiveAuctionBiddersRequest = ApproveLiveAuctionBiddersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  CompleteSaleRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FTransactionID: WideString;
    FFeedbackInfo: FeedbackInfoType;
    FShipped: Boolean;
    FPaid: Boolean;
    FListingType: ListingTypeCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property FeedbackInfo: FeedbackInfoType read FFeedbackInfo write FFeedbackInfo;
    property Shipped: Boolean read FShipped write FShipped;
    property Paid: Boolean read FPaid write FPaid;
    property ListingType: ListingTypeCodeType read FListingType write FListingType;
  end;

  CompleteSaleRequest = CompleteSaleRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseCheckoutStatusRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FTransactionID: WideString;
    FOrderID: WideString;
    FAmountPaid: AmountType;
    FPaymentMethodUsed: BuyerPaymentMethodCodeType;
    FCheckoutStatus: CompleteStatusCodeType;
    FShippingService: WideString;
    FShippingIncludedInTax: Boolean;
    FCheckoutMethod: CheckoutMethodCodeType;
    FInsuranceType: InsuranceSelectedCodeType;
    FPaymentStatus: RCSPaymentStatusCodeType;
    FAdjustmentAmount: AmountType;
    FShippingAddress: AddressType;
    FBuyerID: WideString;
    FShippingInsuranceCost: AmountType;
    FSalesTax: AmountType;
    FShippingCost: AmountType;
    FEncryptedID: WideString;
    FExternalTransaction: ExternalTransactionType;
    FMultipleSellerPaymentID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property OrderID: WideString read FOrderID write FOrderID;
    property AmountPaid: AmountType read FAmountPaid write FAmountPaid;
    property PaymentMethodUsed: BuyerPaymentMethodCodeType read FPaymentMethodUsed write FPaymentMethodUsed;
    property CheckoutStatus: CompleteStatusCodeType read FCheckoutStatus write FCheckoutStatus;
    property ShippingService: WideString read FShippingService write FShippingService;
    property ShippingIncludedInTax: Boolean read FShippingIncludedInTax write FShippingIncludedInTax;
    property CheckoutMethod: CheckoutMethodCodeType read FCheckoutMethod write FCheckoutMethod;
    property InsuranceType: InsuranceSelectedCodeType read FInsuranceType write FInsuranceType;
    property PaymentStatus: RCSPaymentStatusCodeType read FPaymentStatus write FPaymentStatus;
    property AdjustmentAmount: AmountType read FAdjustmentAmount write FAdjustmentAmount;
    property ShippingAddress: AddressType read FShippingAddress write FShippingAddress;
    property BuyerID: WideString read FBuyerID write FBuyerID;
    property ShippingInsuranceCost: AmountType read FShippingInsuranceCost write FShippingInsuranceCost;
    property SalesTax: AmountType read FSalesTax write FSalesTax;
    property ShippingCost: AmountType read FShippingCost write FShippingCost;
    property EncryptedID: WideString read FEncryptedID write FEncryptedID;
    property ExternalTransaction: ExternalTransactionType read FExternalTransaction write FExternalTransaction;
    property MultipleSellerPaymentID: WideString read FMultipleSellerPaymentID write FMultipleSellerPaymentID;
  end;

  ReviseCheckoutStatusRequest = ReviseCheckoutStatusRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddOrderRequestType = class(AbstractRequestType)
  private
    FOrder: OrderType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Order: OrderType read FOrder write FOrder;
  end;

  AddOrderRequest = AddOrderRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddMemberMessageAAQToPartnerRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FMemberMessage: MemberMessageType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property MemberMessage: MemberMessageType read FMemberMessage write FMemberMessage;
  end;

  AddMemberMessageAAQToPartnerRequest = AddMemberMessageAAQToPartnerRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddMemberMessageRTQRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FMemberMessage: MemberMessageType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property MemberMessage: MemberMessageType read FMemberMessage write FMemberMessage;
  end;

  AddMemberMessageRTQRequest = AddMemberMessageRTQRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetTaxTableRequestType = class(AbstractRequestType)
  private
    FTaxTable: TaxTableType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property TaxTable: TaxTableType read FTaxTable write FTaxTable;
  end;

  SetTaxTableRequest = SetTaxTableRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SendInvoiceRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FTransactionID: WideString;
    FOrderID: OrderIDType;
    FInternationalShippingServiceOptions: InternationalShippingServiceOptionsType;
    FShippingServiceOptions: ShippingServiceOptionsType;
    FSalesTax: SalesTaxType;
    FInsuranceOption: InsuranceOptionCodeType;
    FInsuranceFee: AmountType;
    FPaymentMethods: BuyerPaymentMethodCodeType;
    FPayPalEmailAddress: WideString;
    FCheckoutInstructions: WideString;
    FEmailCopyToSeller: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property OrderID: OrderIDType read FOrderID write FOrderID;
    property InternationalShippingServiceOptions: InternationalShippingServiceOptionsType read FInternationalShippingServiceOptions write FInternationalShippingServiceOptions;
    property ShippingServiceOptions: ShippingServiceOptionsType read FShippingServiceOptions write FShippingServiceOptions;
    property SalesTax: SalesTaxType read FSalesTax write FSalesTax;
    property InsuranceOption: InsuranceOptionCodeType read FInsuranceOption write FInsuranceOption;
    property InsuranceFee: AmountType read FInsuranceFee write FInsuranceFee;
    property PaymentMethods: BuyerPaymentMethodCodeType read FPaymentMethods write FPaymentMethods;
    property PayPalEmailAddress: WideString read FPayPalEmailAddress write FPayPalEmailAddress;
    property CheckoutInstructions: WideString read FCheckoutInstructions write FCheckoutInstructions;
    property EmailCopyToSeller: Boolean read FEmailCopyToSeller write FEmailCopyToSeller;
  end;

  SendInvoiceRequest = SendInvoiceRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetContextualKeywordsRequestType = class(AbstractRequestType)
  private
    FURL: WideString;
    FEncoding: WideString;
    FCategoryID: WideString;
  public
    constructor Create; override;
  published
    property URL: WideString read FURL write FURL;
    property Encoding: WideString read FEncoding write FEncoding;
    property CategoryID: WideString read FCategoryID write FCategoryID;
  end;

  GetContextualKeywordsRequest = GetContextualKeywordsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  VerifyAddItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FIncludeExpressRequirements: Boolean;
    FExternalProductID: ExternalProductIDType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property IncludeExpressRequirements: Boolean read FIncludeExpressRequirements write FIncludeExpressRequirements;
    property ExternalProductID: ExternalProductIDType read FExternalProductID write FExternalProductID;
  end;

  VerifyAddItemRequest = VerifyAddItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPromotionRulesRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FStoreCategoryID: Int64;
    FPromotionMethod: PromotionMethodCodeType;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property StoreCategoryID: Int64 read FStoreCategoryID write FStoreCategoryID;
    property PromotionMethod: PromotionMethodCodeType read FPromotionMethod write FPromotionMethod;
  end;

  GetPromotionRulesRequest = GetPromotionRulesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPromotionalSaleDetailsRequestType = class(AbstractRequestType)
  private
    FPromotionalSaleID: Int64;
  public
    constructor Create; override;
  published
    property PromotionalSaleID: Int64 read FPromotionalSaleID write FPromotionalSaleID;
  end;

  GetPromotionalSaleDetailsRequest = GetPromotionalSaleDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreRequestType = class(AbstractRequestType)
  private
    FCategoryStructureOnly: Boolean;
    FRootCategoryID: Int64;
    FLevelLimit: Integer;
    FUserID: UserIDType;
  public
    constructor Create; override;
  published
    property CategoryStructureOnly: Boolean read FCategoryStructureOnly write FCategoryStructureOnly;
    property RootCategoryID: Int64 read FRootCategoryID write FRootCategoryID;
    property LevelLimit: Integer read FLevelLimit write FLevelLimit;
    property UserID: UserIDType read FUserID write FUserID;
  end;

  GetStoreRequest = GetStoreRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreCategoryUpdateStatusRequestType = class(AbstractRequestType)
  private
    FTaskID: Int64;
  public
    constructor Create; override;
  published
    property TaskID: Int64 read FTaskID write FTaskID;
  end;

  GetStoreCategoryUpdateStatusRequest = GetStoreCategoryUpdateStatusRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreCustomPageRequestType = class(AbstractRequestType)
  private
    FPageID: Int64;
  public
    constructor Create; override;
  published
    property PageID: Int64 read FPageID write FPageID;
  end;

  GetStoreCustomPageRequest = GetStoreCustomPageRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetVeROReasonCodeDetailsRequestType = class(AbstractRequestType)
  private
    FReasonCodeID: Int64;
    FReturnAllSites: Boolean;
  public
    constructor Create; override;
  published
    property ReasonCodeID: Int64 read FReasonCodeID write FReasonCodeID;
    property ReturnAllSites: Boolean read FReturnAllSites write FReturnAllSites;
  end;

  GetVeROReasonCodeDetailsRequest = GetVeROReasonCodeDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseMyMessagesFoldersRequestType = class(AbstractRequestType)
  private
    FOperation: MyMessagesFolderOperationCodeType;
    FFolderID: Int64;
    FFolderName: WideString;
  public
    constructor Create; override;
  published
    property Operation: MyMessagesFolderOperationCodeType read FOperation write FOperation;
    property FolderID: Int64 read FFolderID write FFolderID;
    property FolderName: WideString read FFolderName write FFolderName;
  end;

  ReviseMyMessagesFoldersRequest = ReviseMyMessagesFoldersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddSecondChanceItemRequestType = class(AbstractRequestType)
  private
    FRecipientBidderUserID: UserIDType;
    FBuyItNowPrice: AmountType;
    FDuration: SecondChanceOfferDurationCodeType;
    FItemID: ItemIDType;
    FSellerMessage: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RecipientBidderUserID: UserIDType read FRecipientBidderUserID write FRecipientBidderUserID;
    property BuyItNowPrice: AmountType read FBuyItNowPrice write FBuyItNowPrice;
    property Duration: SecondChanceOfferDurationCodeType read FDuration write FDuration;
    property ItemID: ItemIDType read FItemID write FItemID;
    property SellerMessage: WideString read FSellerMessage write FSellerMessage;
  end;

  AddSecondChanceItemRequest = AddSecondChanceItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddTransactionConfirmationItemRequestType = class(AbstractRequestType)
  private
    FRecipientUserID: UserIDType;
    FVerifyEligibilityOnly: WideString;
    FRecipientPostalCode: WideString;
    FRecipientRelationType: RecipientRelationCodeType;
    FNegotiatedPrice: AmountType;
    FListingDuration: SecondChanceOfferDurationCodeType;
    FItemID: ItemIDType;
    FComments: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RecipientUserID: UserIDType read FRecipientUserID write FRecipientUserID;
    property VerifyEligibilityOnly: WideString read FVerifyEligibilityOnly write FVerifyEligibilityOnly;
    property RecipientPostalCode: WideString read FRecipientPostalCode write FRecipientPostalCode;
    property RecipientRelationType: RecipientRelationCodeType read FRecipientRelationType write FRecipientRelationType;
    property NegotiatedPrice: AmountType read FNegotiatedPrice write FNegotiatedPrice;
    property ListingDuration: SecondChanceOfferDurationCodeType read FListingDuration write FListingDuration;
    property ItemID: ItemIDType read FItemID write FItemID;
    property Comments: WideString read FComments write FComments;
  end;

  AddTransactionConfirmationItemRequest = AddTransactionConfirmationItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  IssueRefundRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FTransactionID: WideString;
    FRefundReason: RefundReasonCodeType;
    FRefundType: RefundTypeCodeType;
    FRefundAmount: AmountType;
    FRefundMessage: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property RefundReason: RefundReasonCodeType read FRefundReason write FRefundReason;
    property RefundType: RefundTypeCodeType read FRefundType write FRefundType;
    property RefundAmount: AmountType read FRefundAmount write FRefundAmount;
    property RefundMessage: WideString read FRefundMessage write FRefundMessage;
  end;

  IssueRefundRequest = IssueRefundRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RespondToBestOfferRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FBestOfferID: BestOfferIDType;
    FAction: BestOfferActionCodeType;
    FSellerResponse: WideString;
    FCounterOfferPrice: AmountType;
    FCounterOfferQuantity: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property BestOfferID: BestOfferIDType read FBestOfferID write FBestOfferID;
    property Action: BestOfferActionCodeType read FAction write FAction;
    property SellerResponse: WideString read FSellerResponse write FSellerResponse;
    property CounterOfferPrice: AmountType read FCounterOfferPrice write FCounterOfferPrice;
    property CounterOfferQuantity: Integer read FCounterOfferQuantity write FCounterOfferQuantity;
  end;

  RespondToBestOfferRequest = RespondToBestOfferRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  VerifyAddSecondChanceItemRequestType = class(AbstractRequestType)
  private
    FRecipientBidderUserID: UserIDType;
    FBuyItNowPrice: AmountType;
    FDuration: SecondChanceOfferDurationCodeType;
    FItemID: ItemIDType;
    FSellerMessage: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RecipientBidderUserID: UserIDType read FRecipientBidderUserID write FRecipientBidderUserID;
    property BuyItNowPrice: AmountType read FBuyItNowPrice write FBuyItNowPrice;
    property Duration: SecondChanceOfferDurationCodeType read FDuration write FDuration;
    property ItemID: ItemIDType read FItemID write FItemID;
    property SellerMessage: WideString read FSellerMessage write FSellerMessage;
  end;

  VerifyAddSecondChanceItemRequest = VerifyAddSecondChanceItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  FetchTokenRequestType = class(AbstractRequestType)
  private
    FSecretID: WideString;
    FIncludeRESTToken: Boolean;
  public
    constructor Create; override;
  published
    property SecretID: WideString read FSecretID write FSecretID;
    property IncludeRESTToken: Boolean read FIncludeRESTToken write FIncludeRESTToken;
  end;

  FetchTokenRequest = FetchTokenRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAdFormatLeadsRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FStatus: MessageStatusTypeCodeType;
    FIncludeMemberMessages: Boolean;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Status: MessageStatusTypeCodeType read FStatus write FStatus;
    property IncludeMemberMessages: Boolean read FIncludeMemberMessages write FIncludeMemberMessages;
  end;

  GetAdFormatLeadsRequest = GetAdFormatLeadsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAllBiddersRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FCallMode: GetAllBiddersModeCodeType;
    FIncludeBiddingSummary: Boolean;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property CallMode: GetAllBiddersModeCodeType read FCallMode write FCallMode;
    property IncludeBiddingSummary: Boolean read FIncludeBiddingSummary write FIncludeBiddingSummary;
  end;

  GetAllBiddersRequest = GetAllBiddersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAttributesCSRequestType = class(AbstractRequestType)
  private
    FAttributeSystemVersion: WideString;
    FAttributeSetID: Integer;
    FIncludeCategoryMappingDetails: Boolean;
    FDigitalDelivery: Boolean;
  public
    constructor Create; override;
  published
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property AttributeSetID: Integer read FAttributeSetID write FAttributeSetID;
    property IncludeCategoryMappingDetails: Boolean read FIncludeCategoryMappingDetails write FIncludeCategoryMappingDetails;
    property DigitalDelivery: Boolean read FDigitalDelivery write FDigitalDelivery;
  end;

  GetAttributesCSRequest = GetAttributesCSRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetBidderListRequestType = class(AbstractRequestType)
  private
    FActiveItemsOnly: Boolean;
    FEndTimeFrom: TXSDateTime;
    FEndTimeTo: TXSDateTime;
    FUserID: UserIDType;
    FGranularityLevel: GranularityLevelCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ActiveItemsOnly: Boolean read FActiveItemsOnly write FActiveItemsOnly;
    property EndTimeFrom: TXSDateTime read FEndTimeFrom write FEndTimeFrom;
    property EndTimeTo: TXSDateTime read FEndTimeTo write FEndTimeTo;
    property UserID: UserIDType read FUserID write FUserID;
    property GranularityLevel: GranularityLevelCodeType read FGranularityLevel write FGranularityLevel;
  end;

  GetBidderListRequest = GetBidderListRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoriesRequestType = class(AbstractRequestType)
  private
    FCategorySiteID: WideString;
    FCategoryParent: WideString;
    FLevelLimit: Integer;
    FViewAllNodes: Boolean;
  public
    constructor Create; override;
  published
    property CategorySiteID: WideString read FCategorySiteID write FCategorySiteID;
    property CategoryParent: WideString read FCategoryParent write FCategoryParent;
    property LevelLimit: Integer read FLevelLimit write FLevelLimit;
    property ViewAllNodes: Boolean read FViewAllNodes write FViewAllNodes;
  end;

  GetCategoriesRequest = GetCategoriesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoryFeaturesRequestType = class(AbstractRequestType)
  private
    FCategoryID: WideString;
    FLevelLimit: Integer;
    FViewAllNodes: Boolean;
    FFeatureID: FeatureIDCodeType;
  public
    constructor Create; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property LevelLimit: Integer read FLevelLimit write FLevelLimit;
    property ViewAllNodes: Boolean read FViewAllNodes write FViewAllNodes;
    property FeatureID: FeatureIDCodeType read FFeatureID write FFeatureID;
  end;

  GetCategoryFeaturesRequest = GetCategoryFeaturesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCharitiesRequestType = class(AbstractRequestType)
  private
    FCharityID: WideString;
    FCharityName: WideString;
    FQuery: WideString;
    FCharityRegion: Integer;
    FCharityDomain: Integer;
    FIncludeDescription: Boolean;
    FMatchType: StringMatchCodeType;
  public
    constructor Create; override;
  published
    property CharityID: WideString read FCharityID write FCharityID;
    property CharityName: WideString read FCharityName write FCharityName;
    property Query: WideString read FQuery write FQuery;
    property CharityRegion: Integer read FCharityRegion write FCharityRegion;
    property CharityDomain: Integer read FCharityDomain write FCharityDomain;
    property IncludeDescription: Boolean read FIncludeDescription write FIncludeDescription;
    property MatchType: StringMatchCodeType read FMatchType write FMatchType;
  end;

  GetCharitiesRequest = GetCharitiesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetDescriptionTemplatesRequestType = class(AbstractRequestType)
  private
    FCategoryID: WideString;
    FLastModifiedTime: TXSDateTime;
    FMotorVehicles: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property LastModifiedTime: TXSDateTime read FLastModifiedTime write FLastModifiedTime;
    property MotorVehicles: Boolean read FMotorVehicles write FMotorVehicles;
  end;

  GetDescriptionTemplatesRequest = GetDescriptionTemplatesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FIncludeExpressRequirements: Boolean;
    FIncludeWatchCount: Boolean;
    FIncludeCrossPromotion: Boolean;
    FIncludeItemSpecifics: Boolean;
    FIncludeTaxTable: Boolean;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property IncludeExpressRequirements: Boolean read FIncludeExpressRequirements write FIncludeExpressRequirements;
    property IncludeWatchCount: Boolean read FIncludeWatchCount write FIncludeWatchCount;
    property IncludeCrossPromotion: Boolean read FIncludeCrossPromotion write FIncludeCrossPromotion;
    property IncludeItemSpecifics: Boolean read FIncludeItemSpecifics write FIncludeItemSpecifics;
    property IncludeTaxTable: Boolean read FIncludeTaxTable write FIncludeTaxTable;
  end;

  GetItemRequest  = GetItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMessagePreferencesRequestType = class(AbstractRequestType)
  private
    FSellerID: UserIDType;
    FIncludeASQPreferences: Boolean;
  public
    constructor Create; override;
  published
    property SellerID: UserIDType read FSellerID write FSellerID;
    property IncludeASQPreferences: Boolean read FIncludeASQPreferences write FIncludeASQPreferences;
  end;

  GetMessagePreferencesRequest = GetMessagePreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerEventsRequestType = class(AbstractRequestType)
  private
    FUserID: UserIDType;
    FStartTimeFrom: TXSDateTime;
    FStartTimeTo: TXSDateTime;
    FEndTimeFrom: TXSDateTime;
    FEndTimeTo: TXSDateTime;
    FModTimeFrom: TXSDateTime;
    FModTimeTo: TXSDateTime;
    FNewItemFilter: Boolean;
    FIncludeWatchCount: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID: UserIDType read FUserID write FUserID;
    property StartTimeFrom: TXSDateTime read FStartTimeFrom write FStartTimeFrom;
    property StartTimeTo: TXSDateTime read FStartTimeTo write FStartTimeTo;
    property EndTimeFrom: TXSDateTime read FEndTimeFrom write FEndTimeFrom;
    property EndTimeTo: TXSDateTime read FEndTimeTo write FEndTimeTo;
    property ModTimeFrom: TXSDateTime read FModTimeFrom write FModTimeFrom;
    property ModTimeTo: TXSDateTime read FModTimeTo write FModTimeTo;
    property NewItemFilter: Boolean read FNewItemFilter write FNewItemFilter;
    property IncludeWatchCount: Boolean read FIncludeWatchCount write FIncludeWatchCount;
  end;

  GetSellerEventsRequest = GetSellerEventsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FUserID: WideString;
    FIncludeExpressRequirements: Boolean;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property UserID: WideString read FUserID write FUserID;
    property IncludeExpressRequirements: Boolean read FIncludeExpressRequirements write FIncludeExpressRequirements;
  end;

  GetUserRequest  = GetUserRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserPreferencesRequestType = class(AbstractRequestType)
  private
    FShowBidderNoticePreferences: Boolean;
    FShowCombinedPaymentPreferences: Boolean;
    FShowCrossPromotionPreferences: Boolean;
    FShowSellerPaymentPreferences: Boolean;
    FShowEndOfAuctionEmailPreferences: Boolean;
    FShowSellerFavoriteItemPreferences: Boolean;
    FShowProStoresPreferences: Boolean;
  public
    constructor Create; override;
  published
    property ShowBidderNoticePreferences: Boolean read FShowBidderNoticePreferences write FShowBidderNoticePreferences;
    property ShowCombinedPaymentPreferences: Boolean read FShowCombinedPaymentPreferences write FShowCombinedPaymentPreferences;
    property ShowCrossPromotionPreferences: Boolean read FShowCrossPromotionPreferences write FShowCrossPromotionPreferences;
    property ShowSellerPaymentPreferences: Boolean read FShowSellerPaymentPreferences write FShowSellerPaymentPreferences;
    property ShowEndOfAuctionEmailPreferences: Boolean read FShowEndOfAuctionEmailPreferences write FShowEndOfAuctionEmailPreferences;
    property ShowSellerFavoriteItemPreferences: Boolean read FShowSellerFavoriteItemPreferences write FShowSellerFavoriteItemPreferences;
    property ShowProStoresPreferences: Boolean read FShowProStoresPreferences write FShowProStoresPreferences;
  end;

  GetUserPreferencesRequest = GetUserPreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RemoveFromWatchListRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FRemoveAllItems: Boolean;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property RemoveAllItems: Boolean read FRemoveAllItems write FRemoveAllItems;
  end;

  RemoveFromWatchListRequest = RemoveFromWatchListRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ValidateChallengeInputRequestType = class(AbstractRequestType)
  private
    FChallengeToken: WideString;
    FUserInput: WideString;
    FKeepTokenValid: Boolean;
  public
    constructor Create; override;
  published
    property ChallengeToken: WideString read FChallengeToken write FChallengeToken;
    property UserInput: WideString read FUserInput write FUserInput;
    property KeepTokenValid: Boolean read FKeepTokenValid write FKeepTokenValid;
  end;

  ValidateChallengeInputRequest = ValidateChallengeInputRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ValidateTestUserRegistrationRequestType = class(AbstractRequestType)
  private
    FFeedbackScore: Integer;
    FRegistrationDate: TXSDateTime;
    FSubscribeSA: Boolean;
    FSubscribeSAPro: Boolean;
    FSubscribeSM: Boolean;
    FSubscribeSMPro: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property FeedbackScore: Integer read FFeedbackScore write FFeedbackScore;
    property RegistrationDate: TXSDateTime read FRegistrationDate write FRegistrationDate;
    property SubscribeSA: Boolean read FSubscribeSA write FSubscribeSA;
    property SubscribeSAPro: Boolean read FSubscribeSAPro write FSubscribeSAPro;
    property SubscribeSM: Boolean read FSubscribeSM write FSubscribeSM;
    property SubscribeSMPro: Boolean read FSubscribeSMPro write FSubscribeSMPro;
  end;

  ValidateTestUserRegistrationRequest = ValidateTestUserRegistrationRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
  end;

  AddItemRequest  = AddItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddLiveAuctionItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
  end;

  AddLiveAuctionItemRequest = AddLiveAuctionItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RelistItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FDeletedField: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property DeletedField: WideString read FDeletedField write FDeletedField;
  end;

  RelistItemRequest = RelistItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FDeletedField: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property DeletedField: WideString read FDeletedField write FDeletedField;
  end;

  ReviseItemRequest = ReviseItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseLiveAuctionItemRequestType = class(AbstractRequestType)
  private
    FItem: ItemType;
    FDeletedField: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
    property DeletedField: WideString read FDeletedField write FDeletedField;
  end;

  ReviseLiveAuctionItemRequest = ReviseLiveAuctionItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddDisputeResponseRequestType = class(AbstractRequestType)
  private
    FDisputeID: DisputeIDType;
    FMessageText: WideString;
    FDisputeActivity: DisputeActivityCodeType;
    FShippingCarrierUsed: WideString;
    FShipmentTrackNumber: WideString;
    FShippingTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DisputeID: DisputeIDType read FDisputeID write FDisputeID;
    property MessageText: WideString read FMessageText write FMessageText;
    property DisputeActivity: DisputeActivityCodeType read FDisputeActivity write FDisputeActivity;
    property ShippingCarrierUsed: WideString read FShippingCarrierUsed write FShippingCarrierUsed;
    property ShipmentTrackNumber: WideString read FShipmentTrackNumber write FShipmentTrackNumber;
    property ShippingTime: TXSDateTime read FShippingTime write FShippingTime;
  end;

  AddDisputeResponseRequest = AddDisputeResponseRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategorySpecificsRequestType = class(AbstractRequestType)
  private
    FCategoryID: WideString;
    FLastUpdateTime: TXSDateTime;
    FMaxNames: Integer;
    FMaxValuesPerName: Integer;
    FName_: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property LastUpdateTime: TXSDateTime read FLastUpdateTime write FLastUpdateTime;
    property MaxNames: Integer read FMaxNames write FMaxNames;
    property MaxValuesPerName: Integer read FMaxValuesPerName write FMaxValuesPerName;
    property Name_: WideString read FName_ write FName_;
  end;

  GetCategorySpecificsRequest = GetCategorySpecificsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetNotificationsUsageRequestType = class(AbstractRequestType)
  private
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
    FItemID: ItemIDType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
    property ItemID: ItemIDType read FItemID write FItemID;
  end;

  GetNotificationsUsageRequest = GetNotificationsUsageRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddDisputeRequestType = class(AbstractRequestType)
  private
    FDisputeExplanation: DisputeExplanationCodeType;
    FDisputeReason: DisputeReasonCodeType;
    FItemID: ItemIDType;
    FTransactionID: WideString;
  public
    constructor Create; override;
  published
    property DisputeExplanation: DisputeExplanationCodeType read FDisputeExplanation write FDisputeExplanation;
    property DisputeReason: DisputeReasonCodeType read FDisputeReason write FDisputeReason;
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
  end;

  AddDisputeRequest = AddDisputeRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddToItemDescriptionRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FDescription: WideString;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Description: WideString read FDescription write FDescription;
  end;

  AddToItemDescriptionRequest = AddToItemDescriptionRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  EndItemRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FEndingReason: EndReasonCodeType;
    FSellerInventoryID: WideString;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property EndingReason: EndReasonCodeType read FEndingReason write FEndingReason;
    property SellerInventoryID: WideString read FSellerInventoryID write FSellerInventoryID;
  end;

  EndItemRequest  = EndItemRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetApiAccessRulesRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetApiAccessRulesRequest = GetApiAccessRulesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAttributesXSLRequestType = class(AbstractRequestType)
  private
    FFileName: WideString;
    FFileVersion: WideString;
  public
    constructor Create; override;
  published
    property FileName: WideString read FFileName write FFileName;
    property FileVersion: WideString read FFileVersion write FFileVersion;
  end;

  GetAttributesXSLRequest = GetAttributesXSLRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetBestOffersRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FBestOfferID: BestOfferIDType;
    FBestOfferStatus: BestOfferStatusCodeType;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property BestOfferID: BestOfferIDType read FBestOfferID write FBestOfferID;
    property BestOfferStatus: BestOfferStatusCodeType read FBestOfferStatus write FBestOfferStatus;
  end;

  GetBestOffersRequest = GetBestOffersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategory2CSRequestType = class(AbstractRequestType)
  private
    FCategoryID: WideString;
    FAttributeSystemVersion: WideString;
  public
    constructor Create; override;
  published
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
  end;

  GetCategory2CSRequest = GetCategory2CSRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoryMappingsRequestType = class(AbstractRequestType)
  private
    FCategoryVersion: WideString;
  public
    constructor Create; override;
  published
    property CategoryVersion: WideString read FCategoryVersion write FCategoryVersion;
  end;

  GetCategoryMappingsRequest = GetCategoryMappingsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetChallengeTokenRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetChallengeTokenRequest = GetChallengeTokenRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCrossPromotionsRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FPromotionMethod: PromotionMethodCodeType;
    FPromotionViewMode: TradingRoleCodeType;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property PromotionMethod: PromotionMethodCodeType read FPromotionMethod write FPromotionMethod;
    property PromotionViewMode: TradingRoleCodeType read FPromotionViewMode write FPromotionViewMode;
  end;

  GetCrossPromotionsRequest = GetCrossPromotionsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetDisputeRequestType = class(AbstractRequestType)
  private
    FDisputeID: DisputeIDType;
  public
    constructor Create; override;
  published
    property DisputeID: DisputeIDType read FDisputeID write FDisputeID;
  end;

  GetDisputeRequest = GetDisputeRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetHighBiddersRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
  end;

  GetHighBiddersRequest = GetHighBiddersRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemShippingRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FQuantitySold: Integer;
    FDestinationPostalCode: WideString;
    FDestinationCountryCode: CountryCodeType;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property QuantitySold: Integer read FQuantitySold write FQuantitySold;
    property DestinationPostalCode: WideString read FDestinationPostalCode write FDestinationPostalCode;
    property DestinationCountryCode: CountryCodeType read FDestinationCountryCode write FDestinationCountryCode;
  end;

  GetItemShippingRequest = GetItemShippingRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetLiveAuctionCatalogDetailsRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetLiveAuctionCatalogDetailsRequest = GetLiveAuctionCatalogDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetNotificationPreferencesRequestType = class(AbstractRequestType)
  private
    FPreferenceLevel: NotificationRoleCodeType;
  public
    constructor Create; override;
  published
    property PreferenceLevel: NotificationRoleCodeType read FPreferenceLevel write FPreferenceLevel;
  end;

  GetNotificationPreferencesRequest = GetNotificationPreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPictureManagerDetailsRequestType = class(AbstractRequestType)
  private
    FFolderID: Integer;
    FPictureURL: WideString;
    FPictureManagerDetailLevel: PictureManagerDetailLevelCodeType;
  public
    constructor Create; override;
  published
    property FolderID: Integer read FFolderID write FFolderID;
    property PictureURL: WideString read FPictureURL write FPictureURL;
    property PictureManagerDetailLevel: PictureManagerDetailLevelCodeType read FPictureManagerDetailLevel write FPictureManagerDetailLevel;
  end;

  GetPictureManagerDetailsRequest = GetPictureManagerDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPictureManagerOptionsRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetPictureManagerOptionsRequest = GetPictureManagerOptionsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductFinderRequestType = class(AbstractRequestType)
  private
    FAttributeSystemVersion: WideString;
    FProductFinderID: Integer;
  public
    constructor Create; override;
  published
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property ProductFinderID: Integer read FProductFinderID write FProductFinderID;
  end;

  GetProductFinderRequest = GetProductFinderRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductFinderXSLRequestType = class(AbstractRequestType)
  private
    FFileName: WideString;
    FFileVersion: WideString;
  public
    constructor Create; override;
  published
    property FileName: WideString read FFileName write FFileName;
    property FileVersion: WideString read FFileVersion write FFileVersion;
  end;

  GetProductFinderXSLRequest = GetProductFinderXSLRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductSearchPageRequestType = class(AbstractRequestType)
  private
    FAttributeSystemVersion: WideString;
    FAttributeSetID: Integer;
  public
    constructor Create; override;
  published
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property AttributeSetID: Integer read FAttributeSetID write FAttributeSetID;
  end;

  GetProductSearchPageRequest = GetProductSearchPageRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetReturnURLRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetReturnURLRequest = GetReturnURLRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetRuNameRequestType = class(AbstractRequestType)
  private
    FClientUseCase: WideString;
  public
    constructor Create; override;
  published
    property ClientUseCase: WideString read FClientUseCase write FClientUseCase;
  end;

  GetRuNameRequest = GetRuNameRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetShippingDiscountProfilesRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetShippingDiscountProfilesRequest = GetShippingDiscountProfilesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreOptionsRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetStoreOptionsRequest = GetStoreOptionsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStorePreferencesRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetStorePreferencesRequest = GetStorePreferencesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSuggestedCategoriesRequestType = class(AbstractRequestType)
  private
    FQuery: WideString;
  public
    constructor Create; override;
  published
    property Query: WideString read FQuery write FQuery;
  end;

  GetSuggestedCategoriesRequest = GetSuggestedCategoriesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetTaxTableRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GetTaxTableRequest = GetTaxTableRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserContactDetailsRequestType = class(AbstractRequestType)
  private
    FItemID: WideString;
    FContactID: WideString;
    FRequesterID: WideString;
  public
    constructor Create; override;
  published
    property ItemID: WideString read FItemID write FItemID;
    property ContactID: WideString read FContactID write FContactID;
    property RequesterID: WideString read FRequesterID write FRequesterID;
  end;

  GetUserContactDetailsRequest = GetUserContactDetailsRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetWantItNowPostRequestType = class(AbstractRequestType)
  private
    FPostID: ItemIDType;
  public
    constructor Create; override;
  published
    property PostID: ItemIDType read FPostID write FPostID;
  end;

  GetWantItNowPostRequest = GetWantItNowPostRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GeteBayOfficialTimeRequestType = class(AbstractRequestType)
  private
  public
    constructor Create; override;
  published
  end;

  GeteBayOfficialTimeRequest = GeteBayOfficialTimeRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RespondToFeedbackRequestType = class(AbstractRequestType)
  private
    FFeedbackID: WideString;
    FItemID: ItemIDType;
    FTransactionID: WideString;
    FTargetUserID: UserIDType;
    FResponseType: FeedbackResponseCodeType;
    FResponseText: WideString;
  public
    constructor Create; override;
  published
    property FeedbackID: WideString read FFeedbackID write FFeedbackID;
    property ItemID: ItemIDType read FItemID write FItemID;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property TargetUserID: UserIDType read FTargetUserID write FTargetUserID;
    property ResponseType: FeedbackResponseCodeType read FResponseType write FResponseType;
    property ResponseText: WideString read FResponseText write FResponseText;
  end;

  RespondToFeedbackRequest = RespondToFeedbackRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RespondToWantItNowPostRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FPostID: ItemIDType;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property PostID: ItemIDType read FPostID write FPostID;
  end;

  RespondToWantItNowPostRequest = RespondToWantItNowPostRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SellerReverseDisputeRequestType = class(AbstractRequestType)
  private
    FDisputeID: DisputeIDType;
    FDisputeResolutionReason: DisputeResolutionReasonCodeType;
  public
    constructor Create; override;
  published
    property DisputeID: DisputeIDType read FDisputeID write FDisputeID;
    property DisputeResolutionReason: DisputeResolutionReasonCodeType read FDisputeResolutionReason write FDisputeResolutionReason;
  end;

  SellerReverseDisputeRequest = SellerReverseDisputeRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetUserNotesRequestType = class(AbstractRequestType)
  private
    FItemID: ItemIDType;
    FAction: SetUserNotesActionCodeType;
    FNoteText: WideString;
    FTransactionID: WideString;
  public
    constructor Create; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Action: SetUserNotesActionCodeType read FAction write FAction;
    property NoteText: WideString read FNoteText write FNoteText;
    property TransactionID: WideString read FTransactionID write FTransactionID;
  end;

  SetUserNotesRequest = SetUserNotesRequestType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  DuplicateInvocationDetailsType = class(TRemotable)
  private
    FDuplicateInvocationID: UUIDType;
    FStatus: InvocationStatusType;
    FInvocationTrackingID: WideString;
  published
    property DuplicateInvocationID: UUIDType read FDuplicateInvocationID write FDuplicateInvocationID;
    property Status: InvocationStatusType read FStatus write FStatus;
    property InvocationTrackingID: WideString read FInvocationTrackingID write FInvocationTrackingID;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  BotBlockResponseType = class(TRemotable)
  private
    FBotBlockToken: WideString;
    FBotBlockUrl: WideString;
    FBotBlockAudioUrl: WideString;
  published
    property BotBlockToken: WideString read FBotBlockToken write FBotBlockToken;
    property BotBlockUrl: WideString read FBotBlockUrl write FBotBlockUrl;
    property BotBlockAudioUrl: WideString read FBotBlockAudioUrl write FBotBlockAudioUrl;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ErrorParameterType = class(TRemotable)
  private
    FValue: WideString;
    FParamID: WideString;
  published
    property Value: WideString read FValue write FValue;
    property ParamID: WideString read FParamID write FParamID stored AS_ATTRIBUTE;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  ErrorType = class(TRemotable)
  private
    FShortMessage: WideString;
    FLongMessage: WideString;
    FErrorCode: WideString;
    FUserDisplayHint: Boolean;
    FSeverityCode: SeverityCodeType;
    FErrorParameters: ErrorParameterType;
    FErrorClassification: ErrorClassificationCodeType;
  public
    destructor Destroy; override;
  published
    property ShortMessage: WideString read FShortMessage write FShortMessage;
    property LongMessage: WideString read FLongMessage write FLongMessage;
    property ErrorCode: WideString read FErrorCode write FErrorCode;
    property UserDisplayHint: Boolean read FUserDisplayHint write FUserDisplayHint;
    property SeverityCode: SeverityCodeType read FSeverityCode write FSeverityCode;
    property ErrorParameters: ErrorParameterType read FErrorParameters write FErrorParameters;
    property ErrorClassification: ErrorClassificationCodeType read FErrorClassification write FErrorClassification;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // ************************************************************************ //
  AbstractResponseType = class(TRemotable)
  private
    FTimestamp: TXSDateTime;
    FAck: AckCodeType;
    FCorrelationID: WideString;
    FErrors: ErrorType;
    FMessage_: WideString;
    FVersion: WideString;
    FBuild: WideString;
    FNotificationEventName: WideString;
    FDuplicateInvocationDetails: DuplicateInvocationDetailsType;
    FRecipientUserID: WideString;
    FEIASToken: WideString;
    FNotificationSignature: WideString;
    FHardExpirationWarning: WideString;
    FBotBlock: BotBlockResponseType;
  public
    destructor Destroy; override;
  published
    property Timestamp: TXSDateTime read FTimestamp write FTimestamp;
    property Ack: AckCodeType read FAck write FAck;
    property CorrelationID: WideString read FCorrelationID write FCorrelationID;
    property Errors: ErrorType read FErrors write FErrors;
    property Message_: WideString read FMessage_ write FMessage_;
    property Version: WideString read FVersion write FVersion;
    property Build: WideString read FBuild write FBuild;
    property NotificationEventName: WideString read FNotificationEventName write FNotificationEventName;
    property DuplicateInvocationDetails: DuplicateInvocationDetailsType read FDuplicateInvocationDetails write FDuplicateInvocationDetails;
    property RecipientUserID: WideString read FRecipientUserID write FRecipientUserID;
    property EIASToken: WideString read FEIASToken write FEIASToken;
    property NotificationSignature: WideString read FNotificationSignature write FNotificationSignature;
    property HardExpirationWarning: WideString read FHardExpirationWarning write FHardExpirationWarning;
    property BotBlock: BotBlockResponseType read FBotBlock write FBotBlock;
  end;



  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ValidateTestUserRegistrationResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  ValidateTestUserRegistrationResponse = ValidateTestUserRegistrationResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetUserPreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetUserPreferencesResponse = SetUserPreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetUserNotesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetUserNotesResponse = SetUserNotesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetTaxTableResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetTaxTableResponse = SetTaxTableResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStorePreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetStorePreferencesResponse = SetStorePreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStoreResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetStoreResponse = SetStoreResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetShippingDiscountProfilesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetShippingDiscountProfilesResponse = SetShippingDiscountProfilesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetReturnURLResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetReturnURLResponse = SetReturnURLResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetPromotionalSaleListingsResponseType = class(AbstractResponseType)
  private
    FStatus: PromotionalSaleStatusCodeType;
  public
    constructor Create; override;
  published
    property Status: PromotionalSaleStatusCodeType read FStatus write FStatus;
  end;

  SetPromotionalSaleListingsResponse = SetPromotionalSaleListingsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetPictureManagerDetailsResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetPictureManagerDetailsResponse = SetPictureManagerDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetNotificationPreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetNotificationPreferencesResponse = SetNotificationPreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetMessagePreferencesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SetMessagePreferencesResponse = SetMessagePreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SendInvoiceResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SendInvoiceResponse = SendInvoiceResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SellerReverseDisputeResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  SellerReverseDisputeResponse = SellerReverseDisputeResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseMyMessagesFoldersResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  ReviseMyMessagesFoldersResponse = ReviseMyMessagesFoldersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseMyMessagesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  ReviseMyMessagesResponse = ReviseMyMessagesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseCheckoutStatusResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  ReviseCheckoutStatusResponse = ReviseCheckoutStatusResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RespondToWantItNowPostResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  RespondToWantItNowPostResponse = RespondToWantItNowPostResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RespondToFeedbackResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  RespondToFeedbackResponse = RespondToFeedbackResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RemoveFromWatchListResponseType = class(AbstractResponseType)
  private
    FWatchListCount: Integer;
    FWatchListMaximum: Integer;
  public
    constructor Create; override;
  published
    property WatchListCount: Integer read FWatchListCount write FWatchListCount;
    property WatchListMaximum: Integer read FWatchListMaximum write FWatchListMaximum;
  end;

  RemoveFromWatchListResponse = RemoveFromWatchListResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  LeaveFeedbackResponseType = class(AbstractResponseType)
  private
    FFeedbackID: WideString;
  public
    constructor Create; override;
  published
    property FeedbackID: WideString read FFeedbackID write FFeedbackID;
  end;

  LeaveFeedbackResponse = LeaveFeedbackResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GeteBayOfficialTimeResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  GeteBayOfficialTimeResponse = GeteBayOfficialTimeResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreCategoryUpdateStatusResponseType = class(AbstractResponseType)
  private
    FStatus: TaskStatusCodeType;
  public
    constructor Create; override;
  published
    property Status: TaskStatusCodeType read FStatus write FStatus;
  end;

  GetStoreCategoryUpdateStatusResponse = GetStoreCategoryUpdateStatusResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetRuNameResponseType = class(AbstractResponseType)
  private
    FRuName: WideString;
  public
    constructor Create; override;
  published
    property RuName: WideString read FRuName write FRuName;
  end;

  GetRuNameResponse = GetRuNameResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductSellingPagesResponseType = class(AbstractResponseType)
  private
    FProductSellingPagesData: WideString;
  public
    constructor Create; override;
  published
    property ProductSellingPagesData: WideString read FProductSellingPagesData write FProductSellingPagesData;
  end;

  GetProductSellingPagesResponse = GetProductSellingPagesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductFinderResponseType = class(AbstractResponseType)
  private
    FAttributeSystemVersion: WideString;
    FProductFinderData: WideString;
  public
    constructor Create; override;
  published
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property ProductFinderData: WideString read FProductFinderData write FProductFinderData;
  end;

  GetProductFinderResponse = GetProductFinderResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetChallengeTokenResponseType = class(AbstractResponseType)
  private
    FChallengeToken: WideString;
    FImageChallengeURL: WideString;
    FAudioChallengeURL: WideString;
  public
    constructor Create; override;
  published
    property ChallengeToken: WideString read FChallengeToken write FChallengeToken;
    property ImageChallengeURL: WideString read FImageChallengeURL write FImageChallengeURL;
    property AudioChallengeURL: WideString read FAudioChallengeURL write FAudioChallengeURL;
  end;

  GetChallengeTokenResponse = GetChallengeTokenResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAttributesCSResponseType = class(AbstractResponseType)
  private
    FAttributeSystemVersion: WideString;
    FAttributeData: WideString;
  public
    constructor Create; override;
  published
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property AttributeData: WideString read FAttributeData write FAttributeData;
  end;

  GetAttributesCSResponse = GetAttributesCSResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  DeleteMyMessagesResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  DeleteMyMessagesResponse = DeleteMyMessagesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  CompleteSaleResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  CompleteSaleResponse = CompleteSaleResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddToWatchListResponseType = class(AbstractResponseType)
  private
    FWatchListCount: Integer;
    FWatchListMaximum: Integer;
  public
    constructor Create; override;
  published
    property WatchListCount: Integer read FWatchListCount write FWatchListCount;
    property WatchListMaximum: Integer read FWatchListMaximum write FWatchListMaximum;
  end;

  AddToWatchListResponse = AddToWatchListResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddToItemDescriptionResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  AddToItemDescriptionResponse = AddToItemDescriptionResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddMemberMessageRTQResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  AddMemberMessageRTQResponse = AddMemberMessageRTQResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddMemberMessageAAQToPartnerResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  AddMemberMessageAAQToPartnerResponse = AddMemberMessageAAQToPartnerResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddDisputeResponseResponseType = class(AbstractResponseType)
  private
  public
    constructor Create; override;
  published
  end;

  AddDisputeResponseResponse = AddDisputeResponseResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddDisputeResponseType = class(AbstractResponseType)
  private
    FDisputeID: DisputeIDType;
  public
    constructor Create; override;
  published
    property DisputeID: DisputeIDType read FDisputeID write FDisputeID;
  end;

  AddDisputeResponse = AddDisputeResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  VerifyAddSecondChanceItemResponseType = class(AbstractResponseType)
  private
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
  end;

  VerifyAddSecondChanceItemResponse = VerifyAddSecondChanceItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  FetchTokenResponseType = class(AbstractResponseType)
  private
    FeBayAuthToken: WideString;
    FHardExpirationTime: TXSDateTime;
    FRESTToken: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property eBayAuthToken: WideString read FeBayAuthToken write FeBayAuthToken;
    property HardExpirationTime: TXSDateTime read FHardExpirationTime write FHardExpirationTime;
    property RESTToken: WideString read FRESTToken write FRESTToken;
  end;

  FetchTokenResponse = FetchTokenResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  EndItemResponseType = class(AbstractResponseType)
  private
    FEndTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property EndTime: TXSDateTime read FEndTime write FEndTime;
  end;

  EndItemResponse = EndItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddTransactionConfirmationItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
  end;

  AddTransactionConfirmationItemResponse = AddTransactionConfirmationItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddSecondChanceItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
  end;

  AddSecondChanceItemResponse = AddSecondChanceItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddOrderResponseType = class(AbstractResponseType)
  private
    FOrderID: OrderIDType;
    FCreatedTime: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property OrderID: OrderIDType read FOrderID write FOrderID;
    property CreatedTime: TXSDateTime read FCreatedTime write FCreatedTime;
  end;

  AddOrderResponse = AddOrderResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemResponseType = class(AbstractResponseType)
  private
    FItem: ItemType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Item: ItemType read FItem write FItem;
  end;

  GetItemResponse = GetItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ValidateChallengeInputResponseType = class(AbstractResponseType)
  private
    FValidToken: Boolean;
  public
    constructor Create; override;
  published
    property ValidToken: Boolean read FValidToken write FValidToken;
  end;

  ValidateChallengeInputResponse = ValidateChallengeInputResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  IssueRefundResponseType = class(AbstractResponseType)
  private
    FRefundFromSeller: AmountType;
    FTotalRefundToBuyer: AmountType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RefundFromSeller: AmountType read FRefundFromSeller write FRefundFromSeller;
    property TotalRefundToBuyer: AmountType read FTotalRefundToBuyer write FTotalRefundToBuyer;
  end;

  IssueRefundResponse = IssueRefundResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCrossPromotionsResponseType = class(AbstractResponseType)
  private
    FCrossPromotion: CrossPromotionsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CrossPromotion: CrossPromotionsType read FCrossPromotion write FCrossPromotion;
  end;

  GetCrossPromotionsResponse = GetCrossPromotionsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserResponseType = class(AbstractResponseType)
  private
    FUser: UserType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property User: UserType read FUser write FUser;
  end;

  GetUserResponse = GetUserResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemShippingResponseType = class(AbstractResponseType)
  private
    FShippingDetails: ShippingDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ShippingDetails: ShippingDetailsType read FShippingDetails write FShippingDetails;
  end;

  GetItemShippingResponse = GetItemShippingResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  VeROReportItemsResponseType = class(AbstractResponseType)
  private
    FVeROReportPacketID: Int64;
    FVeROReportPacketStatus: VeROReportPacketStatusCodeType;
  public
    constructor Create; override;
  published
    property VeROReportPacketID: Int64 read FVeROReportPacketID write FVeROReportPacketID;
    property VeROReportPacketStatus: VeROReportPacketStatusCodeType read FVeROReportPacketStatus write FVeROReportPacketStatus;
  end;

  VeROReportItemsResponse = VeROReportItemsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStoreCategoriesResponseType = class(AbstractResponseType)
  private
    FTaskID: Int64;
    FStatus: TaskStatusCodeType;
  public
    constructor Create; override;
  published
    property TaskID: Int64 read FTaskID write FTaskID;
    property Status: TaskStatusCodeType read FStatus write FStatus;
  end;

  SetStoreCategoriesResponse = SetStoreCategoriesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetPromotionalSaleResponseType = class(AbstractResponseType)
  private
    FStatus: PromotionalSaleStatusCodeType;
    FPromotionalSaleID: Int64;
  public
    constructor Create; override;
  published
    property Status: PromotionalSaleStatusCodeType read FStatus write FStatus;
    property PromotionalSaleID: Int64 read FPromotionalSaleID write FPromotionalSaleID;
  end;

  SetPromotionalSaleResponse = SetPromotionalSaleResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserContactDetailsResponseType = class(AbstractResponseType)
  private
    FUserID: WideString;
    FContactAddress: AddressType;
    FRegistrationDate: TXSDateTime;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property UserID: WideString read FUserID write FUserID;
    property ContactAddress: AddressType read FContactAddress write FContactAddress;
    property RegistrationDate: TXSDateTime read FRegistrationDate write FRegistrationDate;
  end;

  GetUserContactDetailsResponse = GetUserContactDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetTaxTableResponseType = class(AbstractResponseType)
  private
    FLastUpdateTime: TXSDateTime;
    FTaxTable: TaxTableType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property LastUpdateTime: TXSDateTime read FLastUpdateTime write FLastUpdateTime;
    property TaxTable: TaxTableType read FTaxTable write FTaxTable;
  end;

  GetTaxTableResponse = GetTaxTableResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  VerifyAddItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FFees: FeesType;
    FExpressListing: Boolean;
    FExpressItemRequirements: ExpressItemRequirementsType;
    FCategoryID: WideString;
    FCategory2ID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Fees: FeesType read FFees write FFees;
    property ExpressListing: Boolean read FExpressListing write FExpressListing;
    property ExpressItemRequirements: ExpressItemRequirementsType read FExpressItemRequirements write FExpressItemRequirements;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Category2ID: WideString read FCategory2ID write FCategory2ID;
  end;

  VerifyAddItemResponse = VerifyAddItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseLiveAuctionItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FFees: FeesType;
    FCategoryID: WideString;
    FCategory2ID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Fees: FeesType read FFees write FFees;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Category2ID: WideString read FCategory2ID write FCategory2ID;
  end;

  ReviseLiveAuctionItemResponse = ReviseLiveAuctionItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ReviseItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
    FFees: FeesType;
    FCategoryID: WideString;
    FCategory2ID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
    property Fees: FeesType read FFees write FFees;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Category2ID: WideString read FCategory2ID write FCategory2ID;
  end;

  ReviseItemResponse = ReviseItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RelistItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FFees: FeesType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
    FCategoryID: WideString;
    FCategory2ID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Fees: FeesType read FFees write FFees;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Category2ID: WideString read FCategory2ID write FCategory2ID;
  end;

  RelistItemResponse = RelistItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddLiveAuctionItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FFees: FeesType;
    FCategoryID: WideString;
    FCategory2ID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property Fees: FeesType read FFees write FFees;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Category2ID: WideString read FCategory2ID write FCategory2ID;
  end;

  AddLiveAuctionItemResponse = AddLiveAuctionItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  AddItemResponseType = class(AbstractResponseType)
  private
    FItemID: ItemIDType;
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
    FFees: FeesType;
    FCategoryID: WideString;
    FCategory2ID: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemID: ItemIDType read FItemID write FItemID;
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
    property Fees: FeesType read FFees write FFees;
    property CategoryID: WideString read FCategoryID write FCategoryID;
    property Category2ID: WideString read FCategory2ID write FCategory2ID;
  end;

  AddItemResponse = AddItemResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  ApproveLiveAuctionBiddersResponseType = class(AbstractResponseType)
  private
    FBidderUpdateStatus: LiveAuctionApprovalStatusArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidderUpdateStatus: LiveAuctionApprovalStatusArrayType read FBidderUpdateStatus write FBidderUpdateStatus;
  end;

  ApproveLiveAuctionBiddersResponse = ApproveLiveAuctionBiddersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerTransactionsResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FHasMoreTransactions: Boolean;
    FTransactionsPerPage: Integer;
    FPageNumber: Integer;
    FReturnedTransactionCountActual: Integer;
    FSeller: UserType;
    FTransactionArray: TransactionArrayType;
    FPayPalPreferred: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreTransactions: Boolean read FHasMoreTransactions write FHasMoreTransactions;
    property TransactionsPerPage: Integer read FTransactionsPerPage write FTransactionsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property ReturnedTransactionCountActual: Integer read FReturnedTransactionCountActual write FReturnedTransactionCountActual;
    property Seller: UserType read FSeller write FSeller;
    property TransactionArray: TransactionArrayType read FTransactionArray write FTransactionArray;
    property PayPalPreferred: Boolean read FPayPalPreferred write FPayPalPreferred;
  end;

  GetSellerTransactionsResponse = GetSellerTransactionsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemTransactionsResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FHasMoreTransactions: Boolean;
    FTransactionsPerPage: Integer;
    FPageNumber: Integer;
    FReturnedTransactionCountActual: Integer;
    FItem: ItemType;
    FTransactionArray: TransactionArrayType;
    FPayPalPreferred: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreTransactions: Boolean read FHasMoreTransactions write FHasMoreTransactions;
    property TransactionsPerPage: Integer read FTransactionsPerPage write FTransactionsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property ReturnedTransactionCountActual: Integer read FReturnedTransactionCountActual write FReturnedTransactionCountActual;
    property Item: ItemType read FItem write FItem;
    property TransactionArray: TransactionArrayType read FTransactionArray write FTransactionArray;
    property PayPalPreferred: Boolean read FPayPalPreferred write FPayPalPreferred;
  end;

  GetItemTransactionsResponse = GetItemTransactionsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAccountResponseType = class(AbstractResponseType)
  private
    FAccountID: WideString;
    FAccountSummary: AccountSummaryType;
    FCurrency: CurrencyCodeType;
    FAccountEntries: AccountEntriesType;
    FPaginationResult: PaginationResultType;
    FHasMoreEntries: Boolean;
    FEntriesPerPage: Integer;
    FPageNumber: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AccountID: WideString read FAccountID write FAccountID;
    property AccountSummary: AccountSummaryType read FAccountSummary write FAccountSummary;
    property Currency: CurrencyCodeType read FCurrency write FCurrency;
    property AccountEntries: AccountEntriesType read FAccountEntries write FAccountEntries;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreEntries: Boolean read FHasMoreEntries write FHasMoreEntries;
    property EntriesPerPage: Integer read FEntriesPerPage write FEntriesPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
  end;

  GetAccountResponse = GetAccountResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAdFormatLeadsResponseType = class(AbstractResponseType)
  private
    FAdFormatLead: AdFormatLeadType;
    FAdFormatLeadCount: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AdFormatLead: AdFormatLeadType read FAdFormatLead write FAdFormatLead;
    property AdFormatLeadCount: Integer read FAdFormatLeadCount write FAdFormatLeadCount;
  end;

  GetAdFormatLeadsResponse = GetAdFormatLeadsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMemberMessagesResponseType = class(AbstractResponseType)
  private
    FMemberMessage: MemberMessageExchangeArrayType;
    FPaginationResult: PaginationResultType;
    FHasMoreItems: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property MemberMessage: MemberMessageExchangeArrayType read FMemberMessage write FMemberMessage;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreItems: Boolean read FHasMoreItems write FHasMoreItems;
  end;

  GetMemberMessagesResponse = GetMemberMessagesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetHighBiddersResponseType = class(AbstractResponseType)
  private
    FBidArray: OfferArrayType;
    FListingStatus: ListingStatusCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidArray: OfferArrayType read FBidArray write FBidArray;
    property ListingStatus: ListingStatusCodeType read FListingStatus write FListingStatus;
  end;

  GetHighBiddersResponse = GetHighBiddersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetAllBiddersResponseType = class(AbstractResponseType)
  private
    FBidArray: OfferArrayType;
    FHighBidder: UserIDType;
    FHighestBid: AmountType;
    FListingStatus: ListingStatusCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidArray: OfferArrayType read FBidArray write FBidArray;
    property HighBidder: UserIDType read FHighBidder write FHighBidder;
    property HighestBid: AmountType read FHighestBid write FHighestBid;
    property ListingStatus: ListingStatusCodeType read FListingStatus write FListingStatus;
  end;

  GetAllBiddersResponse = GetAllBiddersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  RespondToBestOfferResponseType = class(AbstractResponseType)
  private
    FRespondToBestOffer: BestOfferArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property RespondToBestOffer: BestOfferArrayType read FRespondToBestOffer write FRespondToBestOffer;
  end;

  RespondToBestOfferResponse = RespondToBestOfferResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetBestOffersResponseType = class(AbstractResponseType)
  private
    FBestOfferArray: BestOfferArrayType;
    FItem: ItemType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BestOfferArray: BestOfferArrayType read FBestOfferArray write FBestOfferArray;
    property Item: ItemType read FItem write FItem;
  end;

  GetBestOffersResponse = GetBestOffersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  PlaceOfferResponseType = class(AbstractResponseType)
  private
    FSellingStatus: SellingStatusType;
    FTransactionID: WideString;
    FBestOffer: BestOfferType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingStatus: SellingStatusType read FSellingStatus write FSellingStatus;
    property TransactionID: WideString read FTransactionID write FTransactionID;
    property BestOffer: BestOfferType read FBestOffer write FBestOffer;
  end;

  PlaceOfferResponse = PlaceOfferResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerListResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FHasMoreItems: Boolean;
    FItemArray: ItemArrayType;
    FItemsPerPage: Integer;
    FPageNumber: Integer;
    FReturnedItemCountActual: Integer;
    FSeller: UserType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreItems: Boolean read FHasMoreItems write FHasMoreItems;
    property ItemArray: ItemArrayType read FItemArray write FItemArray;
    property ItemsPerPage: Integer read FItemsPerPage write FItemsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property ReturnedItemCountActual: Integer read FReturnedItemCountActual write FReturnedItemCountActual;
    property Seller: UserType read FSeller write FSeller;
  end;

  GetSellerListResponse = GetSellerListResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerEventsResponseType = class(AbstractResponseType)
  private
    FTimeTo: TXSDateTime;
    FItemArray: ItemArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property TimeTo: TXSDateTime read FTimeTo write FTimeTo;
    property ItemArray: ItemArrayType read FItemArray write FItemArray;
  end;

  GetSellerEventsResponse = GetSellerEventsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetBidderListResponseType = class(AbstractResponseType)
  private
    FBidder: UserType;
    FBidItemArray: ItemArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Bidder: UserType read FBidder write FBidder;
    property BidItemArray: ItemArrayType read FBidItemArray write FBidItemArray;
  end;

  GetBidderListResponse = GetBidderListResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetCartResponseType = class(AbstractResponseType)
  private
    FCart: CartType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Cart: CartType read FCart write FCart;
  end;

  SetCartResponse = SetCartResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCartResponseType = class(AbstractResponseType)
  private
    FCart: CartType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Cart: CartType read FCart write FCart;
  end;

  GetCartResponse = GetCartResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPopularKeywordsResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FCategoryArray: CategoryArrayType;
    FHasMore: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property CategoryArray: CategoryArrayType read FCategoryArray write FCategoryArray;
    property HasMore: Boolean read FHasMore write FHasMore;
  end;

  GetPopularKeywordsResponse = GetPopularKeywordsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoriesResponseType = class(AbstractResponseType)
  private
    FCategoryArray: CategoryArrayType;
    FCategoryCount: Integer;
    FUpdateTime: TXSDateTime;
    FCategoryVersion: WideString;
    FReservePriceAllowed: Boolean;
    FMinimumReservePrice: Double;
    FReduceReserveAllowed: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryArray: CategoryArrayType read FCategoryArray write FCategoryArray;
    property CategoryCount: Integer read FCategoryCount write FCategoryCount;
    property UpdateTime: TXSDateTime read FUpdateTime write FUpdateTime;
    property CategoryVersion: WideString read FCategoryVersion write FCategoryVersion;
    property ReservePriceAllowed: Boolean read FReservePriceAllowed write FReservePriceAllowed;
    property MinimumReservePrice: Double read FMinimumReservePrice write FMinimumReservePrice;
    property ReduceReserveAllowed: Boolean read FReduceReserveAllowed write FReduceReserveAllowed;
  end;

  GetCategoriesResponse = GetCategoriesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategory2CSResponseType = class(AbstractResponseType)
  private
    FMappedCategoryArray: CategoryArrayType;
    FUnmappedCategoryArray: CategoryArrayType;
    FAttributeSystemVersion: WideString;
    FSiteWideCharacteristicSets: SiteWideCharacteristicsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property MappedCategoryArray: CategoryArrayType read FMappedCategoryArray write FMappedCategoryArray;
    property UnmappedCategoryArray: CategoryArrayType read FUnmappedCategoryArray write FUnmappedCategoryArray;
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property SiteWideCharacteristicSets: SiteWideCharacteristicsType read FSiteWideCharacteristicSets write FSiteWideCharacteristicSets;
  end;

  GetCategory2CSResponse = GetCategory2CSResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoryFeaturesResponseType = class(AbstractResponseType)
  private
    FCategoryVersion: WideString;
    FUpdateTime: TXSDateTime;
    FCategory: CategoryFeatureType;
    FSiteDefaults: SiteDefaultsType;
    FFeatureDefinitions: FeatureDefinitionsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryVersion: WideString read FCategoryVersion write FCategoryVersion;
    property UpdateTime: TXSDateTime read FUpdateTime write FUpdateTime;
    property Category: CategoryFeatureType read FCategory write FCategory;
    property SiteDefaults: SiteDefaultsType read FSiteDefaults write FSiteDefaults;
    property FeatureDefinitions: FeatureDefinitionsType read FFeatureDefinitions write FFeatureDefinitions;
  end;

  GetCategoryFeaturesResponse = GetCategoryFeaturesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoryListingsResponseType = class(AbstractResponseType)
  private
    FItemArray: ItemArrayType;
    FCategory: CategoryType;
    FSubCategories: CategoryArrayType;
    FItemsPerPage: Integer;
    FPageNumber: Integer;
    FHasMoreItems: Boolean;
    FPaginationResult: PaginationResultType;
    FBuyingGuideDetails: BuyingGuideDetailsType;
    FRelatedSearchKeywordArray: RelatedSearchKeywordArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemArray: ItemArrayType read FItemArray write FItemArray;
    property Category: CategoryType read FCategory write FCategory;
    property SubCategories: CategoryArrayType read FSubCategories write FSubCategories;
    property ItemsPerPage: Integer read FItemsPerPage write FItemsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property HasMoreItems: Boolean read FHasMoreItems write FHasMoreItems;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property BuyingGuideDetails: BuyingGuideDetailsType read FBuyingGuideDetails write FBuyingGuideDetails;
    property RelatedSearchKeywordArray: RelatedSearchKeywordArrayType read FRelatedSearchKeywordArray write FRelatedSearchKeywordArray;
  end;

  GetCategoryListingsResponse = GetCategoryListingsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetCategoryMappingsResponseType = class(AbstractResponseType)
  private
    FCategoryMapping: CategoryMappingType;
    FCategoryVersion: WideString;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CategoryMapping: CategoryMappingType read FCategoryMapping write FCategoryMapping;
    property CategoryVersion: WideString read FCategoryVersion write FCategoryVersion;
  end;

  GetCategoryMappingsResponse = GetCategoryMappingsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetDescriptionTemplatesResponseType = class(AbstractResponseType)
  private
    FDescriptionTemplate: DescriptionTemplateType;
    FLayoutTotal: Integer;
    FObsoleteLayoutID: Integer;
    FObsoleteThemeID: Integer;
    FThemeGroup: ThemeGroupType;
    FThemeTotal: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DescriptionTemplate: DescriptionTemplateType read FDescriptionTemplate write FDescriptionTemplate;
    property LayoutTotal: Integer read FLayoutTotal write FLayoutTotal;
    property ObsoleteLayoutID: Integer read FObsoleteLayoutID write FObsoleteLayoutID;
    property ObsoleteThemeID: Integer read FObsoleteThemeID write FObsoleteThemeID;
    property ThemeGroup: ThemeGroupType read FThemeGroup write FThemeGroup;
    property ThemeTotal: Integer read FThemeTotal write FThemeTotal;
  end;

  GetDescriptionTemplatesResponse = GetDescriptionTemplatesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetDisputeResponseType = class(AbstractResponseType)
  private
    FDispute: DisputeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Dispute: DisputeType read FDispute write FDispute;
  end;

  GetDisputeResponse = GetDisputeResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetExpressWishListResponseType = class(AbstractResponseType)
  private
    FWishList: WishListType;
    FPagination: PaginationResultType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property WishList: WishListType read FWishList write FWishList;
    property Pagination: PaginationResultType read FPagination write FPagination;
  end;

  GetExpressWishListResponse = GetExpressWishListResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetFeedbackResponseType = class(AbstractResponseType)
  private
    FFeedbackDetailArray: FeedbackDetailArrayType;
    FFeedbackDetailItemTotal: Integer;
    FFeedbackSummary: FeedbackSummaryType;
    FFeedbackScore: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property FeedbackDetailArray: FeedbackDetailArrayType read FFeedbackDetailArray write FFeedbackDetailArray;
    property FeedbackDetailItemTotal: Integer read FFeedbackDetailItemTotal write FFeedbackDetailItemTotal;
    property FeedbackSummary: FeedbackSummaryType read FFeedbackSummary write FFeedbackSummary;
    property FeedbackScore: Integer read FFeedbackScore write FFeedbackScore;
  end;

  GetFeedbackResponse = GetFeedbackResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetItemsAwaitingFeedbackResponseType = class(AbstractResponseType)
  private
    FItemsAwaitingFeedback: PaginatedTransactionArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ItemsAwaitingFeedback: PaginatedTransactionArrayType read FItemsAwaitingFeedback write FItemsAwaitingFeedback;
  end;

  GetItemsAwaitingFeedbackResponse = GetItemsAwaitingFeedbackResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetLiveAuctionBiddersResponseType = class(AbstractResponseType)
  private
    FBidderDetails: BidderDetailArrayType;
    FTotalPending: Integer;
    FTotalApproved: Integer;
    FTotalDenied: Integer;
    FPageNumber: Integer;
    FPaginationResult: PaginationResultType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidderDetails: BidderDetailArrayType read FBidderDetails write FBidderDetails;
    property TotalPending: Integer read FTotalPending write FTotalPending;
    property TotalApproved: Integer read FTotalApproved write FTotalApproved;
    property TotalDenied: Integer read FTotalDenied write FTotalDenied;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
  end;

  GetLiveAuctionBiddersResponse = GetLiveAuctionBiddersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMessagePreferencesResponseType = class(AbstractResponseType)
  private
    FASQPreferences: ASQPreferencesType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ASQPreferences: ASQPreferencesType read FASQPreferences write FASQPreferences;
  end;

  GetMessagePreferencesResponse = GetMessagePreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyMessagesResponseType = class(AbstractResponseType)
  private
    FSummary: MyMessagesSummaryType;
    FAlerts: MyMessagesAlertArrayType;
    FMessages: MyMessagesMessageArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Summary: MyMessagesSummaryType read FSummary write FSummary;
    property Alerts: MyMessagesAlertArrayType read FAlerts write FAlerts;
    property Messages: MyMessagesMessageArrayType read FMessages write FMessages;
  end;

  GetMyMessagesResponse = GetMyMessagesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyeBayBuyingResponseType = class(AbstractResponseType)
  private
    FBuyingSummary: BuyingSummaryType;
    FWatchList: PaginatedItemArrayType;
    FBidList: PaginatedItemArrayType;
    FBestOfferList: PaginatedItemArrayType;
    FWonList: PaginatedOrderTransactionArrayType;
    FLostList: PaginatedItemArrayType;
    FFavoriteSearches: MyeBayFavoriteSearchListType;
    FFavoriteSellers: MyeBayFavoriteSellerListType;
    FSecondChanceOffer: ItemType;
    FBidAssistantList: BidGroupArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BuyingSummary: BuyingSummaryType read FBuyingSummary write FBuyingSummary;
    property WatchList: PaginatedItemArrayType read FWatchList write FWatchList;
    property BidList: PaginatedItemArrayType read FBidList write FBidList;
    property BestOfferList: PaginatedItemArrayType read FBestOfferList write FBestOfferList;
    property WonList: PaginatedOrderTransactionArrayType read FWonList write FWonList;
    property LostList: PaginatedItemArrayType read FLostList write FLostList;
    property FavoriteSearches: MyeBayFavoriteSearchListType read FFavoriteSearches write FFavoriteSearches;
    property FavoriteSellers: MyeBayFavoriteSellerListType read FFavoriteSellers write FFavoriteSellers;
    property SecondChanceOffer: ItemType read FSecondChanceOffer write FSecondChanceOffer;
    property BidAssistantList: BidGroupArrayType read FBidAssistantList write FBidAssistantList;
  end;

  GetMyeBayBuyingResponse = GetMyeBayBuyingResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyeBayRemindersResponseType = class(AbstractResponseType)
  private
    FBuyingReminders: RemindersType;
    FSellingReminders: RemindersType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BuyingReminders: RemindersType read FBuyingReminders write FBuyingReminders;
    property SellingReminders: RemindersType read FSellingReminders write FSellingReminders;
  end;

  GetMyeBayRemindersResponse = GetMyeBayRemindersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetMyeBaySellingResponseType = class(AbstractResponseType)
  private
    FSellingSummary: SellingSummaryType;
    FScheduledList: PaginatedItemArrayType;
    FActiveList: PaginatedItemArrayType;
    FSoldList: PaginatedOrderTransactionArrayType;
    FUnsoldList: PaginatedItemArrayType;
    FSummary: MyeBaySellingSummaryType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SellingSummary: SellingSummaryType read FSellingSummary write FSellingSummary;
    property ScheduledList: PaginatedItemArrayType read FScheduledList write FScheduledList;
    property ActiveList: PaginatedItemArrayType read FActiveList write FActiveList;
    property SoldList: PaginatedOrderTransactionArrayType read FSoldList write FSoldList;
    property UnsoldList: PaginatedItemArrayType read FUnsoldList write FUnsoldList;
    property Summary: MyeBaySellingSummaryType read FSummary write FSummary;
  end;

  GetMyeBaySellingResponse = GetMyeBaySellingResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetNotificationPreferencesResponseType = class(AbstractResponseType)
  private
    FApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType;
    FUserDeliveryPreferenceArray: NotificationEnableArrayType;
    FUserData: NotificationUserDataType;
    FEventProperty: NotificationEventPropertyType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ApplicationDeliveryPreferences: ApplicationDeliveryPreferencesType read FApplicationDeliveryPreferences write FApplicationDeliveryPreferences;
    property UserDeliveryPreferenceArray: NotificationEnableArrayType read FUserDeliveryPreferenceArray write FUserDeliveryPreferenceArray;
    property UserData: NotificationUserDataType read FUserData write FUserData;
    property EventProperty: NotificationEventPropertyType read FEventProperty write FEventProperty;
  end;

  GetNotificationPreferencesResponse = GetNotificationPreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetNotificationsUsageResponseType = class(AbstractResponseType)
  private
    FStartTime: TXSDateTime;
    FEndTime: TXSDateTime;
    FNotificationDetailsArray: NotificationDetailsArrayType;
    FMarkUpMarkDownHistory: MarkUpMarkDownHistoryType;
    FNotificationStatistics: NotificationStatisticsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartTime: TXSDateTime read FStartTime write FStartTime;
    property EndTime: TXSDateTime read FEndTime write FEndTime;
    property NotificationDetailsArray: NotificationDetailsArrayType read FNotificationDetailsArray write FNotificationDetailsArray;
    property MarkUpMarkDownHistory: MarkUpMarkDownHistoryType read FMarkUpMarkDownHistory write FMarkUpMarkDownHistory;
    property NotificationStatistics: NotificationStatisticsType read FNotificationStatistics write FNotificationStatistics;
  end;

  GetNotificationsUsageResponse = GetNotificationsUsageResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetOrdersResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FHasMoreOrders: Boolean;
    FOrderArray: OrderArrayType;
    FOrdersPerPage: Integer;
    FPageNumber: Integer;
    FReturnedOrderCountActual: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreOrders: Boolean read FHasMoreOrders write FHasMoreOrders;
    property OrderArray: OrderArrayType read FOrderArray write FOrderArray;
    property OrdersPerPage: Integer read FOrdersPerPage write FOrdersPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property ReturnedOrderCountActual: Integer read FReturnedOrderCountActual write FReturnedOrderCountActual;
  end;

  GetOrdersResponse = GetOrdersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetOrderTransactionsResponseType = class(AbstractResponseType)
  private
    FOrderArray: OrderArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property OrderArray: OrderArrayType read FOrderArray write FOrderArray;
  end;

  GetOrderTransactionsResponse = GetOrderTransactionsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPictureManagerDetailsResponseType = class(AbstractResponseType)
  private
    FPictureManagerDetails: PictureManagerDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PictureManagerDetails: PictureManagerDetailsType read FPictureManagerDetails write FPictureManagerDetails;
  end;

  GetPictureManagerDetailsResponse = GetPictureManagerDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPictureManagerOptionsResponseType = class(AbstractResponseType)
  private
    FSubscription: PictureManagerSubscriptionType;
    FPictureType: PictureManagerPictureDisplayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Subscription: PictureManagerSubscriptionType read FSubscription write FSubscription;
    property PictureType: PictureManagerPictureDisplayType read FPictureType write FPictureType;
  end;

  GetPictureManagerOptionsResponse = GetPictureManagerOptionsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductSearchResultsResponseType = class(AbstractResponseType)
  private
    FDataElementSets: DataElementSetType;
    FProductSearchResult: ProductSearchResultType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DataElementSets: DataElementSetType read FDataElementSets write FDataElementSets;
    property ProductSearchResult: ProductSearchResultType read FProductSearchResult write FProductSearchResult;
  end;

  GetProductSearchResultsResponse = GetProductSearchResultsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductFamilyMembersResponseType = class(AbstractResponseType)
  private
    FDataElementSets: DataElementSetType;
    FProductSearchResult: ProductSearchResultType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property DataElementSets: DataElementSetType read FDataElementSets write FDataElementSets;
    property ProductSearchResult: ProductSearchResultType read FProductSearchResult write FProductSearchResult;
  end;

  GetProductFamilyMembersResponse = GetProductFamilyMembersResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductSearchPageResponseType = class(AbstractResponseType)
  private
    FAttributeSystemVersion: WideString;
    FProductSearchPage: ProductSearchPageType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property AttributeSystemVersion: WideString read FAttributeSystemVersion write FAttributeSystemVersion;
    property ProductSearchPage: ProductSearchPageType read FProductSearchPage write FProductSearchPage;
  end;

  GetProductSearchPageResponse = GetProductSearchPageResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetProductsResponseType = class(AbstractResponseType)
  private
    FCharacteristicsSetProductHistogram: CharacteristicsSetProductHistogramType;
    FPageNumber: Integer;
    FApproximatePages: Integer;
    FHasMore: Boolean;
    FTotalProducts: Integer;
    FProduct: CatalogProductType;
    FItemArray: ItemArrayType;
    FBuyingGuideDetails: BuyingGuideDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CharacteristicsSetProductHistogram: CharacteristicsSetProductHistogramType read FCharacteristicsSetProductHistogram write FCharacteristicsSetProductHistogram;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property ApproximatePages: Integer read FApproximatePages write FApproximatePages;
    property HasMore: Boolean read FHasMore write FHasMore;
    property TotalProducts: Integer read FTotalProducts write FTotalProducts;
    property Product: CatalogProductType read FProduct write FProduct;
    property ItemArray: ItemArrayType read FItemArray write FItemArray;
    property BuyingGuideDetails: BuyingGuideDetailsType read FBuyingGuideDetails write FBuyingGuideDetails;
  end;

  GetProductsResponse = GetProductsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPromotionRulesResponseType = class(AbstractResponseType)
  private
    FPromotionRuleArray: PromotionRuleArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PromotionRuleArray: PromotionRuleArrayType read FPromotionRuleArray write FPromotionRuleArray;
  end;

  GetPromotionRulesResponse = GetPromotionRulesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetPromotionalSaleDetailsResponseType = class(AbstractResponseType)
  private
    FPromotionalSaleDetails: PromotionalSaleArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PromotionalSaleDetails: PromotionalSaleArrayType read FPromotionalSaleDetails write FPromotionalSaleDetails;
  end;

  GetPromotionalSaleDetailsResponse = GetPromotionalSaleDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetReturnURLResponseType = class(AbstractResponseType)
  private
    FApplicationDisplayName: WideString;
    FAuthenticationEntryArray: AuthenticationEntryArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property ApplicationDisplayName: WideString read FApplicationDisplayName write FApplicationDisplayName;
    property AuthenticationEntryArray: AuthenticationEntryArrayType read FAuthenticationEntryArray write FAuthenticationEntryArray;
  end;

  GetReturnURLResponse = GetReturnURLResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSearchResultsResponseType = class(AbstractResponseType)
  private
    FSearchResultItemArray: SearchResultItemArrayType;
    FItemsPerPage: Integer;
    FPageNumber: Integer;
    FHasMoreItems: Boolean;
    FPaginationResult: PaginationResultType;
    FCategoryArray: CategoryArrayType;
    FBuyingGuideDetails: BuyingGuideDetailsType;
    FStoreExpansionArray: ExpansionArrayType;
    FInternationalExpansionArray: ExpansionArrayType;
    FFilterRemovedExpansionArray: ExpansionArrayType;
    FAllCategoriesExpansionArray: ExpansionArrayType;
    FSpellingSuggestion: SpellingSuggestionType;
    FRelatedSearchKeywordArray: RelatedSearchKeywordArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SearchResultItemArray: SearchResultItemArrayType read FSearchResultItemArray write FSearchResultItemArray;
    property ItemsPerPage: Integer read FItemsPerPage write FItemsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property HasMoreItems: Boolean read FHasMoreItems write FHasMoreItems;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property CategoryArray: CategoryArrayType read FCategoryArray write FCategoryArray;
    property BuyingGuideDetails: BuyingGuideDetailsType read FBuyingGuideDetails write FBuyingGuideDetails;
    property StoreExpansionArray: ExpansionArrayType read FStoreExpansionArray write FStoreExpansionArray;
    property InternationalExpansionArray: ExpansionArrayType read FInternationalExpansionArray write FInternationalExpansionArray;
    property FilterRemovedExpansionArray: ExpansionArrayType read FFilterRemovedExpansionArray write FFilterRemovedExpansionArray;
    property AllCategoriesExpansionArray: ExpansionArrayType read FAllCategoriesExpansionArray write FAllCategoriesExpansionArray;
    property SpellingSuggestion: SpellingSuggestionType read FSpellingSuggestion write FSpellingSuggestion;
    property RelatedSearchKeywordArray: RelatedSearchKeywordArrayType read FRelatedSearchKeywordArray write FRelatedSearchKeywordArray;
  end;

  GetSearchResultsResponse = GetSearchResultsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSearchResultsExpressResponseType = class(AbstractResponseType)
  private
    FHistogram: DomainHistogramType;
    FItemArray: ItemArrayType;
    FProductArray: ProductArrayType;
    FEntriesPerPage: Integer;
    FPageNumber: Integer;
    FHasMoreEntries: Boolean;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Histogram: DomainHistogramType read FHistogram write FHistogram;
    property ItemArray: ItemArrayType read FItemArray write FItemArray;
    property ProductArray: ProductArrayType read FProductArray write FProductArray;
    property EntriesPerPage: Integer read FEntriesPerPage write FEntriesPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property HasMoreEntries: Boolean read FHasMoreEntries write FHasMoreEntries;
  end;

  GetSearchResultsExpressResponse = GetSearchResultsExpressResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSellerPaymentsResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FHasMorePayments: Boolean;
    FSellerPayment: SellerPaymentType;
    FPaymentsPerPage: Integer;
    FPageNumber: Integer;
    FReturnedPaymentCountActual: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMorePayments: Boolean read FHasMorePayments write FHasMorePayments;
    property SellerPayment: SellerPaymentType read FSellerPayment write FSellerPayment;
    property PaymentsPerPage: Integer read FPaymentsPerPage write FPaymentsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property ReturnedPaymentCountActual: Integer read FReturnedPaymentCountActual write FReturnedPaymentCountActual;
  end;

  GetSellerPaymentsResponse = GetSellerPaymentsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetShippingDiscountProfilesResponseType = class(AbstractResponseType)
  private
    FCurrencyID: CurrencyCodeType;
    FFlatShippingDiscount: FlatShippingDiscountType;
    FCalculatedShippingDiscount: CalculatedShippingDiscountType;
    FPromotionalShippingDiscount: Boolean;
    FCalculatedHandlingDiscount: CalculatedHandlingDiscountType;
    FPromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType;
    FShippingInsurance: ShippingInsuranceType;
    FInternationalShippingInsurance: ShippingInsuranceType;
    FCombinedDuration: CombinedPaymentPeriodCodeType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CurrencyID: CurrencyCodeType read FCurrencyID write FCurrencyID;
    property FlatShippingDiscount: FlatShippingDiscountType read FFlatShippingDiscount write FFlatShippingDiscount;
    property CalculatedShippingDiscount: CalculatedShippingDiscountType read FCalculatedShippingDiscount write FCalculatedShippingDiscount;
    property PromotionalShippingDiscount: Boolean read FPromotionalShippingDiscount write FPromotionalShippingDiscount;
    property CalculatedHandlingDiscount: CalculatedHandlingDiscountType read FCalculatedHandlingDiscount write FCalculatedHandlingDiscount;
    property PromotionalShippingDiscountDetails: PromotionalShippingDiscountDetailsType read FPromotionalShippingDiscountDetails write FPromotionalShippingDiscountDetails;
    property ShippingInsurance: ShippingInsuranceType read FShippingInsurance write FShippingInsurance;
    property InternationalShippingInsurance: ShippingInsuranceType read FInternationalShippingInsurance write FInternationalShippingInsurance;
    property CombinedDuration: CombinedPaymentPeriodCodeType read FCombinedDuration write FCombinedDuration;
  end;

  GetShippingDiscountProfilesResponse = GetShippingDiscountProfilesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreResponseType = class(AbstractResponseType)
  private
    FStore: StoreType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property Store: StoreType read FStore write FStore;
  end;

  GetStoreResponse = GetStoreResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreCustomPageResponseType = class(AbstractResponseType)
  private
    FCustomPageArray: StoreCustomPageArrayType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CustomPageArray: StoreCustomPageArrayType read FCustomPageArray write FCustomPageArray;
  end;

  GetStoreCustomPageResponse = GetStoreCustomPageResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  SetStoreCustomPageResponseType = class(AbstractResponseType)
  private
    FCustomPage: StoreCustomPageType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CustomPage: StoreCustomPageType read FCustomPage write FCustomPage;
  end;

  SetStoreCustomPageResponse = SetStoreCustomPageResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStoreOptionsResponseType = class(AbstractResponseType)
  private
    FBasicThemeArray: StoreThemeArrayType;
    FAdvancedThemeArray: StoreThemeArrayType;
    FLogoArray: StoreLogoArrayType;
    FSubscriptionArray: StoreSubscriptionArrayType;
    FMaxCategories: Integer;
    FMaxCategoryLevels: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BasicThemeArray: StoreThemeArrayType read FBasicThemeArray write FBasicThemeArray;
    property AdvancedThemeArray: StoreThemeArrayType read FAdvancedThemeArray write FAdvancedThemeArray;
    property LogoArray: StoreLogoArrayType read FLogoArray write FLogoArray;
    property SubscriptionArray: StoreSubscriptionArrayType read FSubscriptionArray write FSubscriptionArray;
    property MaxCategories: Integer read FMaxCategories write FMaxCategories;
    property MaxCategoryLevels: Integer read FMaxCategoryLevels write FMaxCategoryLevels;
  end;

  GetStoreOptionsResponse = GetStoreOptionsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetStorePreferencesResponseType = class(AbstractResponseType)
  private
    FStorePreferences: StorePreferencesType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StorePreferences: StorePreferencesType read FStorePreferences write FStorePreferences;
  end;

  GetStorePreferencesResponse = GetStorePreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetSuggestedCategoriesResponseType = class(AbstractResponseType)
  private
    FSuggestedCategoryArray: SuggestedCategoryArrayType;
    FCategoryCount: Integer;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property SuggestedCategoryArray: SuggestedCategoryArrayType read FSuggestedCategoryArray write FSuggestedCategoryArray;
    property CategoryCount: Integer read FCategoryCount write FCategoryCount;
  end;

  GetSuggestedCategoriesResponse = GetSuggestedCategoriesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserDisputesResponseType = class(AbstractResponseType)
  private
    FStartingDisputeID: DisputeIDType;
    FEndingDisputeID: DisputeIDType;
    FDisputeArray: DisputeArrayType;
    FItemsPerPage: Integer;
    FPageNumber: Integer;
    FDisputeFilterCount: DisputeFilterCountType;
    FPaginationResult: PaginationResultType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property StartingDisputeID: DisputeIDType read FStartingDisputeID write FStartingDisputeID;
    property EndingDisputeID: DisputeIDType read FEndingDisputeID write FEndingDisputeID;
    property DisputeArray: DisputeArrayType read FDisputeArray write FDisputeArray;
    property ItemsPerPage: Integer read FItemsPerPage write FItemsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property DisputeFilterCount: DisputeFilterCountType read FDisputeFilterCount write FDisputeFilterCount;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
  end;

  GetUserDisputesResponse = GetUserDisputesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetUserPreferencesResponseType = class(AbstractResponseType)
  private
    FBidderNoticePreferences: BidderNoticePreferencesType;
    FCombinedPaymentPreferences: CombinedPaymentPreferencesType;
    FCrossPromotionPreferences: CrossPromotionPreferencesType;
    FSellerPaymentPreferences: SellerPaymentPreferencesType;
    FSellerFavoriteItemPreferences: SellerFavoriteItemPreferencesType;
    FEndOfAuctionEmailPreferences: EndOfAuctionEmailPreferencesType;
    FExpressPreferences: ExpressPreferencesType;
    FProStoresPreference: ProStoresCheckoutPreferenceType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property BidderNoticePreferences: BidderNoticePreferencesType read FBidderNoticePreferences write FBidderNoticePreferences;
    property CombinedPaymentPreferences: CombinedPaymentPreferencesType read FCombinedPaymentPreferences write FCombinedPaymentPreferences;
    property CrossPromotionPreferences: CrossPromotionPreferencesType read FCrossPromotionPreferences write FCrossPromotionPreferences;
    property SellerPaymentPreferences: SellerPaymentPreferencesType read FSellerPaymentPreferences write FSellerPaymentPreferences;
    property SellerFavoriteItemPreferences: SellerFavoriteItemPreferencesType read FSellerFavoriteItemPreferences write FSellerFavoriteItemPreferences;
    property EndOfAuctionEmailPreferences: EndOfAuctionEmailPreferencesType read FEndOfAuctionEmailPreferences write FEndOfAuctionEmailPreferences;
    property ExpressPreferences: ExpressPreferencesType read FExpressPreferences write FExpressPreferences;
    property ProStoresPreference: ProStoresCheckoutPreferenceType read FProStoresPreference write FProStoresPreference;
  end;

  GetUserPreferencesResponse = GetUserPreferencesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetVeROReasonCodeDetailsResponseType = class(AbstractResponseType)
  private
    FVeROReasonCodeDetails: VeROReasonCodeDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property VeROReasonCodeDetails: VeROReasonCodeDetailsType read FVeROReasonCodeDetails write FVeROReasonCodeDetails;
  end;

  GetVeROReasonCodeDetailsResponse = GetVeROReasonCodeDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetVeROReportStatusResponseType = class(AbstractResponseType)
  private
    FPaginationResult: PaginationResultType;
    FHasMoreItems: Boolean;
    FItemsPerPage: Integer;
    FPageNumber: Integer;
    FVeROReportPacketID: Int64;
    FVeROReportPacketStatus: VeROReportPacketStatusCodeType;
    FReportedItemDetails: VeROReportedItemDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
    property HasMoreItems: Boolean read FHasMoreItems write FHasMoreItems;
    property ItemsPerPage: Integer read FItemsPerPage write FItemsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property VeROReportPacketID: Int64 read FVeROReportPacketID write FVeROReportPacketID;
    property VeROReportPacketStatus: VeROReportPacketStatusCodeType read FVeROReportPacketStatus write FVeROReportPacketStatus;
    property ReportedItemDetails: VeROReportedItemDetailsType read FReportedItemDetails write FReportedItemDetails;
  end;

  GetVeROReportStatusResponse = GetVeROReportStatusResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetWantItNowPostResponseType = class(AbstractResponseType)
  private
    FWantItNowPost: WantItNowPostType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property WantItNowPost: WantItNowPostType read FWantItNowPost write FWantItNowPost;
  end;

  GetWantItNowPostResponse = GetWantItNowPostResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GetWantItNowSearchResultsResponseType = class(AbstractResponseType)
  private
    FWantItNowPostArray: WantItNowPostArrayType;
    FHasMoreItems: Boolean;
    FItemsPerPage: Integer;
    FPageNumber: Integer;
    FPaginationResult: PaginationResultType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property WantItNowPostArray: WantItNowPostArrayType read FWantItNowPostArray write FWantItNowPostArray;
    property HasMoreItems: Boolean read FHasMoreItems write FHasMoreItems;
    property ItemsPerPage: Integer read FItemsPerPage write FItemsPerPage;
    property PageNumber: Integer read FPageNumber write FPageNumber;
    property PaginationResult: PaginationResultType read FPaginationResult write FPaginationResult;
  end;

  GetWantItNowSearchResultsResponse = GetWantItNowSearchResultsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  GeteBayDetailsResponseType = class(AbstractResponseType)
  private
    FCountryDetails: CountryDetailsType;
    FCurrencyDetails: CurrencyDetailsType;
    FDispatchTimeMaxDetails: DispatchTimeMaxDetailsType;
    FPaymentOptionDetails: PaymentOptionDetailsType;
    FRegionDetails: RegionDetailsType;
    FShippingLocationDetails: ShippingLocationDetailsType;
    FShippingServiceDetails: ShippingServiceDetailsType;
    FSiteDetails: SiteDetailsType;
    FTaxJurisdiction: TaxJurisdictionType;
    FURLDetails: URLDetailsType;
    FTimeZoneDetails: TimeZoneDetailsType;
    FItemSpecificDetails: ItemSpecificDetailsType;
    FUnitOfMeasurementDetails: UnitOfMeasurementDetailsType;
    FRegionOfOriginDetails: RegionOfOriginDetailsType;
    FShippingPackageDetails: ShippingPackageDetailsType;
    FShippingCarrierDetails: ShippingCarrierDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property CountryDetails: CountryDetailsType read FCountryDetails write FCountryDetails;
    property CurrencyDetails: CurrencyDetailsType read FCurrencyDetails write FCurrencyDetails;
    property DispatchTimeMaxDetails: DispatchTimeMaxDetailsType read FDispatchTimeMaxDetails write FDispatchTimeMaxDetails;
    property PaymentOptionDetails: PaymentOptionDetailsType read FPaymentOptionDetails write FPaymentOptionDetails;
    property RegionDetails: RegionDetailsType read FRegionDetails write FRegionDetails;
    property ShippingLocationDetails: ShippingLocationDetailsType read FShippingLocationDetails write FShippingLocationDetails;
    property ShippingServiceDetails: ShippingServiceDetailsType read FShippingServiceDetails write FShippingServiceDetails;
    property SiteDetails: SiteDetailsType read FSiteDetails write FSiteDetails;
    property TaxJurisdiction: TaxJurisdictionType read FTaxJurisdiction write FTaxJurisdiction;
    property URLDetails: URLDetailsType read FURLDetails write FURLDetails;
    property TimeZoneDetails: TimeZoneDetailsType read FTimeZoneDetails write FTimeZoneDetails;
    property ItemSpecificDetails: ItemSpecificDetailsType read FItemSpecificDetails write FItemSpecificDetails;
    property UnitOfMeasurementDetails: UnitOfMeasurementDetailsType read FUnitOfMeasurementDetails write FUnitOfMeasurementDetails;
    property RegionOfOriginDetails: RegionOfOriginDetailsType read FRegionOfOriginDetails write FRegionOfOriginDetails;
    property ShippingPackageDetails: ShippingPackageDetailsType read FShippingPackageDetails write FShippingPackageDetails;
    property ShippingCarrierDetails: ShippingCarrierDetailsType read FShippingCarrierDetails write FShippingCarrierDetails;
  end;

  GeteBayDetailsResponse = GeteBayDetailsResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }


  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // Serializtn: [xoLiteralParam]
  // ************************************************************************ //
  UploadSiteHostedPicturesResponseType = class(AbstractResponseType)
  private
    FPictureSystemVersion: Integer;
    FSiteHostedPictureDetails: SiteHostedPictureDetailsType;
  public
    constructor Create; override;
    destructor Destroy; override;
  published
    property PictureSystemVersion: Integer read FPictureSystemVersion write FPictureSystemVersion;
    property SiteHostedPictureDetails: SiteHostedPictureDetailsType read FSiteHostedPictureDetails write FSiteHostedPictureDetails;
  end;

  UploadSiteHostedPicturesResponse = UploadSiteHostedPicturesResponseType;      { "urn:ebay:apis:eBLBaseComponents"[L] }

  // ************************************************************************ //
  // Namespace : urn:ebay:apis:eBLBaseComponents
  // transport : http://schemas.xmlsoap.org/soap/http
  // style     : document
  // binding   : eBayAPISoapBinding
  // service   : eBayAPIInterfaceService
  // port      : eBayAPI
  // URL       : https://api.ebay.com/wsapi
  // ************************************************************************ //
  eBayAPIInterface = interface(IInvokable)
  ['{2BC4B12B-8207-48B3-0A35-5DC99215D445}']
    function  AddDispute(const AddDisputeRequest: AddDisputeRequest): AddDisputeResponse; stdcall;
    function  AddDisputeResponse(const AddDisputeResponseRequest: AddDisputeResponseRequest): AddDisputeResponseResponse; stdcall;
    function  AddItem(const AddItemRequest: AddItemRequest): AddItemResponse; stdcall;
    function  AddLiveAuctionItem(const AddLiveAuctionItemRequest: AddLiveAuctionItemRequest): AddLiveAuctionItemResponse; stdcall;
    function  AddMemberMessageAAQToPartner(const AddMemberMessageAAQToPartnerRequest: AddMemberMessageAAQToPartnerRequest): AddMemberMessageAAQToPartnerResponse; stdcall;
    function  AddMemberMessageRTQ(const AddMemberMessageRTQRequest: AddMemberMessageRTQRequest): AddMemberMessageRTQResponse; stdcall;
    function  AddMemberMessagesAAQToBidder(const AddMemberMessagesAAQToBidderRequest: AddMemberMessagesAAQToBidderRequest): AddMemberMessagesAAQToBidderResponse; stdcall;
    function  AddOrder(const AddOrderRequest: AddOrderRequest): AddOrderResponse; stdcall;
    function  AddSecondChanceItem(const AddSecondChanceItemRequest: AddSecondChanceItemRequest): AddSecondChanceItemResponse; stdcall;
    function  AddToItemDescription(const AddToItemDescriptionRequest: AddToItemDescriptionRequest): AddToItemDescriptionResponse; stdcall;
    function  AddToWatchList(const AddToWatchListRequest: AddToWatchListRequest): AddToWatchListResponse; stdcall;
    function  AddTransactionConfirmationItem(const AddTransactionConfirmationItemRequest: AddTransactionConfirmationItemRequest): AddTransactionConfirmationItemResponse; stdcall;
    function  ApproveLiveAuctionBidders(const ApproveLiveAuctionBiddersRequest: ApproveLiveAuctionBiddersRequest): ApproveLiveAuctionBiddersResponse; stdcall;
    function  CompleteSale(const CompleteSaleRequest: CompleteSaleRequest): CompleteSaleResponse; stdcall;
    function  DeleteMyMessages(const DeleteMyMessagesRequest: DeleteMyMessagesRequest): DeleteMyMessagesResponse; stdcall;
    function  EndItem(const EndItemRequest: EndItemRequest): EndItemResponse; stdcall;
    function  FetchToken(const FetchTokenRequest: FetchTokenRequest): FetchTokenResponse; stdcall;
    function  GetAccount(const GetAccountRequest: GetAccountRequest): GetAccountResponse; stdcall;
    function  GetAdFormatLeads(const GetAdFormatLeadsRequest: GetAdFormatLeadsRequest): GetAdFormatLeadsResponse; stdcall;
    function  GetAllBidders(const GetAllBiddersRequest: GetAllBiddersRequest): GetAllBiddersResponse; stdcall;
    function  GetApiAccessRules(const GetApiAccessRulesRequest: GetApiAccessRulesRequest): GetApiAccessRulesResponse; stdcall;
    function  GetAttributesCS(const GetAttributesCSRequest: GetAttributesCSRequest): GetAttributesCSResponse; stdcall;
    function  GetAttributesXSL(const GetAttributesXSLRequest: GetAttributesXSLRequest): GetAttributesXSLResponse; stdcall;
    function  GetBestOffers(const GetBestOffersRequest: GetBestOffersRequest): GetBestOffersResponse; stdcall;
    function  GetBidderList(const GetBidderListRequest: GetBidderListRequest): GetBidderListResponse; stdcall;
    function  GetCart(const GetCartRequest: GetCartRequest): GetCartResponse; stdcall;
    function  GetCategories(const GetCategoriesRequest: GetCategoriesRequest): GetCategoriesResponse; stdcall;
    function  GetCategory2CS(const GetCategory2CSRequest: GetCategory2CSRequest): GetCategory2CSResponse; stdcall;
    function  GetCategoryFeatures(const GetCategoryFeaturesRequest: GetCategoryFeaturesRequest): GetCategoryFeaturesResponse; stdcall;
    function  GetCategoryListings(const GetCategoryListingsRequest: GetCategoryListingsRequest): GetCategoryListingsResponse; stdcall;
    function  GetCategoryMappings(const GetCategoryMappingsRequest: GetCategoryMappingsRequest): GetCategoryMappingsResponse; stdcall;
    function  GetCategorySpecifics(const GetCategorySpecificsRequest: GetCategorySpecificsRequest): GetCategorySpecificsResponse; stdcall;
    function  GetChallengeToken(const GetChallengeTokenRequest: GetChallengeTokenRequest): GetChallengeTokenResponse; stdcall;
    function  GetCharities(const GetCharitiesRequest: GetCharitiesRequest): GetCharitiesResponse; stdcall;
    function  GetContextualKeywords(const GetContextualKeywordsRequest: GetContextualKeywordsRequest): GetContextualKeywordsResponse; stdcall;
    function  GetCrossPromotions(const GetCrossPromotionsRequest: GetCrossPromotionsRequest): GetCrossPromotionsResponse; stdcall;
    function  GetDescriptionTemplates(const GetDescriptionTemplatesRequest: GetDescriptionTemplatesRequest): GetDescriptionTemplatesResponse; stdcall;
    function  GetDispute(const GetDisputeRequest: GetDisputeRequest): GetDisputeResponse; stdcall;
    function  GetExpressWishList(const GetExpressWishListRequest: GetExpressWishListRequest): GetExpressWishListResponse; stdcall;
    function  GetFeedback(const GetFeedbackRequest: GetFeedbackRequest): GetFeedbackResponse; stdcall;
    function  GetHighBidders(const GetHighBiddersRequest: GetHighBiddersRequest): GetHighBiddersResponse; stdcall;
    function  GetItem(const GetItemRequest: GetItemRequest): GetItemResponse; stdcall;
    function  GetItemRecommendations(const GetItemRecommendationsRequest: GetItemRecommendationsRequest): GetItemRecommendationsResponse; stdcall;
    function  GetItemShipping(const GetItemShippingRequest: GetItemShippingRequest): GetItemShippingResponse; stdcall;
    function  GetItemTransactions(const GetItemTransactionsRequest: GetItemTransactionsRequest): GetItemTransactionsResponse; stdcall;
    function  GetItemsAwaitingFeedback(const GetItemsAwaitingFeedbackRequest: GetItemsAwaitingFeedbackRequest): GetItemsAwaitingFeedbackResponse; stdcall;
    function  GetLiveAuctionBidders(const GetLiveAuctionBiddersRequest: GetLiveAuctionBiddersRequest): GetLiveAuctionBiddersResponse; stdcall;
    function  GetLiveAuctionCatalogDetails(const GetLiveAuctionCatalogDetailsRequest: GetLiveAuctionCatalogDetailsRequest): GetLiveAuctionCatalogDetailsResponse; stdcall;
    function  GetMemberMessages(const GetMemberMessagesRequest: GetMemberMessagesRequest): GetMemberMessagesResponse; stdcall;
    function  GetMessagePreferences(const GetMessagePreferencesRequest: GetMessagePreferencesRequest): GetMessagePreferencesResponse; stdcall;
    function  GetMyMessages(const GetMyMessagesRequest: GetMyMessagesRequest): GetMyMessagesResponse; stdcall;
    function  GetMyeBayBuying(const GetMyeBayBuyingRequest: GetMyeBayBuyingRequest): GetMyeBayBuyingResponse; stdcall;
    function  GetMyeBayReminders(const GetMyeBayRemindersRequest: GetMyeBayRemindersRequest): GetMyeBayRemindersResponse; stdcall;
    function  GetMyeBaySelling(const GetMyeBaySellingRequest: GetMyeBaySellingRequest): GetMyeBaySellingResponse; stdcall;
    function  GetNotificationPreferences(const GetNotificationPreferencesRequest: GetNotificationPreferencesRequest): GetNotificationPreferencesResponse; stdcall;
    function  GetNotificationsUsage(const GetNotificationsUsageRequest: GetNotificationsUsageRequest): GetNotificationsUsageResponse; stdcall;
    function  GetOrderTransactions(const GetOrderTransactionsRequest: GetOrderTransactionsRequest): GetOrderTransactionsResponse; stdcall;
    function  GetOrders(const GetOrdersRequest: GetOrdersRequest): GetOrdersResponse; stdcall;
    function  GetPictureManagerDetails(const GetPictureManagerDetailsRequest: GetPictureManagerDetailsRequest): GetPictureManagerDetailsResponse; stdcall;
    function  GetPictureManagerOptions(const GetPictureManagerOptionsRequest: GetPictureManagerOptionsRequest): GetPictureManagerOptionsResponse; stdcall;
    function  GetPopularKeywords(const GetPopularKeywordsRequest: GetPopularKeywordsRequest): GetPopularKeywordsResponse; stdcall;
    function  GetProductFamilyMembers(const GetProductFamilyMembersRequest: GetProductFamilyMembersRequest): GetProductFamilyMembersResponse; stdcall;
    function  GetProductFinder(const GetProductFinderRequest: GetProductFinderRequest): GetProductFinderResponse; stdcall;
    function  GetProductFinderXSL(const GetProductFinderXSLRequest: GetProductFinderXSLRequest): GetProductFinderXSLResponse; stdcall;
    function  GetProductSearchPage(const GetProductSearchPageRequest: GetProductSearchPageRequest): GetProductSearchPageResponse; stdcall;
    function  GetProductSearchResults(const GetProductSearchResultsRequest: GetProductSearchResultsRequest): GetProductSearchResultsResponse; stdcall;
    function  GetProductSellingPages(const GetProductSellingPagesRequest: GetProductSellingPagesRequest): GetProductSellingPagesResponse; stdcall;
    function  GetProducts(const GetProductsRequest: GetProductsRequest): GetProductsResponse; stdcall;
    function  GetPromotionRules(const GetPromotionRulesRequest: GetPromotionRulesRequest): GetPromotionRulesResponse; stdcall;
    function  GetPromotionalSaleDetails(const GetPromotionalSaleDetailsRequest: GetPromotionalSaleDetailsRequest): GetPromotionalSaleDetailsResponse; stdcall;
    function  GetReturnURL(const GetReturnURLRequest: GetReturnURLRequest): GetReturnURLResponse; stdcall;
    function  GetRuName(const GetRuNameRequest: GetRuNameRequest): GetRuNameResponse; stdcall;
    function  GetSearchResults(const GetSearchResultsRequest: GetSearchResultsRequest): GetSearchResultsResponse; stdcall;
    function  GetSearchResultsExpress(const GetSearchResultsExpressRequest: GetSearchResultsExpressRequest): GetSearchResultsExpressResponse; stdcall;
    function  GetSellerEvents(const GetSellerEventsRequest: GetSellerEventsRequest): GetSellerEventsResponse; stdcall;
    function  GetSellerList(const GetSellerListRequest: GetSellerListRequest): GetSellerListResponse; stdcall;
    function  GetSellerPayments(const GetSellerPaymentsRequest: GetSellerPaymentsRequest): GetSellerPaymentsResponse; stdcall;
    function  GetSellerTransactions(const GetSellerTransactionsRequest: GetSellerTransactionsRequest): GetSellerTransactionsResponse; stdcall;
    function  GetShippingDiscountProfiles(const GetShippingDiscountProfilesRequest: GetShippingDiscountProfilesRequest): GetShippingDiscountProfilesResponse; stdcall;
    function  GetStore(const GetStoreRequest: GetStoreRequest): GetStoreResponse; stdcall;
    function  GetStoreCategoryUpdateStatus(const GetStoreCategoryUpdateStatusRequest: GetStoreCategoryUpdateStatusRequest): GetStoreCategoryUpdateStatusResponse; stdcall;
    function  GetStoreCustomPage(const GetStoreCustomPageRequest: GetStoreCustomPageRequest): GetStoreCustomPageResponse; stdcall;
    function  GetStoreOptions(const GetStoreOptionsRequest: GetStoreOptionsRequest): GetStoreOptionsResponse; stdcall;
    function  GetStorePreferences(const GetStorePreferencesRequest: GetStorePreferencesRequest): GetStorePreferencesResponse; stdcall;
    function  GetSuggestedCategories(const GetSuggestedCategoriesRequest: GetSuggestedCategoriesRequest): GetSuggestedCategoriesResponse; stdcall;
    function  GetTaxTable(const GetTaxTableRequest: GetTaxTableRequest): GetTaxTableResponse; stdcall;
    function  GetUser(const GetUserRequest: GetUserRequest): GetUserResponse; stdcall;
    function  GetUserContactDetails(const GetUserContactDetailsRequest: GetUserContactDetailsRequest): GetUserContactDetailsResponse; stdcall;
    function  GetUserDisputes(const GetUserDisputesRequest: GetUserDisputesRequest): GetUserDisputesResponse; stdcall;
    function  GetUserPreferences(const GetUserPreferencesRequest: GetUserPreferencesRequest): GetUserPreferencesResponse; stdcall;
    function  GetVeROReasonCodeDetails(const GetVeROReasonCodeDetailsRequest: GetVeROReasonCodeDetailsRequest): GetVeROReasonCodeDetailsResponse; stdcall;
    function  GetVeROReportStatus(const GetVeROReportStatusRequest: GetVeROReportStatusRequest): GetVeROReportStatusResponse; stdcall;
    function  GetWantItNowPost(const GetWantItNowPostRequest: GetWantItNowPostRequest): GetWantItNowPostResponse; stdcall;
    function  GetWantItNowSearchResults(const GetWantItNowSearchResultsRequest: GetWantItNowSearchResultsRequest): GetWantItNowSearchResultsResponse; stdcall;
    function  GeteBayDetails(const GeteBayDetailsRequest: GeteBayDetailsRequest): GeteBayDetailsResponse; stdcall;
    function  GeteBayOfficialTime(const GeteBayOfficialTimeRequest: GeteBayOfficialTimeRequest): GeteBayOfficialTimeResponse; stdcall;
    function  IssueRefund(const IssueRefundRequest: IssueRefundRequest): IssueRefundResponse; stdcall;
    function  LeaveFeedback(const LeaveFeedbackRequest: LeaveFeedbackRequest): LeaveFeedbackResponse; stdcall;
    function  PlaceOffer(const PlaceOfferRequest: PlaceOfferRequest): PlaceOfferResponse; stdcall;
    function  RelistItem(const RelistItemRequest: RelistItemRequest): RelistItemResponse; stdcall;
    function  RemoveFromWatchList(const RemoveFromWatchListRequest: RemoveFromWatchListRequest): RemoveFromWatchListResponse; stdcall;
    function  RespondToBestOffer(const RespondToBestOfferRequest: RespondToBestOfferRequest): RespondToBestOfferResponse; stdcall;
    function  RespondToFeedback(const RespondToFeedbackRequest: RespondToFeedbackRequest): RespondToFeedbackResponse; stdcall;
    function  RespondToWantItNowPost(const RespondToWantItNowPostRequest: RespondToWantItNowPostRequest): RespondToWantItNowPostResponse; stdcall;
    function  ReviseCheckoutStatus(const ReviseCheckoutStatusRequest: ReviseCheckoutStatusRequest): ReviseCheckoutStatusResponse; stdcall;
    function  ReviseItem(const ReviseItemRequest: ReviseItemRequest): ReviseItemResponse; stdcall;
    function  ReviseLiveAuctionItem(const ReviseLiveAuctionItemRequest: ReviseLiveAuctionItemRequest): ReviseLiveAuctionItemResponse; stdcall;
    function  ReviseMyMessages(const ReviseMyMessagesRequest: ReviseMyMessagesRequest): ReviseMyMessagesResponse; stdcall;
    function  ReviseMyMessagesFolders(const ReviseMyMessagesFoldersRequest: ReviseMyMessagesFoldersRequest): ReviseMyMessagesFoldersResponse; stdcall;
    function  SellerReverseDispute(const SellerReverseDisputeRequest: SellerReverseDisputeRequest): SellerReverseDisputeResponse; stdcall;
    function  SendInvoice(const SendInvoiceRequest: SendInvoiceRequest): SendInvoiceResponse; stdcall;
    function  SetCart(const SetCartRequest: SetCartRequest): SetCartResponse; stdcall;
    function  SetMessagePreferences(const SetMessagePreferencesRequest: SetMessagePreferencesRequest): SetMessagePreferencesResponse; stdcall;
    function  SetNotificationPreferences(const SetNotificationPreferencesRequest: SetNotificationPreferencesRequest): SetNotificationPreferencesResponse; stdcall;
    function  SetPictureManagerDetails(const SetPictureManagerDetailsRequest: SetPictureManagerDetailsRequest): SetPictureManagerDetailsResponse; stdcall;
    function  SetPromotionalSale(const SetPromotionalSaleRequest: SetPromotionalSaleRequest): SetPromotionalSaleResponse; stdcall;
    function  SetPromotionalSaleListings(const SetPromotionalSaleListingsRequest: SetPromotionalSaleListingsRequest): SetPromotionalSaleListingsResponse; stdcall;
    function  SetReturnURL(const SetReturnURLRequest: SetReturnURLRequest): SetReturnURLResponse; stdcall;
    function  SetShippingDiscountProfiles(const SetShippingDiscountProfilesRequest: SetShippingDiscountProfilesRequest): SetShippingDiscountProfilesResponse; stdcall;
    function  SetStore(const SetStoreRequest: SetStoreRequest): SetStoreResponse; stdcall;
    function  SetStoreCategories(const SetStoreCategoriesRequest: SetStoreCategoriesRequest): SetStoreCategoriesResponse; stdcall;
    function  SetStoreCustomPage(const SetStoreCustomPageRequest: SetStoreCustomPageRequest): SetStoreCustomPageResponse; stdcall;
    function  SetStorePreferences(const SetStorePreferencesRequest: SetStorePreferencesRequest): SetStorePreferencesResponse; stdcall;
    function  SetTaxTable(const SetTaxTableRequest: SetTaxTableRequest): SetTaxTableResponse; stdcall;
    function  SetUserNotes(const SetUserNotesRequest: SetUserNotesRequest): SetUserNotesResponse; stdcall;
    function  SetUserPreferences(const SetUserPreferencesRequest: SetUserPreferencesRequest): SetUserPreferencesResponse; stdcall;
    function  UploadSiteHostedPictures(const UploadSiteHostedPicturesRequest: UploadSiteHostedPicturesRequest): UploadSiteHostedPicturesResponse; stdcall;
    function  ValidateChallengeInput(const ValidateChallengeInputRequest: ValidateChallengeInputRequest): ValidateChallengeInputResponse; stdcall;
    function  ValidateTestUserRegistration(const ValidateTestUserRegistrationRequest: ValidateTestUserRegistrationRequest): ValidateTestUserRegistrationResponse; stdcall;
    function  VeROReportItems(const VeROReportItemsRequest: VeROReportItemsRequest): VeROReportItemsResponse; stdcall;
    function  VerifyAddItem(const VerifyAddItemRequest: VerifyAddItemRequest): VerifyAddItemResponse; stdcall;
    function  VerifyAddSecondChanceItem(const VerifyAddSecondChanceItemRequest: VerifyAddSecondChanceItemRequest): VerifyAddSecondChanceItemResponse; stdcall;
  end;

function GeteBayAPIInterface(UseWSDL: Boolean=System.False; Addr: string=''; HTTPRIO: THTTPRIO = nil): eBayAPIInterface;


implementation

function GeteBayAPIInterface(UseWSDL: Boolean; Addr: string; HTTPRIO: THTTPRIO): eBayAPIInterface;
const
  defWSDL = 'C:\Documents and Settings\David.LAPTOP-D3FE71EB\Desktop\ebaySvc.wsdl';
  defURL  = 'https://api.ebay.com/wsapi';
  defSvc  = 'eBayAPIInterfaceService';
  defPrt  = 'eBayAPI';
var
  RIO: THTTPRIO;
begin
  Result := nil;
  if (Addr = '') then
  begin
    if UseWSDL then
      Addr := defWSDL
    else
      Addr := defURL;
  end;
  if HTTPRIO = nil then
    RIO := THTTPRIO.Create(nil)
  else
    RIO := HTTPRIO;
  try
    Result := (RIO as eBayAPIInterface);
    if UseWSDL then
    begin
      RIO.WSDLLocation := Addr;
      RIO.Service := defSvc;
      RIO.Port := defPrt;
    end else
      RIO.URL := Addr;
  finally
    if (Result = nil) and (HTTPRIO = nil) then
      RIO.Free;
  end;
end;


destructor CustomSecurityHeaderType.Destroy;
begin
  if Assigned(FCredentials) then
    FCredentials.Free;
  inherited Destroy;
end;

destructor LiveAuctionDetailsType.Destroy;
begin
  if Assigned(FHighEstimate) then
    FHighEstimate.Free;
  if Assigned(FLowEstimate) then
    FLowEstimate.Free;
  inherited Destroy;
end;

destructor BestOfferDetailsType.Destroy;
begin
  if Assigned(FBestOffer) then
    FBestOffer.Free;
  inherited Destroy;
end;

destructor BiddingDetailsType.Destroy;
begin
  if Assigned(FConvertedMaxBid) then
    FConvertedMaxBid.Free;
  if Assigned(FMaxBid) then
    FMaxBid.Free;
  inherited Destroy;
end;

destructor PromotionDetailsType.Destroy;
begin
  if Assigned(FPromotionPrice) then
    FPromotionPrice.Free;
  if Assigned(FConvertedPromotionPrice) then
    FConvertedPromotionPrice.Free;
  inherited Destroy;
end;

destructor PromotedItemType.Destroy;
begin
  if Assigned(FPromotionDetails) then
    FPromotionDetails.Free;
  if Assigned(FTimeLeft) then
    FTimeLeft.Free;
  inherited Destroy;
end;

destructor CrossPromotionsType.Destroy;
begin
  if Assigned(FPromotedItem) then
    FPromotedItem.Free;
  inherited Destroy;
end;

destructor ListingDetailsType.Destroy;
begin
  if Assigned(FConvertedBuyItNowPrice) then
    FConvertedBuyItNowPrice.Free;
  if Assigned(FConvertedStartPrice) then
    FConvertedStartPrice.Free;
  if Assigned(FConvertedReservePrice) then
    FConvertedReservePrice.Free;
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  if Assigned(FMinimumBestOfferPrice) then
    FMinimumBestOfferPrice.Free;
  if Assigned(FExpressItemRequirements) then
    FExpressItemRequirements.Free;
  if Assigned(FBestOfferAutoAcceptPrice) then
    FBestOfferAutoAcceptPrice.Free;
  inherited Destroy;
end;

destructor CharacteristicType.Destroy;
begin
  if Assigned(FLabel_) then
    FLabel_.Free;
  if Assigned(FValueList) then
    FValueList.Free;
  inherited Destroy;
end;

destructor CharacteristicsSetType.Destroy;
begin
  if Assigned(FCharacteristics) then
    FCharacteristics.Free;
  inherited Destroy;
end;

destructor CategoryType.Destroy;
begin
  if Assigned(FProductFinderIDs) then
    FProductFinderIDs.Free;
  if Assigned(FCharacteristicsSets) then
    FCharacteristicsSets.Free;
  inherited Destroy;
end;

destructor BuyerType.Destroy;
begin
  if Assigned(FShippingAddress) then
    FShippingAddress.Free;
  inherited Destroy;
end;

destructor ProStoresCheckoutPreferenceType.Destroy;
begin
  if Assigned(FProStoresDetails) then
    FProStoresDetails.Free;
  inherited Destroy;
end;

destructor ExpressSellerRequirementsType.Destroy;
begin
  if Assigned(FFeedbackScore) then
    FFeedbackScore.Free;
  if Assigned(FPositiveFeedbackPercent) then
    FPositiveFeedbackPercent.Free;
  if Assigned(FFeedbackAsSellerScore) then
    FFeedbackAsSellerScore.Free;
  if Assigned(FPositiveFeedbackAsSellerPercent) then
    FPositiveFeedbackAsSellerPercent.Free;
  inherited Destroy;
end;

destructor SellerType.Destroy;
begin
  if Assigned(FSellerPaymentAddress) then
    FSellerPaymentAddress.Free;
  if Assigned(FSchedulingInfo) then
    FSchedulingInfo.Free;
  if Assigned(FProStoresPreference) then
    FProStoresPreference.Free;
  if Assigned(FExpressSellerRequirements) then
    FExpressSellerRequirements.Free;
  inherited Destroy;
end;

destructor CharitySellerType.Destroy;
begin
  if Assigned(FCharityAffiliation) then
    FCharityAffiliation.Free;
  inherited Destroy;
end;

destructor ItemBidDetailsType.Destroy;
begin
  if Assigned(FLastBidTime) then
    FLastBidTime.Free;
  inherited Destroy;
end;

destructor BiddingSummaryType.Destroy;
begin
  if Assigned(FItemBidDetails) then
    FItemBidDetails.Free;
  inherited Destroy;
end;

destructor UserType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCharityAffiliations)-1 do
    if Assigned(FCharityAffiliations[I]) then
      FCharityAffiliations[I].Free;
  SetLength(FCharityAffiliations, 0);
  if Assigned(FRegistrationAddress) then
    FRegistrationAddress.Free;
  if Assigned(FRegistrationDate) then
    FRegistrationDate.Free;
  if Assigned(FUserIDLastChanged) then
    FUserIDLastChanged.Free;
  if Assigned(FBuyerInfo) then
    FBuyerInfo.Free;
  if Assigned(FSellerInfo) then
    FSellerInfo.Free;
  if Assigned(FCharitySeller) then
    FCharitySeller.Free;
  if Assigned(FBiddingSummary) then
    FBiddingSummary.Free;
  inherited Destroy;
end;

destructor PromotionalSaleDetailsType.Destroy;
begin
  if Assigned(FOriginalPrice) then
    FOriginalPrice.Free;
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

destructor SellingStatusType.Destroy;
begin
  if Assigned(FBidIncrement) then
    FBidIncrement.Free;
  if Assigned(FConvertedCurrentPrice) then
    FConvertedCurrentPrice.Free;
  if Assigned(FCurrentPrice) then
    FCurrentPrice.Free;
  if Assigned(FHighBidder) then
    FHighBidder.Free;
  if Assigned(FMinimumToBid) then
    FMinimumToBid.Free;
  if Assigned(FFinalValueFee) then
    FFinalValueFee.Free;
  if Assigned(FPromotionalSaleDetails) then
    FPromotionalSaleDetails.Free;
  inherited Destroy;
end;

destructor SalesTaxType.Destroy;
begin
  if Assigned(FSalesTaxAmount) then
    FSalesTaxAmount.Free;
  inherited Destroy;
end;

destructor ShippingServiceOptionsType.Destroy;
begin
  if Assigned(FShippingInsuranceCost) then
    FShippingInsuranceCost.Free;
  if Assigned(FShippingServiceCost) then
    FShippingServiceCost.Free;
  if Assigned(FShippingServiceAdditionalCost) then
    FShippingServiceAdditionalCost.Free;
  if Assigned(FShippingSurcharge) then
    FShippingSurcharge.Free;
  inherited Destroy;
end;

destructor InternationalShippingServiceOptionsType.Destroy;
begin
  if Assigned(FShippingServiceCost) then
    FShippingServiceCost.Free;
  if Assigned(FShippingServiceAdditionalCost) then
    FShippingServiceAdditionalCost.Free;
  if Assigned(FShippingInsuranceCost) then
    FShippingInsuranceCost.Free;
  inherited Destroy;
end;

destructor InsuranceDetailsType.Destroy;
begin
  if Assigned(FInsuranceFee) then
    FInsuranceFee.Free;
  inherited Destroy;
end;

destructor PromotionalShippingDiscountDetailsType.Destroy;
begin
  if Assigned(FShippingCost) then
    FShippingCost.Free;
  if Assigned(FOrderAmount) then
    FOrderAmount.Free;
  inherited Destroy;
end;

destructor CalculatedShippingRateType.Destroy;
begin
  if Assigned(FPackageDepth) then
    FPackageDepth.Free;
  if Assigned(FPackageLength) then
    FPackageLength.Free;
  if Assigned(FPackageWidth) then
    FPackageWidth.Free;
  if Assigned(FPackagingHandlingCosts) then
    FPackagingHandlingCosts.Free;
  if Assigned(FWeightMajor) then
    FWeightMajor.Free;
  if Assigned(FWeightMinor) then
    FWeightMinor.Free;
  if Assigned(FInternationalPackagingHandlingCosts) then
    FInternationalPackagingHandlingCosts.Free;
  inherited Destroy;
end;

destructor DiscountProfileType.Destroy;
begin
  if Assigned(FEachAdditionalAmount) then
    FEachAdditionalAmount.Free;
  if Assigned(FEachAdditionalAmountOff) then
    FEachAdditionalAmountOff.Free;
  if Assigned(FWeightOff) then
    FWeightOff.Free;
  inherited Destroy;
end;

destructor CalculatedShippingDiscountType.Destroy;
begin
  if Assigned(FDiscountProfile) then
    FDiscountProfile.Free;
  inherited Destroy;
end;

destructor FlatShippingDiscountType.Destroy;
begin
  if Assigned(FDiscountProfile) then
    FDiscountProfile.Free;
  inherited Destroy;
end;

destructor ShippingDetailsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTaxTable)-1 do
    if Assigned(FTaxTable[I]) then
      FTaxTable[I].Free;
  SetLength(FTaxTable, 0);
  if Assigned(FCalculatedShippingRate) then
    FCalculatedShippingRate.Free;
  if Assigned(FInsuranceFee) then
    FInsuranceFee.Free;
  if Assigned(FSalesTax) then
    FSalesTax.Free;
  if Assigned(FShippingServiceOptions) then
    FShippingServiceOptions.Free;
  if Assigned(FInternationalShippingServiceOption) then
    FInternationalShippingServiceOption.Free;
  if Assigned(FDefaultShippingCost) then
    FDefaultShippingCost.Free;
  if Assigned(FInsuranceDetails) then
    FInsuranceDetails.Free;
  if Assigned(FInternationalInsuranceDetails) then
    FInternationalInsuranceDetails.Free;
  if Assigned(FFlatShippingDiscount) then
    FFlatShippingDiscount.Free;
  if Assigned(FCalculatedShippingDiscount) then
    FCalculatedShippingDiscount.Free;
  if Assigned(FInternationalFlatShippingDiscount) then
    FInternationalFlatShippingDiscount.Free;
  if Assigned(FInternationalCalculatedShippingDiscount) then
    FInternationalCalculatedShippingDiscount.Free;
  if Assigned(FPromotionalShippingDiscountDetails) then
    FPromotionalShippingDiscountDetails.Free;
  inherited Destroy;
end;

destructor BuyerRequirementsType.Destroy;
begin
  if Assigned(FMaximumItemRequirements) then
    FMaximumItemRequirements.Free;
  if Assigned(FVerifiedUserRequirements) then
    FVerifiedUserRequirements.Free;
  inherited Destroy;
end;

destructor ContactHoursDetailsType.Destroy;
begin
  if Assigned(FHours1From) then
    FHours1From.Free;
  if Assigned(FHours1To) then
    FHours1To.Free;
  if Assigned(FHours2From) then
    FHours2From.Free;
  if Assigned(FHours2To) then
    FHours2To.Free;
  inherited Destroy;
end;

destructor ExtendedContactDetailsType.Destroy;
begin
  if Assigned(FContactHoursDetails) then
    FContactHoursDetails.Free;
  inherited Destroy;
end;

destructor ItemType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FLookupAttributeArray)-1 do
    if Assigned(FLookupAttributeArray[I]) then
      FLookupAttributeArray[I].Free;
  SetLength(FLookupAttributeArray, 0);
  for I := 0 to Length(FItemSpecifics)-1 do
    if Assigned(FItemSpecifics[I]) then
      FItemSpecifics[I].Free;
  SetLength(FItemSpecifics, 0);
  if Assigned(FPaymentDetails) then
    FPaymentDetails.Free;
  if Assigned(FBiddingDetails) then
    FBiddingDetails.Free;
  if Assigned(FBuyItNowPrice) then
    FBuyItNowPrice.Free;
  if Assigned(FCharity) then
    FCharity.Free;
  if Assigned(FCrossPromotion) then
    FCrossPromotion.Free;
  if Assigned(FDistance) then
    FDistance.Free;
  if Assigned(FListingDetails) then
    FListingDetails.Free;
  if Assigned(FListingDesigner) then
    FListingDesigner.Free;
  if Assigned(FPrimaryCategory) then
    FPrimaryCategory.Free;
  if Assigned(FProductListingDetails) then
    FProductListingDetails.Free;
  if Assigned(FReservePrice) then
    FReservePrice.Free;
  if Assigned(FReviseStatus) then
    FReviseStatus.Free;
  if Assigned(FScheduleTime) then
    FScheduleTime.Free;
  if Assigned(FSecondaryCategory) then
    FSecondaryCategory.Free;
  if Assigned(FFreeAddedCategory) then
    FFreeAddedCategory.Free;
  if Assigned(FSeller) then
    FSeller.Free;
  if Assigned(FSellingStatus) then
    FSellingStatus.Free;
  if Assigned(FShippingDetails) then
    FShippingDetails.Free;
  if Assigned(FStartPrice) then
    FStartPrice.Free;
  if Assigned(FStorefront) then
    FStorefront.Free;
  if Assigned(FTimeLeft) then
    FTimeLeft.Free;
  if Assigned(FVATDetails) then
    FVATDetails.Free;
  if Assigned(FBuyerRequirements) then
    FBuyerRequirements.Free;
  if Assigned(FBestOfferDetails) then
    FBestOfferDetails.Free;
  if Assigned(FLiveAuctionDetails) then
    FLiveAuctionDetails.Free;
  if Assigned(FSearchDetails) then
    FSearchDetails.Free;
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  if Assigned(FPictureDetails) then
    FPictureDetails.Free;
  if Assigned(FDigitalDeliveryDetails) then
    FDigitalDeliveryDetails.Free;
  if Assigned(FListingCheckoutRedirectPreference) then
    FListingCheckoutRedirectPreference.Free;
  if Assigned(FExpressDetails) then
    FExpressDetails.Free;
  if Assigned(FSellerContactDetails) then
    FSellerContactDetails.Free;
  if Assigned(FExtendedSellerContactDetails) then
    FExtendedSellerContactDetails.Free;
  if Assigned(FClassifiedAdPayPerLeadFee) then
    FClassifiedAdPayPerLeadFee.Free;
  if Assigned(FApplyBuyerProtection) then
    FApplyBuyerProtection.Free;
  inherited Destroy;
end;

destructor FeeType.Destroy;
begin
  if Assigned(FFee) then
    FFee.Free;
  inherited Destroy;
end;

destructor AddMemberMessagesAAQToBidderRequestContainerType.Destroy;
begin
  if Assigned(FMemberMessage) then
    FMemberMessage.Free;
  inherited Destroy;
end;

destructor CheckoutStatusType.Destroy;
begin
  if Assigned(FLastModifiedTime) then
    FLastModifiedTime.Free;
  inherited Destroy;
end;

destructor ExternalTransactionType.Destroy;
begin
  if Assigned(FExternalTransactionTime) then
    FExternalTransactionTime.Free;
  if Assigned(FFeeOrCreditAmount) then
    FFeeOrCreditAmount.Free;
  if Assigned(FPaymentOrRefundAmount) then
    FPaymentOrRefundAmount.Free;
  inherited Destroy;
end;

destructor OrderType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTransactionArray)-1 do
    if Assigned(FTransactionArray[I]) then
      FTransactionArray[I].Free;
  SetLength(FTransactionArray, 0);
  if Assigned(FAdjustmentAmount) then
    FAdjustmentAmount.Free;
  if Assigned(FAmountPaid) then
    FAmountPaid.Free;
  if Assigned(FAmountSaved) then
    FAmountSaved.Free;
  if Assigned(FCheckoutStatus) then
    FCheckoutStatus.Free;
  if Assigned(FShippingDetails) then
    FShippingDetails.Free;
  if Assigned(FCreatedTime) then
    FCreatedTime.Free;
  if Assigned(FShippingAddress) then
    FShippingAddress.Free;
  if Assigned(FShippingServiceSelected) then
    FShippingServiceSelected.Free;
  if Assigned(FSubtotal) then
    FSubtotal.Free;
  if Assigned(FTotal) then
    FTotal.Free;
  if Assigned(FExternalTransaction) then
    FExternalTransaction.Free;
  if Assigned(FPaidTime) then
    FPaidTime.Free;
  if Assigned(FShippedTime) then
    FShippedTime.Free;
  inherited Destroy;
end;

destructor TransactionStatusType.Destroy;
begin
  if Assigned(FLastTimeModified) then
    FLastTimeModified.Free;
  inherited Destroy;
end;

destructor SellingManagerProductDetailsType.Destroy;
begin
  if Assigned(FUnitCost) then
    FUnitCost.Free;
  inherited Destroy;
end;

destructor TransactionType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FRefundArray)-1 do
    if Assigned(FRefundArray[I]) then
      FRefundArray[I].Free;
  SetLength(FRefundArray, 0);
  if Assigned(FAmountPaid) then
    FAmountPaid.Free;
  if Assigned(FAdjustmentAmount) then
    FAdjustmentAmount.Free;
  if Assigned(FConvertedAdjustmentAmount) then
    FConvertedAdjustmentAmount.Free;
  if Assigned(FBuyer) then
    FBuyer.Free;
  if Assigned(FShippingDetails) then
    FShippingDetails.Free;
  if Assigned(FConvertedAmountPaid) then
    FConvertedAmountPaid.Free;
  if Assigned(FConvertedTransactionPrice) then
    FConvertedTransactionPrice.Free;
  if Assigned(FCreatedDate) then
    FCreatedDate.Free;
  if Assigned(FItem) then
    FItem.Free;
  if Assigned(FStatus) then
    FStatus.Free;
  if Assigned(FTransactionPrice) then
    FTransactionPrice.Free;
  if Assigned(FVATPercent) then
    FVATPercent.Free;
  if Assigned(FExternalTransaction) then
    FExternalTransaction.Free;
  if Assigned(FSellingManagerProductDetails) then
    FSellingManagerProductDetails.Free;
  if Assigned(FShippingServiceSelected) then
    FShippingServiceSelected.Free;
  if Assigned(FDutchAuctionBid) then
    FDutchAuctionBid.Free;
  if Assigned(FPaidTime) then
    FPaidTime.Free;
  if Assigned(FShippedTime) then
    FShippedTime.Free;
  if Assigned(FTotalPrice) then
    FTotalPrice.Free;
  if Assigned(FFeedbackLeft) then
    FFeedbackLeft.Free;
  if Assigned(FFeedbackReceived) then
    FFeedbackReceived.Free;
  if Assigned(FContainingOrder) then
    FContainingOrder.Free;
  if Assigned(FFinalValueFee) then
    FFinalValueFee.Free;
  if Assigned(FListingCheckoutRedirectPreference) then
    FListingCheckoutRedirectPreference.Free;
  inherited Destroy;
end;

destructor RefundType.Destroy;
begin
  if Assigned(FRefundFromSeller) then
    FRefundFromSeller.Free;
  if Assigned(FTotalRefundToBuyer) then
    FTotalRefundToBuyer.Free;
  if Assigned(FRefundTime) then
    FRefundTime.Free;
  inherited Destroy;
end;

destructor BidApprovalType.Destroy;
begin
  if Assigned(FApprovedBiddingLimit) then
    FApprovedBiddingLimit.Free;
  inherited Destroy;
end;

destructor AdditionalAccountType.Destroy;
begin
  if Assigned(FBalance) then
    FBalance.Free;
  inherited Destroy;
end;

destructor AccountSummaryType.Destroy;
begin
  if Assigned(FInvoicePayment) then
    FInvoicePayment.Free;
  if Assigned(FInvoiceCredit) then
    FInvoiceCredit.Free;
  if Assigned(FInvoiceNewFee) then
    FInvoiceNewFee.Free;
  if Assigned(FAdditionalAccount) then
    FAdditionalAccount.Free;
  if Assigned(FAmountPastDue) then
    FAmountPastDue.Free;
  if Assigned(FBankModifyDate) then
    FBankModifyDate.Free;
  if Assigned(FCreditCardExpiration) then
    FCreditCardExpiration.Free;
  if Assigned(FCreditCardModifyDate) then
    FCreditCardModifyDate.Free;
  if Assigned(FCurrentBalance) then
    FCurrentBalance.Free;
  if Assigned(FInvoiceBalance) then
    FInvoiceBalance.Free;
  if Assigned(FInvoiceDate) then
    FInvoiceDate.Free;
  if Assigned(FLastAmountPaid) then
    FLastAmountPaid.Free;
  if Assigned(FLastPaymentDate) then
    FLastPaymentDate.Free;
  inherited Destroy;
end;

destructor AccountEntryType.Destroy;
begin
  if Assigned(FBalance) then
    FBalance.Free;
  if Assigned(FDate) then
    FDate.Free;
  if Assigned(FGrossDetailAmount) then
    FGrossDetailAmount.Free;
  if Assigned(FNetDetailAmount) then
    FNetDetailAmount.Free;
  if Assigned(FVATPercent) then
    FVATPercent.Free;
  inherited Destroy;
end;

destructor AdFormatLeadType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FMemberMessage)-1 do
    if Assigned(FMemberMessage[I]) then
      FMemberMessage[I].Free;
  SetLength(FMemberMessage, 0);
  if Assigned(FAddress) then
    FAddress.Free;
  if Assigned(FSubmittedTime) then
    FSubmittedTime.Free;
  if Assigned(FLeadFee) then
    FLeadFee.Free;
  inherited Destroy;
end;

destructor MemberMessageExchangeType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  if Assigned(FQuestion) then
    FQuestion.Free;
  if Assigned(FCreationDate) then
    FCreationDate.Free;
  if Assigned(FLastModifiedDate) then
    FLastModifiedDate.Free;
  inherited Destroy;
end;

destructor OfferType.Destroy;
begin
  if Assigned(FMaxBid) then
    FMaxBid.Free;
  if Assigned(FTimeBid) then
    FTimeBid.Free;
  if Assigned(FHighestBid) then
    FHighestBid.Free;
  if Assigned(FConvertedPrice) then
    FConvertedPrice.Free;
  if Assigned(FUser) then
    FUser.Free;
  inherited Destroy;
end;

destructor ApiAccessRuleType.Destroy;
begin
  if Assigned(FPeriodicStartDate) then
    FPeriodicStartDate.Free;
  if Assigned(FModTime) then
    FModTime.Free;
  inherited Destroy;
end;

destructor BestOfferType.Destroy;
begin
  if Assigned(FExpirationTime) then
    FExpirationTime.Free;
  if Assigned(FBuyer) then
    FBuyer.Free;
  if Assigned(FPrice) then
    FPrice.Free;
  inherited Destroy;
end;

destructor CheckoutOrderDetailType.Destroy;
begin
  if Assigned(FTotalCartMerchandiseCost) then
    FTotalCartMerchandiseCost.Free;
  if Assigned(FTotalCartShippingCost) then
    FTotalCartShippingCost.Free;
  if Assigned(FTotalTaxAmount) then
    FTotalTaxAmount.Free;
  if Assigned(FTotalAmount) then
    FTotalAmount.Free;
  inherited Destroy;
end;

destructor CartType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCartItemArray)-1 do
    if Assigned(FCartItemArray[I]) then
      FCartItemArray[I].Free;
  SetLength(FCartItemArray, 0);
  if Assigned(FShippingAddress) then
    FShippingAddress.Free;
  if Assigned(FCreationTime) then
    FCreationTime.Free;
  if Assigned(FExpirationTime) then
    FExpirationTime.Free;
  if Assigned(FCheckoutCompleteRedirect) then
    FCheckoutCompleteRedirect.Free;
  if Assigned(FOrderDetail) then
    FOrderDetail.Free;
  inherited Destroy;
end;

destructor CartItemType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

destructor SiteWideCharacteristicsType.Destroy;
begin
  if Assigned(FCharacteristicsSet) then
    FCharacteristicsSet.Free;
  inherited Destroy;
end;

destructor CategoryFeatureType.Destroy;
begin
  if Assigned(FListingDuration) then
    FListingDuration.Free;
  inherited Destroy;
end;

destructor SiteDefaultsType.Destroy;
begin
  if Assigned(FListingDuration) then
    FListingDuration.Free;
  inherited Destroy;
end;

destructor FeatureDefinitionsType.Destroy;
begin
  if Assigned(FShippingTermsRequired) then
    FShippingTermsRequired.Free;
  if Assigned(FBestOfferEnabled) then
    FBestOfferEnabled.Free;
  if Assigned(FDutchBINEnabled) then
    FDutchBINEnabled.Free;
  if Assigned(FUserConsentRequired) then
    FUserConsentRequired.Free;
  if Assigned(FHomePageFeaturedEnabled) then
    FHomePageFeaturedEnabled.Free;
  if Assigned(FProPackEnabled) then
    FProPackEnabled.Free;
  if Assigned(FBasicUpgradePackEnabled) then
    FBasicUpgradePackEnabled.Free;
  if Assigned(FValuePackEnabled) then
    FValuePackEnabled.Free;
  if Assigned(FProPackPlusEnabled) then
    FProPackPlusEnabled.Free;
  if Assigned(FAdFormatEnabled) then
    FAdFormatEnabled.Free;
  if Assigned(FDigitalDeliveryEnabled) then
    FDigitalDeliveryEnabled.Free;
  if Assigned(FBestOfferCounterEnabled) then
    FBestOfferCounterEnabled.Free;
  if Assigned(FBestOfferAutoDeclineEnabled) then
    FBestOfferAutoDeclineEnabled.Free;
  if Assigned(FLocalMarketSpecialitySubscription) then
    FLocalMarketSpecialitySubscription.Free;
  if Assigned(FLocalMarketRegularSubscription) then
    FLocalMarketRegularSubscription.Free;
  if Assigned(FLocalMarketPremiumSubscription) then
    FLocalMarketPremiumSubscription.Free;
  if Assigned(FLocalMarketNonSubscription) then
    FLocalMarketNonSubscription.Free;
  if Assigned(FExpressEnabled) then
    FExpressEnabled.Free;
  if Assigned(FExpressPicturesRequired) then
    FExpressPicturesRequired.Free;
  if Assigned(FExpressConditionRequired) then
    FExpressConditionRequired.Free;
  if Assigned(FMinimumReservePrice) then
    FMinimumReservePrice.Free;
  if Assigned(FTransactionConfirmationRequestEnabled) then
    FTransactionConfirmationRequestEnabled.Free;
  if Assigned(FSellerContactDetailsEnabled) then
    FSellerContactDetailsEnabled.Free;
  if Assigned(FStoreInventoryEnabled) then
    FStoreInventoryEnabled.Free;
  if Assigned(FSkypeMeTransactionalEnabled) then
    FSkypeMeTransactionalEnabled.Free;
  if Assigned(FSkypeMeNonTransactionalEnabled) then
    FSkypeMeNonTransactionalEnabled.Free;
  if Assigned(FLocalListingDistancesRegular) then
    FLocalListingDistancesRegular.Free;
  if Assigned(FLocalListingDistancesSpecialty) then
    FLocalListingDistancesSpecialty.Free;
  if Assigned(FLocalListingDistancesNonSubscription) then
    FLocalListingDistancesNonSubscription.Free;
  if Assigned(FClassifiedAdPaymentMethodEnabled) then
    FClassifiedAdPaymentMethodEnabled.Free;
  if Assigned(FClassifiedAdShippingMethodEnabled) then
    FClassifiedAdShippingMethodEnabled.Free;
  if Assigned(FClassifiedAdBestOfferEnabled) then
    FClassifiedAdBestOfferEnabled.Free;
  if Assigned(FClassifiedAdCounterOfferEnabled) then
    FClassifiedAdCounterOfferEnabled.Free;
  if Assigned(FClassifiedAdAutoDeclineEnabled) then
    FClassifiedAdAutoDeclineEnabled.Free;
  if Assigned(FClassifiedAdContactByPhoneEnabled) then
    FClassifiedAdContactByPhoneEnabled.Free;
  if Assigned(FClassifiedAdContactByEmailEnabled) then
    FClassifiedAdContactByEmailEnabled.Free;
  if Assigned(FSafePaymentRequired) then
    FSafePaymentRequired.Free;
  if Assigned(FClassifiedAdPayPerLeadEnabled) then
    FClassifiedAdPayPerLeadEnabled.Free;
  if Assigned(FItemSpecificsEnabled) then
    FItemSpecificsEnabled.Free;
  if Assigned(FPaisaPayFullEscrowEnabled) then
    FPaisaPayFullEscrowEnabled.Free;
  if Assigned(FBestOfferAutoAcceptEnabled) then
    FBestOfferAutoAcceptEnabled.Free;
  if Assigned(FClassifiedAdAutoAcceptEnabled) then
    FClassifiedAdAutoAcceptEnabled.Free;
  inherited Destroy;
end;

destructor SearchLocationType.Destroy;
begin
  if Assigned(FSiteLocation) then
    FSiteLocation.Free;
  inherited Destroy;
end;

destructor BuyingGuideType.Destroy;
begin
  if Assigned(FCreationTime) then
    FCreationTime.Free;
  inherited Destroy;
end;

destructor BuyingGuideDetailsType.Destroy;
begin
  if Assigned(FBuyingGuide) then
    FBuyingGuide.Free;
  inherited Destroy;
end;

destructor CategoryItemSpecificsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemSpecifics)-1 do
    if Assigned(FItemSpecifics[I]) then
      FItemSpecifics[I].Free;
  SetLength(FItemSpecifics, 0);
  inherited Destroy;
end;

destructor ContextSearchAssetType.Destroy;
begin
  if Assigned(FCategory) then
    FCategory.Free;
  inherited Destroy;
end;

destructor DisputeResolutionType.Destroy;
begin
  if Assigned(FResolutionTime) then
    FResolutionTime.Free;
  inherited Destroy;
end;

destructor DisputeMessageType.Destroy;
begin
  if Assigned(FMessageCreationTime) then
    FMessageCreationTime.Free;
  inherited Destroy;
end;

destructor DisputeType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  if Assigned(FDisputeCreatedTime) then
    FDisputeCreatedTime.Free;
  if Assigned(FDisputeModifiedTime) then
    FDisputeModifiedTime.Free;
  if Assigned(FDisputeResolution) then
    FDisputeResolution.Free;
  if Assigned(FDisputeMessage) then
    FDisputeMessage.Free;
  inherited Destroy;
end;

destructor ExpressProductType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemSpecifics)-1 do
    if Assigned(FItemSpecifics[I]) then
      FItemSpecifics[I].Free;
  SetLength(FItemSpecifics, 0);
  if Assigned(FMinPrice) then
    FMinPrice.Free;
  if Assigned(FMaxPrice) then
    FMaxPrice.Free;
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  inherited Destroy;
end;

destructor WishListEntryType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  if Assigned(FProduct) then
    FProduct.Free;
  if Assigned(FCreationDate) then
    FCreationDate.Free;
  inherited Destroy;
end;

destructor WishListType.Destroy;
begin
  if Assigned(FWishListEntry) then
    FWishListEntry.Free;
  inherited Destroy;
end;

destructor FeedbackDetailType.Destroy;
begin
  if Assigned(FCommentTime) then
    FCommentTime.Free;
  if Assigned(FItemPrice) then
    FItemPrice.Free;
  inherited Destroy;
end;

destructor FeedbackSummaryType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidRetractionFeedbackPeriodArray)-1 do
    if Assigned(FBidRetractionFeedbackPeriodArray[I]) then
      FBidRetractionFeedbackPeriodArray[I].Free;
  SetLength(FBidRetractionFeedbackPeriodArray, 0);
  for I := 0 to Length(FNegativeFeedbackPeriodArray)-1 do
    if Assigned(FNegativeFeedbackPeriodArray[I]) then
      FNegativeFeedbackPeriodArray[I].Free;
  SetLength(FNegativeFeedbackPeriodArray, 0);
  for I := 0 to Length(FNeutralFeedbackPeriodArray)-1 do
    if Assigned(FNeutralFeedbackPeriodArray[I]) then
      FNeutralFeedbackPeriodArray[I].Free;
  SetLength(FNeutralFeedbackPeriodArray, 0);
  for I := 0 to Length(FPositiveFeedbackPeriodArray)-1 do
    if Assigned(FPositiveFeedbackPeriodArray[I]) then
      FPositiveFeedbackPeriodArray[I].Free;
  SetLength(FPositiveFeedbackPeriodArray, 0);
  for I := 0 to Length(FTotalFeedbackPeriodArray)-1 do
    if Assigned(FTotalFeedbackPeriodArray[I]) then
      FTotalFeedbackPeriodArray[I].Free;
  SetLength(FTotalFeedbackPeriodArray, 0);
  for I := 0 to Length(FSellerAverageRatingDetailArray)-1 do
    if Assigned(FSellerAverageRatingDetailArray[I]) then
      FSellerAverageRatingDetailArray[I].Free;
  SetLength(FSellerAverageRatingDetailArray, 0);
  inherited Destroy;
end;

destructor GetRecommendationsRequestContainerType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

destructor ItemSpecificsRecommendationsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemSpecifics)-1 do
    if Assigned(FItemSpecifics[I]) then
      FItemSpecifics[I].Free;
  SetLength(FItemSpecifics, 0);
  inherited Destroy;
end;

destructor ListingAnalyzerRecommendationsType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FListingTipArray)-1 do
    if Assigned(FListingTipArray[I]) then
      FListingTipArray[I].Free;
  SetLength(FListingTipArray, 0);
  inherited Destroy;
end;

destructor ListingTipType.Destroy;
begin
  if Assigned(FMessage_) then
    FMessage_.Free;
  if Assigned(FField) then
    FField.Free;
  inherited Destroy;
end;

destructor ProductInfoType.Destroy;
begin
  if Assigned(FAverageStartPrice) then
    FAverageStartPrice.Free;
  if Assigned(FAverageSoldPrice) then
    FAverageSoldPrice.Free;
  inherited Destroy;
end;

destructor PricingRecommendationsType.Destroy;
begin
  if Assigned(FProductInfo) then
    FProductInfo.Free;
  inherited Destroy;
end;

destructor GetRecommendationsResponseContainerType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FProductRecommendations)-1 do
    if Assigned(FProductRecommendations[I]) then
      FProductRecommendations[I].Free;
  SetLength(FProductRecommendations, 0);
  if Assigned(FListingAnalyzerRecommendations) then
    FListingAnalyzerRecommendations.Free;
  if Assigned(FSIFFTASRecommendations) then
    FSIFFTASRecommendations.Free;
  if Assigned(FPricingRecommendations) then
    FPricingRecommendations.Free;
  if Assigned(FAttributeRecommendations) then
    FAttributeRecommendations.Free;
  if Assigned(FItemSpecificsRecommendations) then
    FItemSpecificsRecommendations.Free;
  inherited Destroy;
end;

destructor PaginatedTransactionArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTransactionArray)-1 do
    if Assigned(FTransactionArray[I]) then
      FTransactionArray[I].Free;
  SetLength(FTransactionArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

destructor LiveAuctionBidType.Destroy;
begin
  if Assigned(FRequestedBiddingLimit) then
    FRequestedBiddingLimit.Free;
  if Assigned(FApprovedBiddingLimit) then
    FApprovedBiddingLimit.Free;
  inherited Destroy;
end;

destructor BidderDetailType.Destroy;
begin
  if Assigned(FLiveAuctionBidResult) then
    FLiveAuctionBidResult.Free;
  inherited Destroy;
end;

destructor ScheduleType.Destroy;
begin
  if Assigned(FScheduleTime) then
    FScheduleTime.Free;
  inherited Destroy;
end;

destructor LiveAuctionCatalogType.Destroy;
begin
  if Assigned(FSchedule) then
    FSchedule.Free;
  inherited Destroy;
end;

destructor MyMessagesSummaryType.Destroy;
begin
  if Assigned(FFolderSummary) then
    FFolderSummary.Free;
  inherited Destroy;
end;

destructor MyMessagesResponseDetailsType.Destroy;
begin
  if Assigned(FUserResponseDate) then
    FUserResponseDate.Free;
  inherited Destroy;
end;

destructor MyMessagesForwardDetailsType.Destroy;
begin
  if Assigned(FUserForwardDate) then
    FUserForwardDate.Free;
  inherited Destroy;
end;

destructor MyMessagesAlertType.Destroy;
begin
  if Assigned(FCreationDate) then
    FCreationDate.Free;
  if Assigned(FReceiveDate) then
    FReceiveDate.Free;
  if Assigned(FExpirationDate) then
    FExpirationDate.Free;
  if Assigned(FResolutionDate) then
    FResolutionDate.Free;
  if Assigned(FLastReadDate) then
    FLastReadDate.Free;
  if Assigned(FResponseDetails) then
    FResponseDetails.Free;
  if Assigned(FForwardDetails) then
    FForwardDetails.Free;
  if Assigned(FFolder) then
    FFolder.Free;
  inherited Destroy;
end;

destructor MyMessagesMessageType.Destroy;
begin
  if Assigned(FCreationDate) then
    FCreationDate.Free;
  if Assigned(FReceiveDate) then
    FReceiveDate.Free;
  if Assigned(FExpirationDate) then
    FExpirationDate.Free;
  if Assigned(FResponseDetails) then
    FResponseDetails.Free;
  if Assigned(FForwardDetails) then
    FForwardDetails.Free;
  if Assigned(FFolder) then
    FFolder.Free;
  inherited Destroy;
end;

destructor ItemListCustomizationType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

destructor BuyingSummaryType.Destroy;
begin
  if Assigned(FTotalWinningCost) then
    FTotalWinningCost.Free;
  if Assigned(FTotalWonCost) then
    FTotalWonCost.Free;
  inherited Destroy;
end;

destructor PaginatedItemArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemArray)-1 do
    if Assigned(FItemArray[I]) then
      FItemArray[I].Free;
  SetLength(FItemArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

destructor PaginatedOrderTransactionArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FOrderTransactionArray)-1 do
    if Assigned(FOrderTransactionArray[I]) then
      FOrderTransactionArray[I].Free;
  SetLength(FOrderTransactionArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

destructor OrderTransactionType.Destroy;
begin
  if Assigned(FOrder) then
    FOrder.Free;
  if Assigned(FTransaction) then
    FTransaction.Free;
  inherited Destroy;
end;

destructor MyeBayFavoriteSearchListType.Destroy;
begin
  if Assigned(FFavoriteSearch) then
    FFavoriteSearch.Free;
  inherited Destroy;
end;

destructor MyeBayFavoriteSellerListType.Destroy;
begin
  if Assigned(FFavoriteSeller) then
    FFavoriteSeller.Free;
  inherited Destroy;
end;

destructor BidGroupItemType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  if Assigned(FMaxBidAmount) then
    FMaxBidAmount.Free;
  inherited Destroy;
end;

destructor BidGroupType.Destroy;
begin
  if Assigned(FBidGroupItem) then
    FBidGroupItem.Free;
  inherited Destroy;
end;

destructor SellingSummaryType.Destroy;
begin
  if Assigned(FTotalAuctionSellingValue) then
    FTotalAuctionSellingValue.Free;
  if Assigned(FTotalSoldValue) then
    FTotalSoldValue.Free;
  inherited Destroy;
end;

destructor MyeBaySellingSummaryType.Destroy;
begin
  if Assigned(FTotalAuctionSellingValue) then
    FTotalAuctionSellingValue.Free;
  if Assigned(FTotalSoldValue) then
    FTotalSoldValue.Free;
  inherited Destroy;
end;

destructor NotificationUserDataType.Destroy;
begin
  if Assigned(FSMSSubscription) then
    FSMSSubscription.Free;
  if Assigned(FSummarySchedule) then
    FSummarySchedule.Free;
  inherited Destroy;
end;

destructor NotificationDetailsType.Destroy;
begin
  if Assigned(FExpirationTime) then
    FExpirationTime.Free;
  if Assigned(FNextRetryTime) then
    FNextRetryTime.Free;
  if Assigned(FDeliveryTime) then
    FDeliveryTime.Free;
  inherited Destroy;
end;

destructor MarkUpMarkDownEventType.Destroy;
begin
  if Assigned(FTime) then
    FTime.Free;
  inherited Destroy;
end;

destructor PictureManagerPictureType.Destroy;
begin
  if Assigned(FDate) then
    FDate.Free;
  if Assigned(FDisplayFormat) then
    FDisplayFormat.Free;
  inherited Destroy;
end;

destructor PictureManagerFolderType.Destroy;
begin
  if Assigned(FPicture) then
    FPicture.Free;
  inherited Destroy;
end;

destructor PictureManagerDetailsType.Destroy;
begin
  if Assigned(FFolder) then
    FFolder.Free;
  inherited Destroy;
end;

destructor PictureManagerSubscriptionType.Destroy;
begin
  if Assigned(FFee) then
    FFee.Free;
  inherited Destroy;
end;

destructor SearchAttributesType.Destroy;
begin
  if Assigned(FValueList) then
    FValueList.Free;
  inherited Destroy;
end;

destructor ProductSearchType.Destroy;
begin
  if Assigned(FSearchAttributes) then
    FSearchAttributes.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  inherited Destroy;
end;

destructor ProductType.Destroy;
begin
  if Assigned(FCharacteristicsSet) then
    FCharacteristicsSet.Free;
  if Assigned(FMinPrice) then
    FMinPrice.Free;
  if Assigned(FMaxPrice) then
    FMaxPrice.Free;
  inherited Destroy;
end;

destructor ProductFamilyType.Destroy;
begin
  if Assigned(FParentProduct) then
    FParentProduct.Free;
  if Assigned(FFamilyMembers) then
    FFamilyMembers.Free;
  inherited Destroy;
end;

destructor ResponseAttributeSetType.Destroy;
begin
  if Assigned(FProductFamilies) then
    FProductFamilies.Free;
  if Assigned(FProductFinderConstraints) then
    FProductFinderConstraints.Free;
  inherited Destroy;
end;

destructor ProductSearchResultType.Destroy;
begin
  if Assigned(FAttributeSet) then
    FAttributeSet.Free;
  inherited Destroy;
end;

destructor ProductSearchPageType.Destroy;
begin
  if Assigned(FSearchCharacteristicsSet) then
    FSearchCharacteristicsSet.Free;
  if Assigned(FSortCharacteristics) then
    FSortCharacteristics.Free;
  if Assigned(FDataElementSet) then
    FDataElementSet.Free;
  inherited Destroy;
end;

destructor ReviewType.Destroy;
begin
  if Assigned(FCreationTime) then
    FCreationTime.Free;
  inherited Destroy;
end;

destructor ReviewDetailsType.Destroy;
begin
  if Assigned(FReview) then
    FReview.Free;
  inherited Destroy;
end;

destructor CatalogProductType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemSpecifics)-1 do
    if Assigned(FItemSpecifics[I]) then
      FItemSpecifics[I].Free;
  SetLength(FItemSpecifics, 0);
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  if Assigned(FReviewDetails) then
    FReviewDetails.Free;
  inherited Destroy;
end;

destructor PromotionalSaleType.Destroy;
begin
  if Assigned(FPromotionalSaleStartTime) then
    FPromotionalSaleStartTime.Free;
  if Assigned(FPromotionalSaleEndTime) then
    FPromotionalSaleEndTime.Free;
  inherited Destroy;
end;

destructor PriceRangeFilterType.Destroy;
begin
  if Assigned(FMaxPrice) then
    FMaxPrice.Free;
  if Assigned(FMinPrice) then
    FMinPrice.Free;
  inherited Destroy;
end;

destructor SearchLocationFilterType.Destroy;
begin
  if Assigned(FSearchLocation) then
    FSearchLocation.Free;
  inherited Destroy;
end;

destructor SearchRequestType.Destroy;
begin
  if Assigned(FSearchAttributes) then
    FSearchAttributes.Free;
  inherited Destroy;
end;

destructor TicketDetailsType.Destroy;
begin
  if Assigned(FEventDate) then
    FEventDate.Free;
  inherited Destroy;
end;

destructor SearchResultItemType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemSpecific)-1 do
    if Assigned(FItemSpecific[I]) then
      FItemSpecific[I].Free;
  SetLength(FItemSpecific, 0);
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

destructor ExpansionArrayType.Destroy;
begin
  if Assigned(FExpansionItem) then
    FExpansionItem.Free;
  inherited Destroy;
end;

destructor ExpressHistogramProductType.Destroy;
begin
  if Assigned(FDomainDetails) then
    FDomainDetails.Free;
  inherited Destroy;
end;

destructor ExpressHistogramAisleType.Destroy;
begin
  if Assigned(FDomainDetails) then
    FDomainDetails.Free;
  if Assigned(FProductType) then
    FProductType.Free;
  inherited Destroy;
end;

destructor ExpressHistogramDepartmentType.Destroy;
begin
  if Assigned(FDomainDetails) then
    FDomainDetails.Free;
  if Assigned(FAisle) then
    FAisle.Free;
  inherited Destroy;
end;

destructor SellerPaymentType.Destroy;
begin
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  if Assigned(FTransactionPrice) then
    FTransactionPrice.Free;
  if Assigned(FShippingReimbursement) then
    FShippingReimbursement.Free;
  if Assigned(FCommission) then
    FCommission.Free;
  if Assigned(FAmountPaid) then
    FAmountPaid.Free;
  if Assigned(FPaidTime) then
    FPaidTime.Free;
  inherited Destroy;
end;

destructor CalculatedHandlingDiscountType.Destroy;
begin
  if Assigned(FOrderHandlingAmount) then
    FOrderHandlingAmount.Free;
  if Assigned(FEachAdditionalAmount) then
    FEachAdditionalAmount.Free;
  if Assigned(FEachAdditionalOffAmount) then
    FEachAdditionalOffAmount.Free;
  inherited Destroy;
end;

destructor FlatRateInsuranceRangeCostType.Destroy;
begin
  if Assigned(FInsuranceCost) then
    FInsuranceCost.Free;
  inherited Destroy;
end;

destructor ShippingInsuranceType.Destroy;
begin
  if Assigned(FFlatRateInsuranceRangeCost) then
    FFlatRateInsuranceRangeCost.Free;
  inherited Destroy;
end;

destructor StoreColorSchemeType.Destroy;
begin
  if Assigned(FColor) then
    FColor.Free;
  if Assigned(FFont) then
    FFont.Free;
  inherited Destroy;
end;

destructor StoreThemeType.Destroy;
begin
  if Assigned(FColorScheme) then
    FColorScheme.Free;
  inherited Destroy;
end;

destructor StoreCustomCategoryType.Destroy;
begin
  if Assigned(FChildCategory) then
    FChildCategory.Free;
  inherited Destroy;
end;

destructor StoreCustomListingHeaderType.Destroy;
begin
  if Assigned(FLinkToInclude) then
    FLinkToInclude.Free;
  inherited Destroy;
end;

destructor StoreType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCustomCategories)-1 do
    if Assigned(FCustomCategories[I]) then
      FCustomCategories[I].Free;
  SetLength(FCustomCategories, 0);
  if Assigned(FLogo) then
    FLogo.Free;
  if Assigned(FTheme) then
    FTheme.Free;
  if Assigned(FCustomListingHeader) then
    FCustomListingHeader.Free;
  if Assigned(FLastOpenedTime) then
    FLastOpenedTime.Free;
  inherited Destroy;
end;

destructor StoreThemeArrayType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FGenericColorSchemeArray)-1 do
    if Assigned(FGenericColorSchemeArray[I]) then
      FGenericColorSchemeArray[I].Free;
  SetLength(FGenericColorSchemeArray, 0);
  if Assigned(FTheme) then
    FTheme.Free;
  inherited Destroy;
end;

destructor StoreSubscriptionType.Destroy;
begin
  if Assigned(FFee) then
    FFee.Free;
  inherited Destroy;
end;

destructor StoreVacationPreferencesType.Destroy;
begin
  if Assigned(FReturnDate) then
    FReturnDate.Free;
  inherited Destroy;
end;

destructor StorePreferencesType.Destroy;
begin
  if Assigned(FVacationPreferences) then
    FVacationPreferences.Free;
  inherited Destroy;
end;

destructor SuggestedCategoryType.Destroy;
begin
  if Assigned(FCategory) then
    FCategory.Free;
  inherited Destroy;
end;

destructor SellerPaymentPreferencesType.Destroy;
begin
  if Assigned(FSellerPaymentAddress) then
    FSellerPaymentAddress.Free;
  inherited Destroy;
end;

destructor SellerFavoriteItemPreferencesType.Destroy;
begin
  if Assigned(FMinPrice) then
    FMinPrice.Free;
  if Assigned(FMaxPrice) then
    FMaxPrice.Free;
  inherited Destroy;
end;

destructor CalculatedShippingPreferencesType.Destroy;
begin
  if Assigned(FCalculatedShippingAmountForEntireOrder) then
    FCalculatedShippingAmountForEntireOrder.Free;
  inherited Destroy;
end;

destructor FlatShippingPreferencesType.Destroy;
begin
  if Assigned(FAmountPerAdditionalItem) then
    FAmountPerAdditionalItem.Free;
  if Assigned(FDeductionAmountPerAdditionalItem) then
    FDeductionAmountPerAdditionalItem.Free;
  if Assigned(FFlatRateInsuranceRangeCost) then
    FFlatRateInsuranceRangeCost.Free;
  inherited Destroy;
end;

destructor CombinedPaymentPreferencesType.Destroy;
begin
  if Assigned(FCalculatedShippingPreferences) then
    FCalculatedShippingPreferences.Free;
  if Assigned(FFlatShippingPreferences) then
    FFlatShippingPreferences.Free;
  inherited Destroy;
end;

destructor VeROSiteDetailType.Destroy;
begin
  if Assigned(FReasonCodeDetail) then
    FReasonCodeDetail.Free;
  inherited Destroy;
end;

destructor WantItNowPostType.Destroy;
begin
  if Assigned(FStartTime) then
    FStartTime.Free;
  inherited Destroy;
end;

destructor SiteHostedPictureDetailsType.Destroy;
begin
  if Assigned(FPictureSetMember) then
    FPictureSetMember.Free;
  inherited Destroy;
end;

destructor AbstractRequestType.Destroy;
begin
  if Assigned(FBotBlock) then
    FBotBlock.Free;
  inherited Destroy;
end;

constructor VeROReportItemsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VeROReportItemsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FReportItems)-1 do
    if Assigned(FReportItems[I]) then
      FReportItems[I].Free;
  SetLength(FReportItems, 0);
  inherited Destroy;
end;

constructor UploadSiteHostedPicturesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor UploadSiteHostedPicturesRequestType.Destroy;
begin
  if Assigned(FPictureData) then
    FPictureData.Free;
  inherited Destroy;
end;

constructor LeaveFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor LeaveFeedbackRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FSellerItemRatingDetailArray)-1 do
    if Assigned(FSellerItemRatingDetailArray[I]) then
      FSellerItemRatingDetailArray[I].Free;
  SetLength(FSellerItemRatingDetailArray, 0);
  inherited Destroy;
end;

constructor SetUserPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetUserPreferencesRequestType.Destroy;
begin
  if Assigned(FBidderNoticePreferences) then
    FBidderNoticePreferences.Free;
  if Assigned(FCombinedPaymentPreferences) then
    FCombinedPaymentPreferences.Free;
  if Assigned(FCrossPromotionPreferences) then
    FCrossPromotionPreferences.Free;
  if Assigned(FSellerPaymentPreferences) then
    FSellerPaymentPreferences.Free;
  if Assigned(FSellerFavoriteItemPreferences) then
    FSellerFavoriteItemPreferences.Free;
  if Assigned(FEndOfAuctionEmailPreferences) then
    FEndOfAuctionEmailPreferences.Free;
  if Assigned(FExpressPreferences) then
    FExpressPreferences.Free;
  inherited Destroy;
end;

constructor SetStorePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStorePreferencesRequestType.Destroy;
begin
  if Assigned(FStorePreferences) then
    FStorePreferences.Free;
  inherited Destroy;
end;

constructor SetStoreCustomPageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCustomPageRequestType.Destroy;
begin
  if Assigned(FCustomPage) then
    FCustomPage.Free;
  inherited Destroy;
end;

constructor SetStoreCategoriesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCategoriesRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FStoreCategories)-1 do
    if Assigned(FStoreCategories[I]) then
      FStoreCategories[I].Free;
  SetLength(FStoreCategories, 0);
  inherited Destroy;
end;

constructor SetStoreRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreRequestType.Destroy;
begin
  if Assigned(FStore) then
    FStore.Free;
  inherited Destroy;
end;

constructor SetShippingDiscountProfilesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetShippingDiscountProfilesRequestType.Destroy;
begin
  if Assigned(FFlatShippingDiscount) then
    FFlatShippingDiscount.Free;
  if Assigned(FCalculatedShippingDiscount) then
    FCalculatedShippingDiscount.Free;
  if Assigned(FCalculatedHandlingDiscount) then
    FCalculatedHandlingDiscount.Free;
  if Assigned(FPromotionalShippingDiscountDetails) then
    FPromotionalShippingDiscountDetails.Free;
  if Assigned(FShippingInsurance) then
    FShippingInsurance.Free;
  if Assigned(FInternationalShippingInsurance) then
    FInternationalShippingInsurance.Free;
  inherited Destroy;
end;

constructor GetSellerListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerListRequestType.Destroy;
begin
  if Assigned(FEndTimeFrom) then
    FEndTimeFrom.Free;
  if Assigned(FEndTimeTo) then
    FEndTimeTo.Free;
  if Assigned(FStartTimeFrom) then
    FStartTimeFrom.Free;
  if Assigned(FStartTimeTo) then
    FStartTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetSellerTransactionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerTransactionsRequestType.Destroy;
begin
  if Assigned(FModTimeFrom) then
    FModTimeFrom.Free;
  if Assigned(FModTimeTo) then
    FModTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetSearchResultsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSearchResultsRequestType.Destroy;
begin
  if Assigned(FPriceRangeFilter) then
    FPriceRangeFilter.Free;
  if Assigned(FProximitySearch) then
    FProximitySearch.Free;
  if Assigned(FUserIdFilter) then
    FUserIdFilter.Free;
  if Assigned(FSearchLocationFilter) then
    FSearchLocationFilter.Free;
  if Assigned(FStoreSearchFilter) then
    FStoreSearchFilter.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  if Assigned(FSearchRequest) then
    FSearchRequest.Free;
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  if Assigned(FCategories) then
    FCategories.Free;
  if Assigned(FEndTimeFrom) then
    FEndTimeFrom.Free;
  if Assigned(FEndTimeTo) then
    FEndTimeTo.Free;
  if Assigned(FModTimeFrom) then
    FModTimeFrom.Free;
  if Assigned(FAffiliateTrackingDetails) then
    FAffiliateTrackingDetails.Free;
  if Assigned(FBidRange) then
    FBidRange.Free;
  if Assigned(FTicketFinder) then
    FTicketFinder.Free;
  if Assigned(FGroup) then
    FGroup.Free;
  inherited Destroy;
end;

constructor SetReturnURLRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetReturnURLRequestType.Destroy;
begin
  if Assigned(FAuthenticationEntry) then
    FAuthenticationEntry.Free;
  inherited Destroy;
end;

constructor SetPromotionalSaleListingsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetPromotionalSaleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetPromotionalSaleRequestType.Destroy;
begin
  if Assigned(FPromotionalSaleDetails) then
    FPromotionalSaleDetails.Free;
  inherited Destroy;
end;

constructor GetProductSellingPagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetProductSellingPagesRequestType.Destroy;
begin
  if Assigned(FProduct) then
    FProduct.Free;
  inherited Destroy;
end;

constructor GetProductsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetProductsRequestType.Destroy;
begin
  if Assigned(FProductSearch) then
    FProductSearch.Free;
  if Assigned(FAffiliateTrackingDetails) then
    FAffiliateTrackingDetails.Free;
  inherited Destroy;
end;

constructor SetPictureManagerDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetPictureManagerDetailsRequestType.Destroy;
begin
  if Assigned(FPictureManagerDetails) then
    FPictureManagerDetails.Free;
  inherited Destroy;
end;

constructor GetOrderTransactionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrderTransactionsRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemTransactionIDArray)-1 do
    if Assigned(FItemTransactionIDArray[I]) then
      FItemTransactionIDArray[I].Free;
  SetLength(FItemTransactionIDArray, 0);
  inherited Destroy;
end;

constructor GetOrdersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrdersRequestType.Destroy;
begin
  if Assigned(FCreateTimeFrom) then
    FCreateTimeFrom.Free;
  if Assigned(FCreateTimeTo) then
    FCreateTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor SetNotificationPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetNotificationPreferencesRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FUserDeliveryPreferenceArray)-1 do
    if Assigned(FUserDeliveryPreferenceArray[I]) then
      FUserDeliveryPreferenceArray[I].Free;
  SetLength(FUserDeliveryPreferenceArray, 0);
  if Assigned(FApplicationDeliveryPreferences) then
    FApplicationDeliveryPreferences.Free;
  if Assigned(FUserData) then
    FUserData.Free;
  if Assigned(FEventProperty) then
    FEventProperty.Free;
  inherited Destroy;
end;

constructor GetMyeBayRemindersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayRemindersRequestType.Destroy;
begin
  if Assigned(FBuyingReminders) then
    FBuyingReminders.Free;
  if Assigned(FSellingReminders) then
    FSellingReminders.Free;
  inherited Destroy;
end;

constructor GetMyeBayBuyingRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayBuyingRequestType.Destroy;
begin
  if Assigned(FWatchList) then
    FWatchList.Free;
  if Assigned(FBidList) then
    FBidList.Free;
  if Assigned(FBestOfferList) then
    FBestOfferList.Free;
  if Assigned(FWonList) then
    FWonList.Free;
  if Assigned(FLostList) then
    FLostList.Free;
  if Assigned(FFavoriteSearches) then
    FFavoriteSearches.Free;
  if Assigned(FFavoriteSellers) then
    FFavoriteSellers.Free;
  if Assigned(FSecondChanceOffer) then
    FSecondChanceOffer.Free;
  if Assigned(FBidAssistantList) then
    FBidAssistantList.Free;
  inherited Destroy;
end;

constructor GetMyeBaySellingRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBaySellingRequestType.Destroy;
begin
  if Assigned(FScheduledList) then
    FScheduledList.Free;
  if Assigned(FActiveList) then
    FActiveList.Free;
  if Assigned(FSoldList) then
    FSoldList.Free;
  if Assigned(FUnsoldList) then
    FUnsoldList.Free;
  inherited Destroy;
end;

constructor SetMessagePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetMessagePreferencesRequestType.Destroy;
begin
  if Assigned(FASQPreferences) then
    FASQPreferences.Free;
  inherited Destroy;
end;

constructor GetCategoryListingsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoryListingsRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  if Assigned(FSearchLocation) then
    FSearchLocation.Free;
  if Assigned(FProximitySearch) then
    FProximitySearch.Free;
  if Assigned(FGroup) then
    FGroup.Free;
  inherited Destroy;
end;

constructor SetCartRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetCartRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCartItemArray)-1 do
    if Assigned(FCartItemArray[I]) then
      FCartItemArray[I].Free;
  SetLength(FCartItemArray, 0);
  if Assigned(FAffiliateTrackingDetails) then
    FAffiliateTrackingDetails.Free;
  if Assigned(FShippingAddress) then
    FShippingAddress.Free;
  if Assigned(FCheckoutCompleteRedirect) then
    FCheckoutCompleteRedirect.Free;
  inherited Destroy;
end;

constructor GetCartRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCartRequestType.Destroy;
begin
  if Assigned(FAffiliateTrackingDetails) then
    FAffiliateTrackingDetails.Free;
  if Assigned(FShippingAddress) then
    FShippingAddress.Free;
  inherited Destroy;
end;

constructor GetSearchResultsExpressRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSearchResultsExpressRequestType.Destroy;
begin
  if Assigned(FHighestPrice) then
    FHighestPrice.Free;
  if Assigned(FLowestPrice) then
    FLowestPrice.Free;
  if Assigned(FAffiliateTrackingDetails) then
    FAffiliateTrackingDetails.Free;
  inherited Destroy;
end;

constructor PlaceOfferRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor PlaceOfferRequestType.Destroy;
begin
  if Assigned(FOffer) then
    FOffer.Free;
  if Assigned(FAffiliateTrackingDetails) then
    FAffiliateTrackingDetails.Free;
  inherited Destroy;
end;

constructor GetAccountRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAccountRequestType.Destroy;
begin
  if Assigned(FInvoiceDate) then
    FInvoiceDate.Free;
  if Assigned(FBeginDate) then
    FBeginDate.Free;
  if Assigned(FEndDate) then
    FEndDate.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetExpressWishListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetExpressWishListRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetFeedbackRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetItemTransactionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemTransactionsRequestType.Destroy;
begin
  if Assigned(FModTimeFrom) then
    FModTimeFrom.Free;
  if Assigned(FModTimeTo) then
    FModTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetItemsAwaitingFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemsAwaitingFeedbackRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetLiveAuctionBiddersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetLiveAuctionBiddersRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetMemberMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMemberMessagesRequestType.Destroy;
begin
  if Assigned(FStartCreationTime) then
    FStartCreationTime.Free;
  if Assigned(FEndCreationTime) then
    FEndCreationTime.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetPopularKeywordsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPopularKeywordsRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetSellerPaymentsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerPaymentsRequestType.Destroy;
begin
  if Assigned(FPaymentTimeFrom) then
    FPaymentTimeFrom.Free;
  if Assigned(FPaymentTimeTo) then
    FPaymentTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetUserDisputesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserDisputesRequestType.Destroy;
begin
  if Assigned(FModTimeFrom) then
    FModTimeFrom.Free;
  if Assigned(FModTimeTo) then
    FModTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetVeROReportStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetVeROReportStatusRequestType.Destroy;
begin
  if Assigned(FTimeFrom) then
    FTimeFrom.Free;
  if Assigned(FTimeTo) then
    FTimeTo.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetWantItNowSearchResultsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetWantItNowSearchResultsRequestType.Destroy;
begin
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor DeleteMyMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetMyMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyMessagesRequestType.Destroy;
begin
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor ReviseMyMessagesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ApproveLiveAuctionBiddersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ApproveLiveAuctionBiddersRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidApproval)-1 do
    if Assigned(FBidApproval[I]) then
      FBidApproval[I].Free;
  SetLength(FBidApproval, 0);
  if Assigned(FAllApprovedBiddingLimit) then
    FAllApprovedBiddingLimit.Free;
  inherited Destroy;
end;

constructor CompleteSaleRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor CompleteSaleRequestType.Destroy;
begin
  if Assigned(FFeedbackInfo) then
    FFeedbackInfo.Free;
  inherited Destroy;
end;

constructor ReviseCheckoutStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseCheckoutStatusRequestType.Destroy;
begin
  if Assigned(FAmountPaid) then
    FAmountPaid.Free;
  if Assigned(FAdjustmentAmount) then
    FAdjustmentAmount.Free;
  if Assigned(FShippingAddress) then
    FShippingAddress.Free;
  if Assigned(FShippingInsuranceCost) then
    FShippingInsuranceCost.Free;
  if Assigned(FSalesTax) then
    FSalesTax.Free;
  if Assigned(FShippingCost) then
    FShippingCost.Free;
  if Assigned(FExternalTransaction) then
    FExternalTransaction.Free;
  inherited Destroy;
end;

constructor AddOrderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddOrderRequestType.Destroy;
begin
  if Assigned(FOrder) then
    FOrder.Free;
  inherited Destroy;
end;

constructor AddMemberMessageAAQToPartnerRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddMemberMessageAAQToPartnerRequestType.Destroy;
begin
  if Assigned(FMemberMessage) then
    FMemberMessage.Free;
  inherited Destroy;
end;

constructor AddMemberMessageRTQRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddMemberMessageRTQRequestType.Destroy;
begin
  if Assigned(FMemberMessage) then
    FMemberMessage.Free;
  inherited Destroy;
end;

constructor SetTaxTableRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetTaxTableRequestType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTaxTable)-1 do
    if Assigned(FTaxTable[I]) then
      FTaxTable[I].Free;
  SetLength(FTaxTable, 0);
  inherited Destroy;
end;

constructor SendInvoiceRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SendInvoiceRequestType.Destroy;
begin
  if Assigned(FInternationalShippingServiceOptions) then
    FInternationalShippingServiceOptions.Free;
  if Assigned(FShippingServiceOptions) then
    FShippingServiceOptions.Free;
  if Assigned(FSalesTax) then
    FSalesTax.Free;
  if Assigned(FInsuranceFee) then
    FInsuranceFee.Free;
  inherited Destroy;
end;

constructor GetContextualKeywordsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor VerifyAddItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddItemRequestType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  if Assigned(FExternalProductID) then
    FExternalProductID.Free;
  inherited Destroy;
end;

constructor GetPromotionRulesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetPromotionalSaleDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStoreRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStoreCategoryUpdateStatusRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStoreCustomPageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetVeROReasonCodeDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseMyMessagesFoldersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddSecondChanceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSecondChanceItemRequestType.Destroy;
begin
  if Assigned(FBuyItNowPrice) then
    FBuyItNowPrice.Free;
  inherited Destroy;
end;

constructor AddTransactionConfirmationItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddTransactionConfirmationItemRequestType.Destroy;
begin
  if Assigned(FNegotiatedPrice) then
    FNegotiatedPrice.Free;
  inherited Destroy;
end;

constructor IssueRefundRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor IssueRefundRequestType.Destroy;
begin
  if Assigned(FRefundAmount) then
    FRefundAmount.Free;
  inherited Destroy;
end;

constructor RespondToBestOfferRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RespondToBestOfferRequestType.Destroy;
begin
  if Assigned(FCounterOfferPrice) then
    FCounterOfferPrice.Free;
  inherited Destroy;
end;

constructor VerifyAddSecondChanceItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddSecondChanceItemRequestType.Destroy;
begin
  if Assigned(FBuyItNowPrice) then
    FBuyItNowPrice.Free;
  inherited Destroy;
end;

constructor FetchTokenRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetAdFormatLeadsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetAllBiddersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetAttributesCSRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetBidderListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBidderListRequestType.Destroy;
begin
  if Assigned(FEndTimeFrom) then
    FEndTimeFrom.Free;
  if Assigned(FEndTimeTo) then
    FEndTimeTo.Free;
  inherited Destroy;
end;

constructor GetCategoriesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetCategoryFeaturesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetCharitiesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetDescriptionTemplatesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetDescriptionTemplatesRequestType.Destroy;
begin
  if Assigned(FLastModifiedTime) then
    FLastModifiedTime.Free;
  inherited Destroy;
end;

constructor GetItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetMessagePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetSellerEventsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerEventsRequestType.Destroy;
begin
  if Assigned(FStartTimeFrom) then
    FStartTimeFrom.Free;
  if Assigned(FStartTimeTo) then
    FStartTimeTo.Free;
  if Assigned(FEndTimeFrom) then
    FEndTimeFrom.Free;
  if Assigned(FEndTimeTo) then
    FEndTimeTo.Free;
  if Assigned(FModTimeFrom) then
    FModTimeFrom.Free;
  if Assigned(FModTimeTo) then
    FModTimeTo.Free;
  inherited Destroy;
end;

constructor GetUserRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetUserPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RemoveFromWatchListRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ValidateChallengeInputRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ValidateTestUserRegistrationRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ValidateTestUserRegistrationRequestType.Destroy;
begin
  if Assigned(FRegistrationDate) then
    FRegistrationDate.Free;
  inherited Destroy;
end;

constructor AddItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemRequestType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor AddLiveAuctionItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddLiveAuctionItemRequestType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor RelistItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RelistItemRequestType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor ReviseItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseItemRequestType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor ReviseLiveAuctionItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseLiveAuctionItemRequestType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor AddDisputeResponseRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddDisputeResponseRequestType.Destroy;
begin
  if Assigned(FShippingTime) then
    FShippingTime.Free;
  inherited Destroy;
end;

constructor GetCategorySpecificsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategorySpecificsRequestType.Destroy;
begin
  if Assigned(FLastUpdateTime) then
    FLastUpdateTime.Free;
  inherited Destroy;
end;

constructor GetNotificationsUsageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetNotificationsUsageRequestType.Destroy;
begin
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor AddDisputeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddToItemDescriptionRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor EndItemRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetApiAccessRulesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetAttributesXSLRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetBestOffersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetCategory2CSRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetCategoryMappingsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetChallengeTokenRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetCrossPromotionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetDisputeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetHighBiddersRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetItemShippingRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetLiveAuctionCatalogDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetNotificationPreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetPictureManagerDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetPictureManagerOptionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetProductFinderRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetProductFinderXSLRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetProductSearchPageRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetReturnURLRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetRuNameRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetShippingDiscountProfilesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStoreOptionsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStorePreferencesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetSuggestedCategoriesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetTaxTableRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetUserContactDetailsRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetWantItNowPostRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GeteBayOfficialTimeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RespondToFeedbackRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RespondToWantItNowPostRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SellerReverseDisputeRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetUserNotesRequestType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ErrorType.Destroy;
begin
  if Assigned(FErrorParameters) then
    FErrorParameters.Free;
  inherited Destroy;
end;

destructor AbstractResponseType.Destroy;
begin
  if Assigned(FTimestamp) then
    FTimestamp.Free;
  if Assigned(FErrors) then
    FErrors.Free;
  if Assigned(FDuplicateInvocationDetails) then
    FDuplicateInvocationDetails.Free;
  if Assigned(FBotBlock) then
    FBotBlock.Free;
  inherited Destroy;
end;

constructor ValidateTestUserRegistrationResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetUserPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetUserNotesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetTaxTableResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetStorePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetStoreResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetShippingDiscountProfilesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetReturnURLResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetPromotionalSaleListingsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetPictureManagerDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetNotificationPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetMessagePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SendInvoiceResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SellerReverseDisputeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseMyMessagesFoldersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseMyMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor ReviseCheckoutStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RespondToWantItNowPostResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RespondToFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor RemoveFromWatchListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor LeaveFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GeteBayOfficialTimeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetStoreCategoryUpdateStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetRuNameResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetProductSellingPagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetProductFinderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetChallengeTokenResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetAttributesCSResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor DeleteMyMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor CompleteSaleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddToWatchListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddToItemDescriptionResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddMemberMessageRTQResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddMemberMessageAAQToPartnerResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddDisputeResponseResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor AddDisputeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor VerifyAddSecondChanceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddSecondChanceItemResponseType.Destroy;
begin
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor FetchTokenResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor FetchTokenResponseType.Destroy;
begin
  if Assigned(FHardExpirationTime) then
    FHardExpirationTime.Free;
  inherited Destroy;
end;

constructor EndItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor EndItemResponseType.Destroy;
begin
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor AddTransactionConfirmationItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddTransactionConfirmationItemResponseType.Destroy;
begin
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor AddSecondChanceItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddSecondChanceItemResponseType.Destroy;
begin
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor AddOrderResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddOrderResponseType.Destroy;
begin
  if Assigned(FCreatedTime) then
    FCreatedTime.Free;
  inherited Destroy;
end;

constructor GetItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemResponseType.Destroy;
begin
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor ValidateChallengeInputResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor IssueRefundResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor IssueRefundResponseType.Destroy;
begin
  if Assigned(FRefundFromSeller) then
    FRefundFromSeller.Free;
  if Assigned(FTotalRefundToBuyer) then
    FTotalRefundToBuyer.Free;
  inherited Destroy;
end;

constructor GetCrossPromotionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCrossPromotionsResponseType.Destroy;
begin
  if Assigned(FCrossPromotion) then
    FCrossPromotion.Free;
  inherited Destroy;
end;

constructor GetUserResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserResponseType.Destroy;
begin
  if Assigned(FUser) then
    FUser.Free;
  inherited Destroy;
end;

constructor GetItemShippingResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemShippingResponseType.Destroy;
begin
  if Assigned(FShippingDetails) then
    FShippingDetails.Free;
  inherited Destroy;
end;

constructor VeROReportItemsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetStoreCategoriesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor SetPromotionalSaleResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

constructor GetUserContactDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserContactDetailsResponseType.Destroy;
begin
  if Assigned(FContactAddress) then
    FContactAddress.Free;
  if Assigned(FRegistrationDate) then
    FRegistrationDate.Free;
  inherited Destroy;
end;

constructor GetTaxTableResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetTaxTableResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTaxTable)-1 do
    if Assigned(FTaxTable[I]) then
      FTaxTable[I].Free;
  SetLength(FTaxTable, 0);
  if Assigned(FLastUpdateTime) then
    FLastUpdateTime.Free;
  inherited Destroy;
end;

constructor VerifyAddItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor VerifyAddItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFees)-1 do
    if Assigned(FFees[I]) then
      FFees[I].Free;
  SetLength(FFees, 0);
  if Assigned(FExpressItemRequirements) then
    FExpressItemRequirements.Free;
  inherited Destroy;
end;

constructor ReviseLiveAuctionItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseLiveAuctionItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFees)-1 do
    if Assigned(FFees[I]) then
      FFees[I].Free;
  SetLength(FFees, 0);
  inherited Destroy;
end;

constructor ReviseItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ReviseItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFees)-1 do
    if Assigned(FFees[I]) then
      FFees[I].Free;
  SetLength(FFees, 0);
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor RelistItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RelistItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFees)-1 do
    if Assigned(FFees[I]) then
      FFees[I].Free;
  SetLength(FFees, 0);
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor AddLiveAuctionItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddLiveAuctionItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFees)-1 do
    if Assigned(FFees[I]) then
      FFees[I].Free;
  SetLength(FFees, 0);
  inherited Destroy;
end;

constructor AddItemResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor AddItemResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFees)-1 do
    if Assigned(FFees[I]) then
      FFees[I].Free;
  SetLength(FFees, 0);
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  inherited Destroy;
end;

constructor ApproveLiveAuctionBiddersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor ApproveLiveAuctionBiddersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidderUpdateStatus)-1 do
    if Assigned(FBidderUpdateStatus[I]) then
      FBidderUpdateStatus[I].Free;
  SetLength(FBidderUpdateStatus, 0);
  inherited Destroy;
end;

constructor GetSellerTransactionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerTransactionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTransactionArray)-1 do
    if Assigned(FTransactionArray[I]) then
      FTransactionArray[I].Free;
  SetLength(FTransactionArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  if Assigned(FSeller) then
    FSeller.Free;
  inherited Destroy;
end;

constructor GetItemTransactionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemTransactionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FTransactionArray)-1 do
    if Assigned(FTransactionArray[I]) then
      FTransactionArray[I].Free;
  SetLength(FTransactionArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor GetAccountResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAccountResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FAccountEntries)-1 do
    if Assigned(FAccountEntries[I]) then
      FAccountEntries[I].Free;
  SetLength(FAccountEntries, 0);
  if Assigned(FAccountSummary) then
    FAccountSummary.Free;
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetAdFormatLeadsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAdFormatLeadsResponseType.Destroy;
begin
  if Assigned(FAdFormatLead) then
    FAdFormatLead.Free;
  inherited Destroy;
end;

constructor GetMemberMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMemberMessagesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FMemberMessage)-1 do
    if Assigned(FMemberMessage[I]) then
      FMemberMessage[I].Free;
  SetLength(FMemberMessage, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetHighBiddersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetHighBiddersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidArray)-1 do
    if Assigned(FBidArray[I]) then
      FBidArray[I].Free;
  SetLength(FBidArray, 0);
  inherited Destroy;
end;

constructor GetAllBiddersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetAllBiddersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidArray)-1 do
    if Assigned(FBidArray[I]) then
      FBidArray[I].Free;
  SetLength(FBidArray, 0);
  if Assigned(FHighestBid) then
    FHighestBid.Free;
  inherited Destroy;
end;

constructor RespondToBestOfferResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor RespondToBestOfferResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FRespondToBestOffer)-1 do
    if Assigned(FRespondToBestOffer[I]) then
      FRespondToBestOffer[I].Free;
  SetLength(FRespondToBestOffer, 0);
  inherited Destroy;
end;

constructor GetBestOffersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBestOffersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBestOfferArray)-1 do
    if Assigned(FBestOfferArray[I]) then
      FBestOfferArray[I].Free;
  SetLength(FBestOfferArray, 0);
  if Assigned(FItem) then
    FItem.Free;
  inherited Destroy;
end;

constructor PlaceOfferResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor PlaceOfferResponseType.Destroy;
begin
  if Assigned(FSellingStatus) then
    FSellingStatus.Free;
  if Assigned(FBestOffer) then
    FBestOffer.Free;
  inherited Destroy;
end;

constructor GetSellerListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerListResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemArray)-1 do
    if Assigned(FItemArray[I]) then
      FItemArray[I].Free;
  SetLength(FItemArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  if Assigned(FSeller) then
    FSeller.Free;
  inherited Destroy;
end;

constructor GetSellerEventsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerEventsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemArray)-1 do
    if Assigned(FItemArray[I]) then
      FItemArray[I].Free;
  SetLength(FItemArray, 0);
  if Assigned(FTimeTo) then
    FTimeTo.Free;
  inherited Destroy;
end;

constructor GetBidderListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetBidderListResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidItemArray)-1 do
    if Assigned(FBidItemArray[I]) then
      FBidItemArray[I].Free;
  SetLength(FBidItemArray, 0);
  if Assigned(FBidder) then
    FBidder.Free;
  inherited Destroy;
end;

constructor SetCartResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetCartResponseType.Destroy;
begin
  if Assigned(FCart) then
    FCart.Free;
  inherited Destroy;
end;

constructor GetCartResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCartResponseType.Destroy;
begin
  if Assigned(FCart) then
    FCart.Free;
  inherited Destroy;
end;

constructor GetPopularKeywordsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPopularKeywordsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCategoryArray)-1 do
    if Assigned(FCategoryArray[I]) then
      FCategoryArray[I].Free;
  SetLength(FCategoryArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetCategoriesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoriesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCategoryArray)-1 do
    if Assigned(FCategoryArray[I]) then
      FCategoryArray[I].Free;
  SetLength(FCategoryArray, 0);
  if Assigned(FUpdateTime) then
    FUpdateTime.Free;
  inherited Destroy;
end;

constructor GetCategory2CSResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategory2CSResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FMappedCategoryArray)-1 do
    if Assigned(FMappedCategoryArray[I]) then
      FMappedCategoryArray[I].Free;
  SetLength(FMappedCategoryArray, 0);
  for I := 0 to Length(FUnmappedCategoryArray)-1 do
    if Assigned(FUnmappedCategoryArray[I]) then
      FUnmappedCategoryArray[I].Free;
  SetLength(FUnmappedCategoryArray, 0);
  if Assigned(FSiteWideCharacteristicSets) then
    FSiteWideCharacteristicSets.Free;
  inherited Destroy;
end;

constructor GetCategoryFeaturesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoryFeaturesResponseType.Destroy;
begin
  if Assigned(FUpdateTime) then
    FUpdateTime.Free;
  if Assigned(FCategory) then
    FCategory.Free;
  if Assigned(FSiteDefaults) then
    FSiteDefaults.Free;
  if Assigned(FFeatureDefinitions) then
    FFeatureDefinitions.Free;
  inherited Destroy;
end;

constructor GetCategoryListingsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoryListingsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FItemArray)-1 do
    if Assigned(FItemArray[I]) then
      FItemArray[I].Free;
  SetLength(FItemArray, 0);
  for I := 0 to Length(FSubCategories)-1 do
    if Assigned(FSubCategories[I]) then
      FSubCategories[I].Free;
  SetLength(FSubCategories, 0);
  if Assigned(FCategory) then
    FCategory.Free;
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  if Assigned(FBuyingGuideDetails) then
    FBuyingGuideDetails.Free;
  inherited Destroy;
end;

constructor GetCategoryMappingsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetCategoryMappingsResponseType.Destroy;
begin
  if Assigned(FCategoryMapping) then
    FCategoryMapping.Free;
  inherited Destroy;
end;

constructor GetDescriptionTemplatesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetDescriptionTemplatesResponseType.Destroy;
begin
  if Assigned(FDescriptionTemplate) then
    FDescriptionTemplate.Free;
  if Assigned(FThemeGroup) then
    FThemeGroup.Free;
  inherited Destroy;
end;

constructor GetDisputeResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetDisputeResponseType.Destroy;
begin
  if Assigned(FDispute) then
    FDispute.Free;
  inherited Destroy;
end;

constructor GetExpressWishListResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetExpressWishListResponseType.Destroy;
begin
  if Assigned(FWishList) then
    FWishList.Free;
  if Assigned(FPagination) then
    FPagination.Free;
  inherited Destroy;
end;

constructor GetFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetFeedbackResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FFeedbackDetailArray)-1 do
    if Assigned(FFeedbackDetailArray[I]) then
      FFeedbackDetailArray[I].Free;
  SetLength(FFeedbackDetailArray, 0);
  if Assigned(FFeedbackSummary) then
    FFeedbackSummary.Free;
  inherited Destroy;
end;

constructor GetItemsAwaitingFeedbackResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetItemsAwaitingFeedbackResponseType.Destroy;
begin
  if Assigned(FItemsAwaitingFeedback) then
    FItemsAwaitingFeedback.Free;
  inherited Destroy;
end;

constructor GetLiveAuctionBiddersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetLiveAuctionBiddersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidderDetails)-1 do
    if Assigned(FBidderDetails[I]) then
      FBidderDetails[I].Free;
  SetLength(FBidderDetails, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetMessagePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMessagePreferencesResponseType.Destroy;
begin
  if Assigned(FASQPreferences) then
    FASQPreferences.Free;
  inherited Destroy;
end;

constructor GetMyMessagesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyMessagesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FAlerts)-1 do
    if Assigned(FAlerts[I]) then
      FAlerts[I].Free;
  SetLength(FAlerts, 0);
  for I := 0 to Length(FMessages)-1 do
    if Assigned(FMessages[I]) then
      FMessages[I].Free;
  SetLength(FMessages, 0);
  if Assigned(FSummary) then
    FSummary.Free;
  inherited Destroy;
end;

constructor GetMyeBayBuyingResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayBuyingResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FBidAssistantList)-1 do
    if Assigned(FBidAssistantList[I]) then
      FBidAssistantList[I].Free;
  SetLength(FBidAssistantList, 0);
  if Assigned(FBuyingSummary) then
    FBuyingSummary.Free;
  if Assigned(FWatchList) then
    FWatchList.Free;
  if Assigned(FBidList) then
    FBidList.Free;
  if Assigned(FBestOfferList) then
    FBestOfferList.Free;
  if Assigned(FWonList) then
    FWonList.Free;
  if Assigned(FLostList) then
    FLostList.Free;
  if Assigned(FFavoriteSearches) then
    FFavoriteSearches.Free;
  if Assigned(FFavoriteSellers) then
    FFavoriteSellers.Free;
  if Assigned(FSecondChanceOffer) then
    FSecondChanceOffer.Free;
  inherited Destroy;
end;

constructor GetMyeBayRemindersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBayRemindersResponseType.Destroy;
begin
  if Assigned(FBuyingReminders) then
    FBuyingReminders.Free;
  if Assigned(FSellingReminders) then
    FSellingReminders.Free;
  inherited Destroy;
end;

constructor GetMyeBaySellingResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetMyeBaySellingResponseType.Destroy;
begin
  if Assigned(FSellingSummary) then
    FSellingSummary.Free;
  if Assigned(FScheduledList) then
    FScheduledList.Free;
  if Assigned(FActiveList) then
    FActiveList.Free;
  if Assigned(FSoldList) then
    FSoldList.Free;
  if Assigned(FUnsoldList) then
    FUnsoldList.Free;
  if Assigned(FSummary) then
    FSummary.Free;
  inherited Destroy;
end;

constructor GetNotificationPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetNotificationPreferencesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FUserDeliveryPreferenceArray)-1 do
    if Assigned(FUserDeliveryPreferenceArray[I]) then
      FUserDeliveryPreferenceArray[I].Free;
  SetLength(FUserDeliveryPreferenceArray, 0);
  if Assigned(FApplicationDeliveryPreferences) then
    FApplicationDeliveryPreferences.Free;
  if Assigned(FUserData) then
    FUserData.Free;
  if Assigned(FEventProperty) then
    FEventProperty.Free;
  inherited Destroy;
end;

constructor GetNotificationsUsageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetNotificationsUsageResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FNotificationDetailsArray)-1 do
    if Assigned(FNotificationDetailsArray[I]) then
      FNotificationDetailsArray[I].Free;
  SetLength(FNotificationDetailsArray, 0);
  for I := 0 to Length(FMarkUpMarkDownHistory)-1 do
    if Assigned(FMarkUpMarkDownHistory[I]) then
      FMarkUpMarkDownHistory[I].Free;
  SetLength(FMarkUpMarkDownHistory, 0);
  if Assigned(FStartTime) then
    FStartTime.Free;
  if Assigned(FEndTime) then
    FEndTime.Free;
  if Assigned(FNotificationStatistics) then
    FNotificationStatistics.Free;
  inherited Destroy;
end;

constructor GetOrdersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrdersResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FOrderArray)-1 do
    if Assigned(FOrderArray[I]) then
      FOrderArray[I].Free;
  SetLength(FOrderArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetOrderTransactionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetOrderTransactionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FOrderArray)-1 do
    if Assigned(FOrderArray[I]) then
      FOrderArray[I].Free;
  SetLength(FOrderArray, 0);
  inherited Destroy;
end;

constructor GetPictureManagerDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPictureManagerDetailsResponseType.Destroy;
begin
  if Assigned(FPictureManagerDetails) then
    FPictureManagerDetails.Free;
  inherited Destroy;
end;

constructor GetPictureManagerOptionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPictureManagerOptionsResponseType.Destroy;
begin
  if Assigned(FSubscription) then
    FSubscription.Free;
  if Assigned(FPictureType) then
    FPictureType.Free;
  inherited Destroy;
end;

constructor GetProductSearchResultsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetProductSearchResultsResponseType.Destroy;
begin
  if Assigned(FDataElementSets) then
    FDataElementSets.Free;
  if Assigned(FProductSearchResult) then
    FProductSearchResult.Free;
  inherited Destroy;
end;

constructor GetProductFamilyMembersResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetProductFamilyMembersResponseType.Destroy;
begin
  if Assigned(FDataElementSets) then
    FDataElementSets.Free;
  if Assigned(FProductSearchResult) then
    FProductSearchResult.Free;
  inherited Destroy;
end;

constructor GetProductSearchPageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetProductSearchPageResponseType.Destroy;
begin
  if Assigned(FProductSearchPage) then
    FProductSearchPage.Free;
  inherited Destroy;
end;

constructor GetProductsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetProductsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCharacteristicsSetProductHistogram)-1 do
    if Assigned(FCharacteristicsSetProductHistogram[I]) then
      FCharacteristicsSetProductHistogram[I].Free;
  SetLength(FCharacteristicsSetProductHistogram, 0);
  for I := 0 to Length(FItemArray)-1 do
    if Assigned(FItemArray[I]) then
      FItemArray[I].Free;
  SetLength(FItemArray, 0);
  if Assigned(FProduct) then
    FProduct.Free;
  if Assigned(FBuyingGuideDetails) then
    FBuyingGuideDetails.Free;
  inherited Destroy;
end;

constructor GetPromotionRulesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPromotionRulesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FPromotionRuleArray)-1 do
    if Assigned(FPromotionRuleArray[I]) then
      FPromotionRuleArray[I].Free;
  SetLength(FPromotionRuleArray, 0);
  inherited Destroy;
end;

constructor GetPromotionalSaleDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetPromotionalSaleDetailsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FPromotionalSaleDetails)-1 do
    if Assigned(FPromotionalSaleDetails[I]) then
      FPromotionalSaleDetails[I].Free;
  SetLength(FPromotionalSaleDetails, 0);
  inherited Destroy;
end;

constructor GetReturnURLResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetReturnURLResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FAuthenticationEntryArray)-1 do
    if Assigned(FAuthenticationEntryArray[I]) then
      FAuthenticationEntryArray[I].Free;
  SetLength(FAuthenticationEntryArray, 0);
  inherited Destroy;
end;

constructor GetSearchResultsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSearchResultsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FSearchResultItemArray)-1 do
    if Assigned(FSearchResultItemArray[I]) then
      FSearchResultItemArray[I].Free;
  SetLength(FSearchResultItemArray, 0);
  for I := 0 to Length(FCategoryArray)-1 do
    if Assigned(FCategoryArray[I]) then
      FCategoryArray[I].Free;
  SetLength(FCategoryArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  if Assigned(FBuyingGuideDetails) then
    FBuyingGuideDetails.Free;
  if Assigned(FStoreExpansionArray) then
    FStoreExpansionArray.Free;
  if Assigned(FInternationalExpansionArray) then
    FInternationalExpansionArray.Free;
  if Assigned(FFilterRemovedExpansionArray) then
    FFilterRemovedExpansionArray.Free;
  if Assigned(FAllCategoriesExpansionArray) then
    FAllCategoriesExpansionArray.Free;
  if Assigned(FSpellingSuggestion) then
    FSpellingSuggestion.Free;
  inherited Destroy;
end;

constructor GetSearchResultsExpressResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSearchResultsExpressResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FHistogram)-1 do
    if Assigned(FHistogram[I]) then
      FHistogram[I].Free;
  SetLength(FHistogram, 0);
  for I := 0 to Length(FItemArray)-1 do
    if Assigned(FItemArray[I]) then
      FItemArray[I].Free;
  SetLength(FItemArray, 0);
  for I := 0 to Length(FProductArray)-1 do
    if Assigned(FProductArray[I]) then
      FProductArray[I].Free;
  SetLength(FProductArray, 0);
  inherited Destroy;
end;

constructor GetSellerPaymentsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSellerPaymentsResponseType.Destroy;
begin
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  if Assigned(FSellerPayment) then
    FSellerPayment.Free;
  inherited Destroy;
end;

constructor GetShippingDiscountProfilesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetShippingDiscountProfilesResponseType.Destroy;
begin
  if Assigned(FFlatShippingDiscount) then
    FFlatShippingDiscount.Free;
  if Assigned(FCalculatedShippingDiscount) then
    FCalculatedShippingDiscount.Free;
  if Assigned(FCalculatedHandlingDiscount) then
    FCalculatedHandlingDiscount.Free;
  if Assigned(FPromotionalShippingDiscountDetails) then
    FPromotionalShippingDiscountDetails.Free;
  if Assigned(FShippingInsurance) then
    FShippingInsurance.Free;
  if Assigned(FInternationalShippingInsurance) then
    FInternationalShippingInsurance.Free;
  inherited Destroy;
end;

constructor GetStoreResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStoreResponseType.Destroy;
begin
  if Assigned(FStore) then
    FStore.Free;
  inherited Destroy;
end;

constructor GetStoreCustomPageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStoreCustomPageResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FCustomPageArray)-1 do
    if Assigned(FCustomPageArray[I]) then
      FCustomPageArray[I].Free;
  SetLength(FCustomPageArray, 0);
  inherited Destroy;
end;

constructor SetStoreCustomPageResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor SetStoreCustomPageResponseType.Destroy;
begin
  if Assigned(FCustomPage) then
    FCustomPage.Free;
  inherited Destroy;
end;

constructor GetStoreOptionsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStoreOptionsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FLogoArray)-1 do
    if Assigned(FLogoArray[I]) then
      FLogoArray[I].Free;
  SetLength(FLogoArray, 0);
  for I := 0 to Length(FSubscriptionArray)-1 do
    if Assigned(FSubscriptionArray[I]) then
      FSubscriptionArray[I].Free;
  SetLength(FSubscriptionArray, 0);
  if Assigned(FBasicThemeArray) then
    FBasicThemeArray.Free;
  if Assigned(FAdvancedThemeArray) then
    FAdvancedThemeArray.Free;
  inherited Destroy;
end;

constructor GetStorePreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetStorePreferencesResponseType.Destroy;
begin
  if Assigned(FStorePreferences) then
    FStorePreferences.Free;
  inherited Destroy;
end;

constructor GetSuggestedCategoriesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetSuggestedCategoriesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FSuggestedCategoryArray)-1 do
    if Assigned(FSuggestedCategoryArray[I]) then
      FSuggestedCategoryArray[I].Free;
  SetLength(FSuggestedCategoryArray, 0);
  inherited Destroy;
end;

constructor GetUserDisputesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserDisputesResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FDisputeArray)-1 do
    if Assigned(FDisputeArray[I]) then
      FDisputeArray[I].Free;
  SetLength(FDisputeArray, 0);
  if Assigned(FDisputeFilterCount) then
    FDisputeFilterCount.Free;
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetUserPreferencesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetUserPreferencesResponseType.Destroy;
begin
  if Assigned(FBidderNoticePreferences) then
    FBidderNoticePreferences.Free;
  if Assigned(FCombinedPaymentPreferences) then
    FCombinedPaymentPreferences.Free;
  if Assigned(FCrossPromotionPreferences) then
    FCrossPromotionPreferences.Free;
  if Assigned(FSellerPaymentPreferences) then
    FSellerPaymentPreferences.Free;
  if Assigned(FSellerFavoriteItemPreferences) then
    FSellerFavoriteItemPreferences.Free;
  if Assigned(FEndOfAuctionEmailPreferences) then
    FEndOfAuctionEmailPreferences.Free;
  if Assigned(FExpressPreferences) then
    FExpressPreferences.Free;
  if Assigned(FProStoresPreference) then
    FProStoresPreference.Free;
  inherited Destroy;
end;

constructor GetVeROReasonCodeDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetVeROReasonCodeDetailsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FVeROReasonCodeDetails)-1 do
    if Assigned(FVeROReasonCodeDetails[I]) then
      FVeROReasonCodeDetails[I].Free;
  SetLength(FVeROReasonCodeDetails, 0);
  inherited Destroy;
end;

constructor GetVeROReportStatusResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetVeROReportStatusResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FReportedItemDetails)-1 do
    if Assigned(FReportedItemDetails[I]) then
      FReportedItemDetails[I].Free;
  SetLength(FReportedItemDetails, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GetWantItNowPostResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetWantItNowPostResponseType.Destroy;
begin
  if Assigned(FWantItNowPost) then
    FWantItNowPost.Free;
  inherited Destroy;
end;

constructor GetWantItNowSearchResultsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GetWantItNowSearchResultsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FWantItNowPostArray)-1 do
    if Assigned(FWantItNowPostArray[I]) then
      FWantItNowPostArray[I].Free;
  SetLength(FWantItNowPostArray, 0);
  if Assigned(FPaginationResult) then
    FPaginationResult.Free;
  inherited Destroy;
end;

constructor GeteBayDetailsResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor GeteBayDetailsResponseType.Destroy;
var
  I: Integer;
begin
  for I := 0 to Length(FUnitOfMeasurementDetails)-1 do
    if Assigned(FUnitOfMeasurementDetails[I]) then
      FUnitOfMeasurementDetails[I].Free;
  SetLength(FUnitOfMeasurementDetails, 0);
  if Assigned(FCountryDetails) then
    FCountryDetails.Free;
  if Assigned(FCurrencyDetails) then
    FCurrencyDetails.Free;
  if Assigned(FDispatchTimeMaxDetails) then
    FDispatchTimeMaxDetails.Free;
  if Assigned(FPaymentOptionDetails) then
    FPaymentOptionDetails.Free;
  if Assigned(FRegionDetails) then
    FRegionDetails.Free;
  if Assigned(FShippingLocationDetails) then
    FShippingLocationDetails.Free;
  if Assigned(FShippingServiceDetails) then
    FShippingServiceDetails.Free;
  if Assigned(FSiteDetails) then
    FSiteDetails.Free;
  if Assigned(FTaxJurisdiction) then
    FTaxJurisdiction.Free;
  if Assigned(FURLDetails) then
    FURLDetails.Free;
  if Assigned(FTimeZoneDetails) then
    FTimeZoneDetails.Free;
  if Assigned(FItemSpecificDetails) then
    FItemSpecificDetails.Free;
  if Assigned(FRegionOfOriginDetails) then
    FRegionOfOriginDetails.Free;
  if Assigned(FShippingPackageDetails) then
    FShippingPackageDetails.Free;
  if Assigned(FShippingCarrierDetails) then
    FShippingCarrierDetails.Free;
  inherited Destroy;
end;

constructor UploadSiteHostedPicturesResponseType.Create;
begin
  inherited Create;
  FSerializationOptions := [xoLiteralParam];
end;

destructor UploadSiteHostedPicturesResponseType.Destroy;
begin
  if Assigned(FSiteHostedPictureDetails) then
    FSiteHostedPictureDetails.Free;
  inherited Destroy;
end;

initialization
  InvRegistry.RegisterInterface(TypeInfo(eBayAPIInterface), 'urn:ebay:apis:eBLBaseComponents', 'UTF-8');
  InvRegistry.RegisterDefaultSOAPAction(TypeInfo(eBayAPIInterface), '');
  InvRegistry.RegisterInvokeOptions(TypeInfo(eBayAPIInterface), ioDocument);
  InvRegistry.RegisterInvokeOptions(TypeInfo(eBayAPIInterface), ioLiteral);
  InvRegistry.RegisterHeaderClass(TypeInfo(eBayAPIInterface), RequesterCredentials, 'RequesterCredentials', '');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessagesAAQToBidderRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessagesAAQToBidderResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddToWatchListRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetApiAccessRulesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAttributesXSLResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesXSLResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategorySpecificsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCharitiesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetContextualKeywordsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemRecommendationsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetItemRecommendationsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemRecommendationsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetItemRecommendationsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetLiveAuctionCatalogDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionCatalogDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFamilyMembersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFamilyMembersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFinderXSLResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderXSLResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSearchResultsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchResultsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GeteBayDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportItemsRequest), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UploadSiteHostedPicturesRequest), 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LeaveFeedbackRequest), 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetUserPreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStorePreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStoreCustomPageRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStoreCategoriesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStoreRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetStoreRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetShippingDiscountProfilesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerListRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerTransactionsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSearchResultsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetReturnURLRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetReturnURLRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetPromotionalSaleListingsRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetPromotionalSaleRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSellingPagesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSellingPagesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetPictureManagerDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetPictureManagerDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetOrderTransactionsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetOrdersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetNotificationPreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyeBayRemindersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyeBayBuyingRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyeBaySellingRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetMessagePreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoryListingsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryListingsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetCartRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetCartRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCartRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCartRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSearchResultsExpressRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsExpressRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PlaceOfferRequest), 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAccountRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetAccountRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetExpressWishListRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetExpressWishListRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetFeedbackRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemTransactionsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemsAwaitingFeedbackRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetLiveAuctionBiddersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionBiddersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMemberMessagesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPopularKeywordsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetPopularKeywordsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerPaymentsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerPaymentsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserDisputesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetVeROReportStatusRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetWantItNowSearchResultsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowSearchResultsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DeleteMyMessagesRequest), 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyMessagesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseMyMessagesRequest), 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ApproveLiveAuctionBiddersRequest), 'urn:ebay:apis:eBLBaseComponents', 'ApproveLiveAuctionBiddersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CompleteSaleRequest), 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseCheckoutStatusRequest), 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddOrderRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddOrderRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessageAAQToPartnerRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessageRTQRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetTaxTableRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SendInvoiceRequest), 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetContextualKeywordsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VerifyAddItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPromotionRulesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionRulesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPromotionalSaleDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreCategoryUpdateStatusRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreCustomPageRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetVeROReasonCodeDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseMyMessagesFoldersRequest), 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddSecondChanceItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddTransactionConfirmationItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(IssueRefundRequest), 'urn:ebay:apis:eBLBaseComponents', 'IssueRefundRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RespondToBestOfferRequest), 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VerifyAddSecondChanceItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FetchTokenRequest), 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAdFormatLeadsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAllBiddersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAttributesCSRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesCSRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetBidderListRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoriesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoryFeaturesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCharitiesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetDescriptionTemplatesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMessagePreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerEventsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetUserRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserPreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RemoveFromWatchListRequest), 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ValidateChallengeInputRequest), 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ValidateTestUserRegistrationRequest), 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddLiveAuctionItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddLiveAuctionItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RelistItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'RelistItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseLiveAuctionItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'ReviseLiveAuctionItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddDisputeResponseRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategorySpecificsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetNotificationsUsageRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddDisputeRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddToItemDescriptionRequest), 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EndItemRequest), 'urn:ebay:apis:eBLBaseComponents', 'EndItemRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetApiAccessRulesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAttributesXSLRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesXSLRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetBestOffersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategory2CSRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCategory2CSRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoryMappingsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetChallengeTokenRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCrossPromotionsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetCrossPromotionsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetDisputeRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetHighBiddersRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetHighBiddersRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemShippingRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetLiveAuctionCatalogDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionCatalogDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetNotificationPreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPictureManagerDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPictureManagerOptionsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerOptionsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFinderRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFinderXSLRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderXSLRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSearchPageRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchPageRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetReturnURLRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetReturnURLRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetRuNameRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetRuNameRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetShippingDiscountProfilesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreOptionsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStorePreferencesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSuggestedCategoriesRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetTaxTableRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserContactDetailsRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetWantItNowPostRequest), 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowPostRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GeteBayOfficialTimeRequest), 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RespondToFeedbackRequest), 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RespondToWantItNowPostRequest), 'urn:ebay:apis:eBLBaseComponents', 'RespondToWantItNowPostRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerReverseDisputeRequest), 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetUserNotesRequest), 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesRequest');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ValidateTestUserRegistrationResponse), 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetUserPreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetUserNotesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetTaxTableResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStorePreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStoreResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetStoreResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetShippingDiscountProfilesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetReturnURLResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetReturnURLResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetPromotionalSaleListingsResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetPictureManagerDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetPictureManagerDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetNotificationPreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetMessagePreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SendInvoiceResponse), 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerReverseDisputeResponse), 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseMyMessagesFoldersResponse), 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseMyMessagesResponse), 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseCheckoutStatusResponse), 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RespondToWantItNowPostResponse), 'urn:ebay:apis:eBLBaseComponents', 'RespondToWantItNowPostResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RespondToFeedbackResponse), 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RemoveFromWatchListResponse), 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LeaveFeedbackResponse), 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GeteBayOfficialTimeResponse), 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreCategoryUpdateStatusResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetRuNameResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetRuNameResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSellingPagesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSellingPagesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFinderResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetChallengeTokenResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAttributesCSResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesCSResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DeleteMyMessagesResponse), 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CompleteSaleResponse), 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddToWatchListResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddToItemDescriptionResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessageRTQResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessageAAQToPartnerResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddDisputeResponseResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddDisputeResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VerifyAddSecondChanceItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FetchTokenResponse), 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EndItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'EndItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddTransactionConfirmationItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddSecondChanceItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddOrderResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddOrderResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ValidateChallengeInputResponse), 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(IssueRefundResponse), 'urn:ebay:apis:eBLBaseComponents', 'IssueRefundResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCrossPromotionsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCrossPromotionsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetUserResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemShippingResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportItemsResponse), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStoreCategoriesResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetPromotionalSaleResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserContactDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetTaxTableResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VerifyAddItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseLiveAuctionItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'ReviseLiveAuctionItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ReviseItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RelistItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'RelistItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddLiveAuctionItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddLiveAuctionItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddItemResponse), 'urn:ebay:apis:eBLBaseComponents', 'AddItemResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ApproveLiveAuctionBiddersResponse), 'urn:ebay:apis:eBLBaseComponents', 'ApproveLiveAuctionBiddersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerTransactionsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemTransactionsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAccountResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetAccountResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAdFormatLeadsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMemberMessagesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetHighBiddersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetHighBiddersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAllBiddersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RespondToBestOfferResponse), 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetBestOffersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PlaceOfferResponse), 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerListResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerEventsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetBidderListResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetCartResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetCartResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCartResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCartResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPopularKeywordsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetPopularKeywordsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoriesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategory2CSResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCategory2CSResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoryFeaturesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoryListingsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryListingsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategoryMappingsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetDescriptionTemplatesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetDisputeResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetExpressWishListResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetExpressWishListResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetFeedbackResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemsAwaitingFeedbackResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetLiveAuctionBiddersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionBiddersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMessagePreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyMessagesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyeBayBuyingResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyeBayRemindersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetMyeBaySellingResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetNotificationPreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetNotificationsUsageResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetOrdersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetOrderTransactionsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPictureManagerDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPictureManagerOptionsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerOptionsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSearchResultsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchResultsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFamilyMembersResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFamilyMembersResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSearchPageResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchPageResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetProductsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPromotionRulesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionRulesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetPromotionalSaleDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetReturnURLResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetReturnURLResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSearchResultsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSearchResultsExpressResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsExpressResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSellerPaymentsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSellerPaymentsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetShippingDiscountProfilesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreCustomPageResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetStoreCustomPageResponse), 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStoreOptionsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetStorePreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetSuggestedCategoriesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserDisputesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetUserPreferencesResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetVeROReasonCodeDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetVeROReportStatusResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetWantItNowPostResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowPostResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetWantItNowSearchResultsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowSearchResultsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GeteBayDetailsResponse), 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UploadSiteHostedPicturesResponse), 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesResponse');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AckCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AckCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerPaymentMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerPaymentMethodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyerPaymentMethodCodeType), 'CustomCode2', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DetailLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DetailLevelCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeActivityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeActivityCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeActivityCodeType), 'CustomCode3', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeCreditEligibilityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeCreditEligibilityCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeCreditEligibilityCodeType), 'CustomCode4', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeExplanationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeExplanationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeExplanationCodeType), 'CustomCode5', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeFilterTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeFilterTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeFilterTypeCodeType), 'CustomCode6', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeIDType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeMessageSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeMessageSourceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeMessageSourceCodeType), 'CustomCode7', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeReasonCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeReasonCodeType), 'CustomCode8', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeRecordTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeRecordTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeRecordTypeCodeType), 'ItemNotReceived2', 'ItemNotReceived');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeRecordTypeCodeType), 'CustomCode9', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeResolutionReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeResolutionReasonCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeResolutionReasonCodeType), 'CustomCode10', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeResolutionRecordTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeResolutionRecordTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeResolutionRecordTypeCodeType), 'CustomCode11', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeSortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeSortTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeSortTypeCodeType), 'None2', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeSortTypeCodeType), 'CustomCode12', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeStateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeStateCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStateCodeType), 'ClaimPaid2', 'ClaimPaid');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStateCodeType), 'CustomCode13', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'Closed2', 'Closed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'ClaimOpened2', 'ClaimOpened');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'NoDocumentation2', 'NoDocumentation');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'ClaimClosed2', 'ClaimClosed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'ClaimDenied2', 'ClaimDenied');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'ClaimPaid3', 'ClaimPaid');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'ClaimResolved2', 'ClaimResolved');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'ClaimSubmitted2', 'ClaimSubmitted');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisputeStatusCodeType), 'CustomCode14', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ErrorClassificationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ErrorClassificationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ErrorClassificationCodeType), 'CustomCode15', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ErrorHandlingCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ErrorHandlingCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InvocationStatusType), 'urn:ebay:apis:eBLBaseComponents', 'InvocationStatusType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InvocationStatusType), 'Success2', 'Success');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InvocationStatusType), 'Failure2', 'Failure');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InvocationStatusType), 'CustomCode16', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MeasurementSystemCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MeasurementSystemCodeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SeverityCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SeverityCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SeverityCodeType), 'Warning2', 'Warning');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SeverityCodeType), 'CustomCode17', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UUIDType), 'urn:ebay:apis:eBLBaseComponents', 'UUIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WarningLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'WarningLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WarningLevelCodeType), 'Low_', 'Low');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WarningLevelCodeType), 'High_', 'High');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessRuleCurrentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccessRuleCurrentStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccessRuleCurrentStatusCodeType), 'CustomCode18', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccessRuleStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccessRuleStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccessRuleStatusCodeType), 'CustomCode19', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountDetailEntryCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountDetailEntryCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccountDetailEntryCodeType), 'CustomCode20', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountEntrySortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountEntrySortTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccountEntrySortTypeCodeType), 'None3', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccountEntrySortTypeCodeType), 'CustomCode21', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountHistorySelectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountHistorySelectionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccountHistorySelectionCodeType), 'CustomCode22', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountStateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AccountStateCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AccountStateCodeType), 'CustomCode23', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AdFormatEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AdFormatEnabledCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AdFormatEnabledCodeType), 'CustomCode24', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AdFormatLeadStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AdFormatLeadStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AdFormatLeadStatusCodeType), 'CustomCode25', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressOwnerCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressOwnerCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressOwnerCodeType), 'PayPal2', 'PayPal');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressOwnerCodeType), 'eBay2', 'eBay');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressOwnerCodeType), 'CustomCode26', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressRecordTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressRecordTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressRecordTypeCodeType), 'CustomCode27', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddressStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'AddressStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressStatusCodeType), 'None4', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressStatusCodeType), 'CustomCode28', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ApplicationDeviceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ApplicationDeviceTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ApplicationDeviceTypeCodeType), 'CustomCode29', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferActionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BestOfferActionCodeType), 'CustomCode30', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferIDType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BestOfferStatusCodeType), 'Pending2', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BestOfferStatusCodeType), 'Active2', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BestOfferStatusCodeType), 'CustomCode31', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BestOfferTypeCodeType), 'CustomCode32', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidActionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidActionCodeType), 'Unknown2', 'Unknown');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidActionCodeType), 'CustomCode33', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidActionCodeType), 'Counter2', 'Counter');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidActionCodeType), 'Accept2', 'Accept');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidActionCodeType), 'Decline2', 'Decline');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidGroupItemStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidGroupItemStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidGroupItemStatusCodeType), 'Cancelled2', 'Cancelled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidGroupItemStatusCodeType), 'Pending3', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidGroupItemStatusCodeType), 'CustomCode34', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidGroupStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidGroupStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidGroupStatusCodeType), 'Closed3', 'Closed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidGroupStatusCodeType), 'CustomCode35', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidderStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BidderStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidderStatusCodeType), 'Pending4', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BidderStatusCodeType), 'CustomCode36', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerProtectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerProtectionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyerProtectionCodeType), 'CustomCode37', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BuyerProtectionSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'BuyerProtectionSourceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyerProtectionSourceCodeType), 'eBay3', 'eBay');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyerProtectionSourceCodeType), 'PayPal3', 'PayPal');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyerProtectionSourceCodeType), 'CustomCode38', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CalculatedShippingChargeOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingChargeOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CalculatedShippingChargeOptionCodeType), 'CustomCode39', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CalculatedShippingRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingRateOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CalculatedShippingRateOptionCodeType), 'CustomCode40', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CategoryListingsOrderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CategoryListingsOrderCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryListingsOrderCodeType), 'CustomCode41', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CategoryListingsSearchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CategoryListingsSearchCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryListingsSearchCodeType), 'CustomCode42', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharacteristicsSearchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicsSearchCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharacteristicsSearchCodeType), 'Single_', 'Single');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharacteristicsSearchCodeType), 'CustomCode43', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityAffiliationTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityAffiliationTypeCodeType), 'CustomCode44', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharitySellerStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CharitySellerStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharitySellerStatusCodeType), 'Closed4', 'Closed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharitySellerStatusCodeType), 'CustomCode45', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CharityStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityStatusCodeType), 'CustomCode46', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CheckoutMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CheckoutMethodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CheckoutMethodCodeType), 'Other2', 'Other');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CheckoutMethodCodeType), 'CustomCode47', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CheckoutStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CheckoutStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CheckoutStatusCodeType), 'CustomCode48', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ClassifiedAdBestOfferEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdBestOfferEnabledCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ClassifiedAdBestOfferEnabledCodeType), 'Disabled2', 'Disabled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ClassifiedAdBestOfferEnabledCodeType), 'Enabled2', 'Enabled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ClassifiedAdBestOfferEnabledCodeType), 'CustomCode49', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ClassifiedAdPaymentMethodEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPaymentMethodEnabledCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ClassifiedAdPaymentMethodEnabledCodeType), 'CustomCode50', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CombinedPaymentOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CombinedPaymentOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CombinedPaymentOptionCodeType), 'CustomCode51', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CombinedPaymentPeriodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CombinedPaymentPeriodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CombinedPaymentPeriodCodeType), 'Ineligible2', 'Ineligible');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CombinedPaymentPeriodCodeType), 'CustomCode52', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CommentTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CommentTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CommentTypeCodeType), 'CustomCode53', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CompleteStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CompleteStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CompleteStatusCodeType), 'Pending5', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CompleteStatusCodeType), 'CustomCode54', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ConditionSelectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ConditionSelectionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ConditionSelectionCodeType), 'All2', 'All');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ConditionSelectionCodeType), 'New2', 'New');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ConditionSelectionCodeType), 'CustomCode55', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CountryCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CountryCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'AS_', 'AS');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'DO_', 'DO');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'IS_', 'IS');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'IN_', 'IN');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'TO_', 'TO');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CountryCodeType), 'CustomCode56', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CurrencyCodeType), 'urn:ebay:apis:eBLBaseComponents', 'CurrencyCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CurrencyCodeType), 'ALL3', 'ALL');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CurrencyCodeType), 'CustomCode57', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DateSpecifierCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DateSpecifierCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DateSpecifierCodeType), 'CustomCode58', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DaysCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DaysCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DaysCodeType), 'None5', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DaysCodeType), 'CustomCode59', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DepositTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DepositTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DepositTypeCodeType), 'None6', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DepositTypeCodeType), 'CustomCode60', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DescriptionReviseModeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DescriptionReviseModeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DescriptionReviseModeCodeType), 'CustomCode61', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DescriptionTemplateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DescriptionTemplateCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DescriptionTemplateCodeType), 'CustomCode62', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DetailNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DetailNameCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DetailNameCodeType), 'CustomCode63', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DeviceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DeviceTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceTypeCodeType), 'Platform_', 'Platform');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DeviceTypeCodeType), 'CustomCode64', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DigitalDeliveryEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DigitalDeliveryEnabledCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DigitalDeliveryEnabledCodeType), 'Disabled3', 'Disabled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DigitalDeliveryEnabledCodeType), 'Enabled3', 'Enabled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DigitalDeliveryEnabledCodeType), 'CustomCode65', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DigitalDeliveryMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DigitalDeliveryMethodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DigitalDeliveryMethodCodeType), 'None7', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DigitalDeliveryMethodCodeType), 'CustomCode66', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DiscountCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DiscountCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DiscountCodeType), 'CustomCode67', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DiscountNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DiscountNameCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DiscountNameCodeType), 'IndividualItemWeight2', 'IndividualItemWeight');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DiscountNameCodeType), 'CombinedItemWeight2', 'CombinedItemWeight');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DiscountNameCodeType), 'CustomCode68', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisplayPayNowButtonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'DisplayPayNowButtonCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DisplayPayNowButtonCodeType), 'CustomCode69', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EBaySubscriptionTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EBaySubscriptionTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EBaySubscriptionTypeCodeType), 'CustomCode70', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EnableCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EnableCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EnableCodeType), 'CustomCode71', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EndOfAuctionLogoTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EndOfAuctionLogoTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EndOfAuctionLogoTypeCodeType), 'CustomCode72', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EndOfAuctionLogoTypeCodeType), 'None8', 'None');
  RemClassRegistry.RegisterXSInfo(TypeInfo(EndReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'EndReasonCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(EndReasonCodeType), 'CustomCode73', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExpressDetailLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ExpressDetailLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressDetailLevelCodeType), 'None9', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressDetailLevelCodeType), 'CustomCode74', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExpressHistogramSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ExpressHistogramSortCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressHistogramSortCodeType), 'CustomCode75', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExpressItemSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ExpressItemSortCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressItemSortCodeType), 'CustomCode76', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExpressProductSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ExpressProductSortCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressProductSortCodeType), 'CustomCode77', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExpressSellingPreferenceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ExpressSellingPreferenceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressSellingPreferenceCodeType), 'All4', 'All');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressSellingPreferenceCodeType), 'CustomCode78', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ExternalProductCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ExternalProductCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExternalProductCodeType), 'CustomCode79', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeatureIDCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeatureIDCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeatureIDCodeType), 'CustomCode80', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackRatingDetailCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackRatingDetailCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackRatingDetailCodeType), 'CustomCode81', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackRatingStarCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackRatingStarCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackRatingStarCodeType), 'None10', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackRatingStarCodeType), 'CustomCode82', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackResponseCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackResponseCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeedbackResponseCodeType), 'CustomCode83', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FlatRateInsuranceRangeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FlatRateInsuranceRangeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FlatRateInsuranceRangeCodeType), 'CustomCode84', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FlatShippingRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'FlatShippingRateOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FlatShippingRateOptionCodeType), 'CustomCode85', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GallerySortFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GallerySortFilterCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GallerySortFilterCodeType), 'CustomCode86', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GalleryTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GalleryTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GalleryTypeCodeType), 'None11', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GalleryTypeCodeType), 'Featured2', 'Featured');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GalleryTypeCodeType), 'CustomCode87', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAllBiddersModeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersModeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetAllBiddersModeCodeType), 'CustomCode88', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GiftServicesCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GiftServicesCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GiftServicesCodeType), 'CustomCode89', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GranularityLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'GranularityLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GranularityLevelCodeType), 'Coarse2', 'Coarse');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GranularityLevelCodeType), 'Fine2', 'Fine');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GranularityLevelCodeType), 'CustomCode90', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(HandlingNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'HandlingNameCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(HandlingNameCodeType), 'EachAdditionalAmount2', 'EachAdditionalAmount');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(HandlingNameCodeType), 'EachAdditionalAmountOff2', 'EachAdditionalAmountOff');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(HandlingNameCodeType), 'EachAdditionalPercentOff2', 'EachAdditionalPercentOff');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(HandlingNameCodeType), 'CustomCode91', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(HitCounterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'HitCounterCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(HitCounterCodeType), 'CustomCode92', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InsuranceOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InsuranceOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InsuranceOptionCodeType), 'Required2', 'Required');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InsuranceOptionCodeType), 'CustomCode93', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(InsuranceSelectedCodeType), 'urn:ebay:apis:eBLBaseComponents', 'InsuranceSelectedCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InsuranceSelectedCodeType), 'NotOffered2', 'NotOffered');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InsuranceSelectedCodeType), 'Required3', 'Required');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InsuranceSelectedCodeType), 'IncludedInShippingHandling2', 'IncludedInShippingHandling');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(InsuranceSelectedCodeType), 'CustomCode94', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemConditionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemConditionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemConditionCodeType), 'New3', 'New');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemConditionCodeType), 'CustomCode95', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemFormatSortFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemFormatSortFilterCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemFormatSortFilterCodeType), 'ShowAnyItems2', 'ShowAnyItems');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemFormatSortFilterCodeType), 'CustomCode96', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemIDType), 'urn:ebay:apis:eBLBaseComponents', 'ItemIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemLocationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemLocationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemLocationCodeType), 'CustomCode97', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSortFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSortFilterCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSortFilterCodeType), 'HighestPrice2', 'HighestPrice');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSortFilterCodeType), 'LowestPrice2', 'LowestPrice');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSortFilterCodeType), 'CustomCode98', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSortTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSortTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSortTypeCodeType), 'Price2', 'Price');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSortTypeCodeType), 'CustomCode99', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSpecificSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificSourceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSpecificSourceCodeType), 'CustomCode100', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemSpecificsEnabledCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificsEnabledCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSpecificsEnabledCodeType), 'Disabled4', 'Disabled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSpecificsEnabledCodeType), 'Enabled4', 'Enabled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemSpecificsEnabledCodeType), 'CustomCode101', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemTypeFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ItemTypeFilterCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ItemTypeFilterCodeType), 'CustomCode102', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingEnhancementsCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingEnhancementsCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingEnhancementsCodeType), 'Featured3', 'Featured');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingEnhancementsCodeType), 'CustomCode103', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingFlowCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingFlowCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingFlowCodeType), 'CustomCode104', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingStatusCodeType), 'Active3', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingStatusCodeType), 'Ended2', 'Ended');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingStatusCodeType), 'CustomCode105', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingSubtypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingSubtypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingSubtypeCodeType), 'LocalMarketBestOfferOnly2', 'LocalMarketBestOfferOnly');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingSubtypeCodeType), 'CustomCode106', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ListingTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingTypeCodeType), 'Unknown3', 'Unknown');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingTypeCodeType), 'CustomCode107', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MarkUpMarkDownEventTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MarkUpMarkDownEventTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MarkUpMarkDownEventTypeCodeType), 'CustomCode108', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MerchDisplayCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MerchDisplayCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MerchDisplayCodeType), 'CustomCode109', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MerchandizingPrefCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MerchandizingPrefCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MerchandizingPrefCodeType), 'OptOut2', 'OptOut');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MerchandizingPrefCodeType), 'CustomCode110', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MessageStatusTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MessageStatusTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MessageStatusTypeCodeType), 'CustomCode111', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MessageTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MessageTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MessageTypeCodeType), 'CustomCode112', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MessageTypeCodeType), 'All5', 'All');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ModifyActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ModifyActionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ModifyActionCodeType), 'CustomCode113', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertIDType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertResolutionStatusCode), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertResolutionStatusCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesAlertResolutionStatusCode), 'Unresolved2', 'Unresolved');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesAlertResolutionStatusCode), 'CustomCode114', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesFolderOperationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesFolderOperationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesFolderOperationCodeType), 'Remove2', 'Remove');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesFolderOperationCodeType), 'CustomCode115', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesMessageIDType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEventPropertyNameCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventPropertyNameCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventPropertyNameCodeType), 'TimeLeft2', 'TimeLeft');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventPropertyNameCodeType), 'CustomCode116', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEventStateCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventStateCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventStateCodeType), 'New4', 'New');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventStateCodeType), 'Pending6', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventStateCodeType), 'CustomCode117', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEventTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventTypeCodeType), 'None12', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventTypeCodeType), 'AskSellerQuestion2', 'AskSellerQuestion');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventTypeCodeType), 'BestOffer2', 'BestOffer');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventTypeCodeType), 'CustomCode118', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationPayloadTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationPayloadTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationPayloadTypeCodeType), 'CustomCode119', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationRoleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationRoleCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationRoleCodeType), 'Application_', 'Application');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationRoleCodeType), 'CustomCode120', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderIDType), 'urn:ebay:apis:eBLBaseComponents', 'OrderIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'OrderStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'Active4', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'Inactive2', 'Inactive');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'Completed2', 'Completed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'Cancelled3', 'Cancelled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'Default_', 'Default');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OrderStatusCodeType), 'CustomCode121', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaidStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaidStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaidStatusCodeType), 'CustomCode122', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayPalAccountLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PayPalAccountLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountLevelCodeType), 'Unknown4', 'Unknown');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountLevelCodeType), 'Invalid2', 'Invalid');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountLevelCodeType), 'CustomCode123', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayPalAccountStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PayPalAccountStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountStatusCodeType), 'Active5', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountStatusCodeType), 'Closed5', 'Closed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountStatusCodeType), 'Locked2', 'Locked');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountStatusCodeType), 'CustomCode124', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountStatusCodeType), 'Unknown5', 'Unknown');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountStatusCodeType), 'Invalid3', 'Invalid');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PayPalAccountTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PayPalAccountTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountTypeCodeType), 'Business2', 'Business');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountTypeCodeType), 'Unknown6', 'Unknown');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountTypeCodeType), 'Invalid4', 'Invalid');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PayPalAccountTypeCodeType), 'CustomCode125', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentMethodSearchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentMethodSearchCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentMethodSearchCodeType), 'PayPal4', 'PayPal');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentMethodSearchCodeType), 'CustomCode126', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentMethodSearchCodeType), 'PaisaPayEscrowEMI2', 'PaisaPayEscrowEMI');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentStatusCodeType), 'CustomCode127', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PaymentTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PaymentTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PaymentTypeCodeType), 'CustomCode128', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PhotoDisplayCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PhotoDisplayCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PhotoDisplayCodeType), 'None13', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PhotoDisplayCodeType), 'CustomCode129', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureFormatCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureFormatCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureFormatCodeType), 'CustomCode130', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureManagerActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerActionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerActionCodeType), 'Add2', 'Add');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerActionCodeType), 'Delete2', 'Delete');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerActionCodeType), 'Rename2', 'Rename');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerActionCodeType), 'CustomCode131', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureManagerDetailLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerDetailLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerDetailLevelCodeType), 'ReturnAll2', 'ReturnAll');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerDetailLevelCodeType), 'CustomCode132', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureManagerPictureDisplayTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerPictureDisplayTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerPictureDisplayTypeCodeType), 'Supersize2', 'Supersize');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerPictureDisplayTypeCodeType), 'CustomCode133', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureManagerSubscriptionLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerSubscriptionLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerSubscriptionLevelCodeType), 'CustomCode134', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureSetCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureSetCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureSetCodeType), 'Standard2', 'Standard');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureSetCodeType), 'Supersize3', 'Supersize');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureSetCodeType), 'Large2', 'Large');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureSetCodeType), 'CustomCode135', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureSourceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureSourceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureSourceCodeType), 'CustomCode136', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PictureUploadPolicyCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PictureUploadPolicyCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureUploadPolicyCodeType), 'Add3', 'Add');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureUploadPolicyCodeType), 'CustomCode137', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProductSortCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductSortCodeType), 'CustomCode138', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductUseCaseCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ProductUseCaseCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductUseCaseCodeType), 'AddItem2', 'AddItem');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductUseCaseCodeType), 'ReviseItem2', 'ReviseItem');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductUseCaseCodeType), 'RelistItem2', 'RelistItem');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ProductUseCaseCodeType), 'CustomCode139', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionItemPriceTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionItemPriceTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionItemPriceTypeCodeType), 'CustomCode140', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionItemSelectionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionItemSelectionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionItemSelectionCodeType), 'CustomCode141', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionMethodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionMethodCodeType), 'CustomCode142', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionSchemeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionSchemeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionSchemeCodeType), 'CustomCode143', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionalSaleStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionalSaleStatusCodeType), 'Active6', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionalSaleStatusCodeType), 'Inactive3', 'Inactive');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PromotionalSaleStatusCodeType), 'CustomCode144', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(QuantityOperatorCodeType), 'urn:ebay:apis:eBLBaseComponents', 'QuantityOperatorCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(QuantityOperatorCodeType), 'CustomCode145', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(QuestionTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'QuestionTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(QuestionTypeCodeType), 'CustomCode146', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RCSPaymentStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RCSPaymentStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RCSPaymentStatusCodeType), 'Canceled2', 'Canceled');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RCSPaymentStatusCodeType), 'Pending7', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RCSPaymentStatusCodeType), 'CustomCode147', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RangeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RangeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RangeCodeType), 'High_2', 'High');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RangeCodeType), 'Low_2', 'Low');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RangeCodeType), 'CustomCode148', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RecipientRelationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RecipientRelationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_', '1');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_2', '2');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_3', '3');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), '_4', '4');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecipientRelationCodeType), 'CustomCode149', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RecommendationEngineCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RecommendationEngineCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RecommendationEngineCodeType), 'CustomCode150', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundReasonCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundReasonCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundReasonCodeType), 'Other3', 'Other');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundReasonCodeType), 'CustomCode151', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'RefundTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(RefundTypeCodeType), 'CustomCode152', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SKUType), 'urn:ebay:apis:eBLBaseComponents', 'SKUType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SMSSubscriptionErrorCodeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SMSSubscriptionErrorCodeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SMSSubscriptionErrorCodeCodeType), 'CustomCode153', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SMSSubscriptionUserStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SMSSubscriptionUserStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SMSSubscriptionUserStatusCodeType), 'Registered2', 'Registered');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SMSSubscriptionUserStatusCodeType), 'Pending8', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SMSSubscriptionUserStatusCodeType), 'Failed2', 'Failed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SMSSubscriptionUserStatusCodeType), 'CustomCode154', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchFlagsCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SearchFlagsCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchFlagsCodeType), 'CustomCode155', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchResultValuesCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SearchResultValuesCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchResultValuesCodeType), 'Escrow2', 'Escrow');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchResultValuesCodeType), 'New5', 'New');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchResultValuesCodeType), 'CustomCode156', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchSortOrderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SearchSortOrderCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchSortOrderCodeType), 'BestMatchSort2', 'BestMatchSort');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchSortOrderCodeType), 'CustomCode157', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchSortOrderCodeType), 'BestMatchCategoryGroup2', 'BestMatchCategoryGroup');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchSortOrderCodeType), 'PricePlusShippingAsc2', 'PricePlusShippingAsc');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchSortOrderCodeType), 'PricePlusShippingDesc2', 'PricePlusShippingDesc');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SearchTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchTypeCodeType), 'All6', 'All');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchTypeCodeType), 'Gallery2', 'Gallery');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SearchTypeCodeType), 'CustomCode158', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SecondChanceOfferDurationCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SecondChanceOfferDurationCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SecondChanceOfferDurationCodeType), 'Days_32', 'Days_3');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SecondChanceOfferDurationCodeType), 'Days_52', 'Days_5');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SecondChanceOfferDurationCodeType), 'Days_72', 'Days_7');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SecondChanceOfferDurationCodeType), 'CustomCode159', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerBusinessCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerBusinessCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerBusinessCodeType), 'Private_', 'Private');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerBusinessCodeType), 'CustomCode160', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerGuaranteeLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerGuaranteeLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerGuaranteeLevelCodeType), 'CustomCode161', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerLevelCodeType), 'None14', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerLevelCodeType), 'CustomCode162', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SellerPaymentMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SellerPaymentMethodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SellerPaymentMethodCodeType), 'CustomCode163', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SetUserNotesActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesActionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetUserNotesActionCodeType), 'Delete3', 'Delete');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SetUserNotesActionCodeType), 'CustomCode164', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingCarrierCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingCarrierCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingCarrierCodeType), 'Other4', 'Other');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingCarrierCodeType), 'CustomCode165', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingPackageCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingPackageCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingPackageCodeType), 'None15', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingPackageCodeType), 'CustomCode166', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingRateTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingRateTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingRateTypeCodeType), 'CustomCode167', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingServiceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingServiceCodeType), 'Other5', 'Other');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingServiceCodeType), 'CustomCode168', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ShippingTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'ShippingTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingTypeCodeType), 'Free2', 'Free');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingTypeCodeType), 'CustomCode169', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SiteCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SiteCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteCodeType), 'US2', 'US');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteCodeType), 'CustomCode170', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SiteIDFilterCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SiteIDFilterCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SiteIDFilterCodeType), 'CustomCode171', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SkypeContactOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SkypeContactOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SkypeContactOptionCodeType), 'CustomCode172', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SortOrderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SortOrderCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SortOrderCodeType), 'CustomCode173', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StatusCodeType), 'Active7', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StatusCodeType), 'Inactive4', 'Inactive');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StatusCodeType), 'CustomCode174', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCategoryUpdateActionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCategoryUpdateActionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCategoryUpdateActionCodeType), 'Add4', 'Add');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCategoryUpdateActionCodeType), 'Delete4', 'Delete');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCategoryUpdateActionCodeType), 'Move2', 'Move');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCategoryUpdateActionCodeType), 'Rename3', 'Rename');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCategoryUpdateActionCodeType), 'CustomCode175', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomHeaderLayoutCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomHeaderLayoutCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomHeaderLayoutCodeType), 'CustomCode176', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomListingHeaderDisplayCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderDisplayCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomListingHeaderDisplayCodeType), 'None16', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomListingHeaderDisplayCodeType), 'Full2', 'Full');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomListingHeaderDisplayCodeType), 'CustomCode177', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomListingHeaderLinkCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderLinkCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomListingHeaderLinkCodeType), 'None17', 'None');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomListingHeaderLinkCodeType), 'CustomCode178', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomPageStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomPageStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomPageStatusCodeType), 'Active8', 'Active');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomPageStatusCodeType), 'Delete5', 'Delete');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomPageStatusCodeType), 'Inactive5', 'Inactive');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomPageStatusCodeType), 'CustomCode179', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreFontFaceCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreFontFaceCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreFontFaceCodeType), 'CustomCode180', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreFontSizeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreFontSizeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreFontSizeCodeType), 'M2', 'M');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreFontSizeCodeType), 'CustomCode181', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreHeaderStyleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreHeaderStyleCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreHeaderStyleCodeType), 'Full3', 'Full');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreHeaderStyleCodeType), 'CustomCode182', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreItemListLayoutCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreItemListLayoutCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreItemListLayoutCodeType), 'CustomCode183', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreItemListSortOrderCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreItemListSortOrderCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreItemListSortOrderCodeType), 'NewlyListed2', 'NewlyListed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreItemListSortOrderCodeType), 'CustomCode184', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreSearchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreSearchCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreSearchCodeType), 'CustomCode185', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreSubscriptionLevelCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StoreSubscriptionLevelCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreSubscriptionLevelCodeType), 'Featured4', 'Featured');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreSubscriptionLevelCodeType), 'CustomCode186', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StringMatchCodeType), 'urn:ebay:apis:eBLBaseComponents', 'StringMatchCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StringMatchCodeType), 'CustomCode187', 'CustomCode');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StringMatchCodeType), 'Contains_', 'Contains');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SummaryFrequencyCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SummaryFrequencyCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SummaryFrequencyCodeType), 'CustomCode188', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SummaryWindowPeriodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'SummaryWindowPeriodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(SummaryWindowPeriodCodeType), 'CustomCode189', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaskStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TaskStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaskStatusCodeType), 'Pending9', 'Pending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaskStatusCodeType), 'InProgress2', 'InProgress');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaskStatusCodeType), 'Complete2', 'Complete');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaskStatusCodeType), 'Failed3', 'Failed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TaskStatusCodeType), 'CustomCode190', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TicketEventTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TicketEventTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TicketEventTypeCodeType), 'DE_Sonstige2', 'DE_Sonstige');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TicketEventTypeCodeType), 'CustomCode191', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TokenReturnMethodCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TokenReturnMethodCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TokenReturnMethodCodeType), 'CustomCode192', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TradingRoleCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TradingRoleCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TradingRoleCodeType), 'Buyer2', 'Buyer');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TradingRoleCodeType), 'Seller2', 'Seller');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TradingRoleCodeType), 'CustomCode193', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TransactionPlatformCodeType), 'urn:ebay:apis:eBLBaseComponents', 'TransactionPlatformCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionPlatformCodeType), 'eBay4', 'eBay');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionPlatformCodeType), 'Express2', 'Express');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionPlatformCodeType), 'Half2', 'Half');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionPlatformCodeType), 'CustomCode194', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TransactionPlatformType), 'urn:ebay:apis:eBLBaseComponents', 'TransactionPlatformType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionPlatformType), 'eBay5', 'eBay');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionPlatformType), 'Express3', 'Express');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UPSRateOptionCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UPSRateOptionCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UPSRateOptionCodeType), 'CustomCode195', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(URLTypeCodeType), 'urn:ebay:apis:eBLBaseComponents', 'URLTypeCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(URLTypeCodeType), 'CustomCode196', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserIDType), 'urn:ebay:apis:eBLBaseComponents', 'UserIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'UserStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'Unknown7', 'Unknown');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'Suspended2', 'Suspended');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'Confirmed2', 'Confirmed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'Unconfirmed2', 'Unconfirmed');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'Deleted2', 'Deleted');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'Merged2', 'Merged');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(UserStatusCodeType), 'CustomCode197', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VATStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VATStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VATStatusCodeType), 'CustomCode198', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROItemStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VeROItemStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VeROItemStatusCodeType), 'CustomCode199', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportPacketStatusCodeType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportPacketStatusCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VeROReportPacketStatusCodeType), 'Received2', 'Received');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VeROReportPacketStatusCodeType), 'InProcess2', 'InProcess');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(VeROReportPacketStatusCodeType), 'CustomCode200', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WirelessCarrierIDCodeType), 'urn:ebay:apis:eBLBaseComponents', 'WirelessCarrierIDCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WirelessCarrierIDCodeType), 'CustomCode201', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WishListSortCodeType), 'urn:ebay:apis:eBLBaseComponents', 'WishListSortCodeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WishListSortCodeType), 'PriceDescending2', 'PriceDescending');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WishListSortCodeType), 'CustomCode202', 'CustomCode');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessagesAAQToBidderRequestType), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderRequestType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddMemberMessagesAAQToBidderResponseType), 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AddToWatchListRequestType), 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListRequestType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetApiAccessRulesResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetAttributesXSLResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesXSLResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCategorySpecificsResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetCharitiesResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetContextualKeywordsResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemRecommendationsRequestType), 'urn:ebay:apis:eBLBaseComponents', 'GetItemRecommendationsRequestType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetItemRecommendationsResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetItemRecommendationsResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetLiveAuctionCatalogDetailsResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionCatalogDetailsResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFamilyMembersRequestType), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFamilyMembersRequestType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductFinderXSLResponseType), 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderXSLResponseType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GetProductSearchResultsRequestType), 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchResultsRequestType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(GeteBayDetailsRequestType), 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsRequestType');
  RemClassRegistry.RegisterXSClass(UserIdPasswordType, 'urn:ebay:apis:eBLBaseComponents', 'UserIdPasswordType');
  RemClassRegistry.RegisterXSClass(CustomSecurityHeaderType, 'urn:ebay:apis:eBLBaseComponents', 'CustomSecurityHeaderType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RequesterCredentials), 'urn:ebay:apis:eBLBaseComponents', 'RequesterCredentials');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LookupAttributeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'LookupAttributeArrayType');
  RemClassRegistry.RegisterXSClass(PaymentDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentDetailsType');
  RemClassRegistry.RegisterXSClass(DistanceType, 'urn:ebay:apis:eBLBaseComponents', 'DistanceType');
  RemClassRegistry.RegisterXSClass(ListingDesignerType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDesignerType');
  RemClassRegistry.RegisterXSClass(ReviseStatusType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseStatusType');
  RemClassRegistry.RegisterXSClass(SearchDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SearchDetailsType');
  RemClassRegistry.RegisterXSClass(ExternalProductIDType, 'urn:ebay:apis:eBLBaseComponents', 'ExternalProductIDType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExternalProductIDType), 'Type_', 'Type');
  RemClassRegistry.RegisterXSClass(ListingCheckoutRedirectPreferenceType, 'urn:ebay:apis:eBLBaseComponents', 'ListingCheckoutRedirectPreferenceType');
  RemClassRegistry.RegisterXSClass(AddressType, 'urn:ebay:apis:eBLBaseComponents', 'AddressType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AddressType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NameValueListArrayType), 'urn:ebay:apis:eBLBaseComponents', 'NameValueListArrayType');
  RemClassRegistry.RegisterXSClass(BuyerProtectionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerProtectionDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeSetType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeSetType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeSetArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeSetArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AttributeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AttributeArrayType');
  RemClassRegistry.RegisterXSClass(ValType, 'urn:ebay:apis:eBLBaseComponents', 'ValType');
  RemClassRegistry.RegisterXSClass(LookupAttributeType, 'urn:ebay:apis:eBLBaseComponents', 'LookupAttributeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LookupAttributeType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(AmountType, 'urn:ebay:apis:eBLBaseComponents', 'AmountType');
  RemClassRegistry.RegisterXSClass(LiveAuctionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'LiveAuctionDetailsType');
  RemClassRegistry.RegisterXSClass(BestOfferDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferDetailsType');
  RemClassRegistry.RegisterXSClass(BiddingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BiddingDetailsType');
  RemClassRegistry.RegisterXSClass(VATDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'VATDetailsType');
  RemClassRegistry.RegisterXSClass(CharityType, 'urn:ebay:apis:eBLBaseComponents', 'CharityType');
  RemClassRegistry.RegisterXSClass(PromotionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionDetailsType');
  RemClassRegistry.RegisterXSClass(PromotedItemType, 'urn:ebay:apis:eBLBaseComponents', 'PromotedItemType');
  RemClassRegistry.RegisterXSClass(CrossPromotionsType, 'urn:ebay:apis:eBLBaseComponents', 'CrossPromotionsType');
  RemClassRegistry.RegisterXSClass(ExpressDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressDetailsType');
  RemClassRegistry.RegisterXSClass(DigitalDeliveryDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'DigitalDeliveryDetailsType');
  RemClassRegistry.RegisterXSClass(PictureDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PictureDetailsType');
  RemClassRegistry.RegisterXSClass(StorefrontType, 'urn:ebay:apis:eBLBaseComponents', 'StorefrontType');
  RemClassRegistry.RegisterXSClass(ProductListingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ProductListingDetailsType');
  RemClassRegistry.RegisterXSClass(ExpressItemRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressItemRequirementsType');
  RemClassRegistry.RegisterXSClass(ListingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDetailsType');
  RemClassRegistry.RegisterXSClass(ExtendedProductFinderIDType, 'urn:ebay:apis:eBLBaseComponents', 'ExtendedProductFinderIDType');
  RemClassRegistry.RegisterXSClass(LabelType, 'urn:ebay:apis:eBLBaseComponents', 'LabelType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(LabelType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(CharacteristicType, 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharacteristicType), 'Label_', 'Label');
  RemClassRegistry.RegisterXSClass(CharacteristicsSetType, 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicsSetType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharacteristicsSetType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(CategoryType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CategoryType), 'Virtual_', 'Virtual');
  RemClassRegistry.RegisterXSClass(BuyerType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharityAffiliationsType), 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationsType');
  RemClassRegistry.RegisterXSClass(SchedulingInfoType, 'urn:ebay:apis:eBLBaseComponents', 'SchedulingInfoType');
  RemClassRegistry.RegisterXSClass(ProStoresDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ProStoresDetailsType');
  RemClassRegistry.RegisterXSClass(ProStoresCheckoutPreferenceType, 'urn:ebay:apis:eBLBaseComponents', 'ProStoresCheckoutPreferenceType');
  RemClassRegistry.RegisterXSClass(FeedbackRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackRequirementsType');
  RemClassRegistry.RegisterXSClass(ExpressSellerRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressSellerRequirementsType');
  RemClassRegistry.RegisterXSClass(SellerType, 'urn:ebay:apis:eBLBaseComponents', 'SellerType');
  RemClassRegistry.RegisterXSClass(CharityIDType, 'urn:ebay:apis:eBLBaseComponents', 'CharityIDType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityIDType), 'type_', 'type');
  RemClassRegistry.RegisterXSClass(CharityAffiliationType, 'urn:ebay:apis:eBLBaseComponents', 'CharityAffiliationType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityAffiliationType), 'type_', 'type');
  RemClassRegistry.RegisterXSClass(CharitySellerType, 'urn:ebay:apis:eBLBaseComponents', 'CharitySellerType');
  RemClassRegistry.RegisterXSClass(ItemBidDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemBidDetailsType');
  RemClassRegistry.RegisterXSClass(BiddingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'BiddingSummaryType');
  RemClassRegistry.RegisterXSClass(UserType, 'urn:ebay:apis:eBLBaseComponents', 'UserType');
  RemClassRegistry.RegisterXSClass(PromotionalSaleDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleDetailsType');
  RemClassRegistry.RegisterXSClass(SellingStatusType, 'urn:ebay:apis:eBLBaseComponents', 'SellingStatusType');
  RemClassRegistry.RegisterXSClass(SalesTaxType, 'urn:ebay:apis:eBLBaseComponents', 'SalesTaxType');
  RemClassRegistry.RegisterXSClass(ShippingServiceOptionsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceOptionsType');
  RemClassRegistry.RegisterXSClass(InternationalShippingServiceOptionsType, 'urn:ebay:apis:eBLBaseComponents', 'InternationalShippingServiceOptionsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TaxTableType), 'urn:ebay:apis:eBLBaseComponents', 'TaxTableType');
  RemClassRegistry.RegisterXSClass(InsuranceDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'InsuranceDetailsType');
  RemClassRegistry.RegisterXSClass(PromotionalShippingDiscountDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionalShippingDiscountDetailsType');
  RemClassRegistry.RegisterXSClass(MeasureType, 'urn:ebay:apis:eBLBaseComponents', 'MeasureType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MeasureType), 'unit_', 'unit');
  RemClassRegistry.RegisterXSClass(CalculatedShippingRateType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingRateType');
  RemClassRegistry.RegisterXSClass(TaxJurisdictionType, 'urn:ebay:apis:eBLBaseComponents', 'TaxJurisdictionType');
  RemClassRegistry.RegisterXSClass(DiscountProfileType, 'urn:ebay:apis:eBLBaseComponents', 'DiscountProfileType');
  RemClassRegistry.RegisterXSClass(CalculatedShippingDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingDiscountType');
  RemClassRegistry.RegisterXSClass(FlatShippingDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'FlatShippingDiscountType');
  RemClassRegistry.RegisterXSClass(ShippingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingDetailsType');
  RemClassRegistry.RegisterXSClass(MaximumItemRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'MaximumItemRequirementsType');
  RemClassRegistry.RegisterXSClass(VerifiedUserRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'VerifiedUserRequirementsType');
  RemClassRegistry.RegisterXSClass(BuyerRequirementsType, 'urn:ebay:apis:eBLBaseComponents', 'BuyerRequirementsType');
  RemClassRegistry.RegisterXSClass(ContactHoursDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ContactHoursDetailsType');
  RemClassRegistry.RegisterXSClass(ExtendedContactDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ExtendedContactDetailsType');
  RemClassRegistry.RegisterXSClass(ItemType, 'urn:ebay:apis:eBLBaseComponents', 'ItemType');
  RemClassRegistry.RegisterXSClass(NameValueListType, 'urn:ebay:apis:eBLBaseComponents', 'NameValueListType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NameValueListType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeesType), 'urn:ebay:apis:eBLBaseComponents', 'FeesType');
  RemClassRegistry.RegisterXSClass(FeeType, 'urn:ebay:apis:eBLBaseComponents', 'FeeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(FeeType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(MemberMessageType, 'urn:ebay:apis:eBLBaseComponents', 'MemberMessageType');
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderRequestContainerType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderRequestContainerType');
  RemClassRegistry.RegisterXSClass(AddMemberMessagesAAQToBidderResponseContainerType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessagesAAQToBidderResponseContainerType');
  RemClassRegistry.RegisterXSClass(CheckoutStatusType, 'urn:ebay:apis:eBLBaseComponents', 'CheckoutStatusType');
  RemClassRegistry.RegisterXSClass(ExternalTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'ExternalTransactionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(TransactionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'TransactionArrayType');
  RemClassRegistry.RegisterXSClass(OrderType, 'urn:ebay:apis:eBLBaseComponents', 'OrderType');
  RemClassRegistry.RegisterXSClass(TransactionStatusType, 'urn:ebay:apis:eBLBaseComponents', 'TransactionStatusType');
  RemClassRegistry.RegisterXSClass(SellingManagerProductDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SellingManagerProductDetailsType');
  RemClassRegistry.RegisterXSClass(FeedbackInfoType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackInfoType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RefundArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RefundArrayType');
  RemClassRegistry.RegisterXSClass(TransactionType, 'urn:ebay:apis:eBLBaseComponents', 'TransactionType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(TransactionType), 'Platform_', 'Platform');
  RemClassRegistry.RegisterXSClass(RefundType, 'urn:ebay:apis:eBLBaseComponents', 'RefundType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidApprovalArrayType), 'urn:ebay:apis:eBLBaseComponents', 'BidApprovalArrayType');
  RemClassRegistry.RegisterXSClass(BidApprovalType, 'urn:ebay:apis:eBLBaseComponents', 'BidApprovalType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(LiveAuctionApprovalStatusArrayType), 'urn:ebay:apis:eBLBaseComponents', 'LiveAuctionApprovalStatusArrayType');
  RemClassRegistry.RegisterXSClass(LiveAuctionApprovalStatusType, 'urn:ebay:apis:eBLBaseComponents', 'LiveAuctionApprovalStatusType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertIDArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesMessageIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageIDArrayType');
  RemClassRegistry.RegisterXSClass(PaginationType, 'urn:ebay:apis:eBLBaseComponents', 'PaginationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AccountEntriesType), 'urn:ebay:apis:eBLBaseComponents', 'AccountEntriesType');
  RemClassRegistry.RegisterXSClass(PaginationResultType, 'urn:ebay:apis:eBLBaseComponents', 'PaginationResultType');
  RemClassRegistry.RegisterXSClass(AdditionalAccountType, 'urn:ebay:apis:eBLBaseComponents', 'AdditionalAccountType');
  RemClassRegistry.RegisterXSClass(AccountSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'AccountSummaryType');
  RemClassRegistry.RegisterXSClass(AccountEntryType, 'urn:ebay:apis:eBLBaseComponents', 'AccountEntryType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MemberMessageExchangeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MemberMessageExchangeArrayType');
  RemClassRegistry.RegisterXSClass(AdFormatLeadType, 'urn:ebay:apis:eBLBaseComponents', 'AdFormatLeadType');
  RemClassRegistry.RegisterXSClass(MemberMessageExchangeType, 'urn:ebay:apis:eBLBaseComponents', 'MemberMessageExchangeType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OfferArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OfferArrayType');
  RemClassRegistry.RegisterXSClass(OfferType, 'urn:ebay:apis:eBLBaseComponents', 'OfferType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(OfferType), 'Message_', 'Message');
  RemClassRegistry.RegisterXSClass(ApiAccessRuleType, 'urn:ebay:apis:eBLBaseComponents', 'ApiAccessRuleType');
  RemClassRegistry.RegisterXSClass(XSLFileType, 'urn:ebay:apis:eBLBaseComponents', 'XSLFileType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BestOfferArrayType), 'urn:ebay:apis:eBLBaseComponents', 'BestOfferArrayType');
  RemClassRegistry.RegisterXSClass(BestOfferType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemArrayType');
  RemClassRegistry.RegisterXSClass(AffiliateTrackingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'AffiliateTrackingDetailsType');
  RemClassRegistry.RegisterXSClass(CheckoutCompleteRedirectType, 'urn:ebay:apis:eBLBaseComponents', 'CheckoutCompleteRedirectType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CheckoutCompleteRedirectType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CartItemArrayType), 'urn:ebay:apis:eBLBaseComponents', 'CartItemArrayType');
  RemClassRegistry.RegisterXSClass(CheckoutOrderDetailType, 'urn:ebay:apis:eBLBaseComponents', 'CheckoutOrderDetailType');
  RemClassRegistry.RegisterXSClass(CartType, 'urn:ebay:apis:eBLBaseComponents', 'CartType');
  RemClassRegistry.RegisterXSClass(CartItemType, 'urn:ebay:apis:eBLBaseComponents', 'CartItemType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CategoryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'CategoryArrayType');
  RemClassRegistry.RegisterXSClass(SiteWideCharacteristicsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteWideCharacteristicsType');
  RemClassRegistry.RegisterXSClass(ListingDurationReferenceType, 'urn:ebay:apis:eBLBaseComponents', 'ListingDurationReferenceType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingDurationReferenceType), 'type_', 'type');
  RemClassRegistry.RegisterXSClass(CategoryFeatureType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryFeatureType');
  RemClassRegistry.RegisterXSClass(SiteDefaultsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteDefaultsType');
  RemClassRegistry.RegisterXSClass(ShippingTermRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingTermRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(BestOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(DutchBINEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DutchBINEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(UserConsentRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'UserConsentRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(HomePageFeaturedEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'HomePageFeaturedEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ProPackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProPackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BasicUpgradePackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BasicUpgradePackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ValuePackEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ValuePackEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ProPackPlusEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ProPackPlusEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(AdFormatEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'AdFormatEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(DigitalDeliveryEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'DigitalDeliveryEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BestOfferCounterEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferCounterEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BestOfferAutoDeclineEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferAutoDeclineEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketSpecialitySubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketSpecialitySubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketRegularSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketRegularSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketPremiumSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketPremiumSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalMarketNonSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalMarketNonSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(ExpressEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ExpressPicturesRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressPicturesRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(ExpressConditionRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressConditionRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(MinimumReservePriceDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'MinimumReservePriceDefinitionType');
  RemClassRegistry.RegisterXSClass(TCREnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'TCREnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(SellerContactDetailsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SellerContactDetailsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(StoreInventoryEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'StoreInventoryEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(SkypeMeTransactionalEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SkypeMeTransactionalEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(SkypeMeNonTransactionalEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SkypeMeNonTransactionalEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalListingDistancesRegularDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalListingDistancesRegularDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalListingDistancesSpecialtyDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalListingDistancesSpecialtyDefinitionType');
  RemClassRegistry.RegisterXSClass(LocalListingDistancesNonSubscriptionDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'LocalListingDistancesNonSubscriptionDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdPaymentMethodEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPaymentMethodEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdShippingMethodEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdShippingMethodEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdBestOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdBestOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdCounterOfferEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdCounterOfferEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdAutoDeclineEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdAutoDeclineEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdContactByPhoneEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdContactByPhoneEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdContactByEmailEnabledDefintionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdContactByEmailEnabledDefintionType');
  RemClassRegistry.RegisterXSClass(SafePaymentRequiredDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'SafePaymentRequiredDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdPayPerLeadEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdPayPerLeadEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ItemSpecificsEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificsEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(PaisaPayFullEscrowEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'PaisaPayFullEscrowEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(BestOfferAutoAcceptEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'BestOfferAutoAcceptEnabledDefinitionType');
  RemClassRegistry.RegisterXSClass(ClassifiedAdAutoAcceptEnabledDefinitionType, 'urn:ebay:apis:eBLBaseComponents', 'ClassifiedAdAutoAcceptEnabledDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingDurationDefinitionType), 'urn:ebay:apis:eBLBaseComponents', 'ListingDurationDefinitionType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingDurationDefinitionsType), 'urn:ebay:apis:eBLBaseComponents', 'ListingDurationDefinitionsType');
  RemClassRegistry.RegisterXSClass(FeatureDefinitionsType, 'urn:ebay:apis:eBLBaseComponents', 'FeatureDefinitionsType');
  RemClassRegistry.RegisterXSClass(ProximitySearchType, 'urn:ebay:apis:eBLBaseComponents', 'ProximitySearchType');
  RemClassRegistry.RegisterXSClass(GroupType, 'urn:ebay:apis:eBLBaseComponents', 'GroupType');
  RemClassRegistry.RegisterXSClass(SiteLocationType, 'urn:ebay:apis:eBLBaseComponents', 'SiteLocationType');
  RemClassRegistry.RegisterXSClass(SearchLocationType, 'urn:ebay:apis:eBLBaseComponents', 'SearchLocationType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(RelatedSearchKeywordArrayType), 'urn:ebay:apis:eBLBaseComponents', 'RelatedSearchKeywordArrayType');
  RemClassRegistry.RegisterXSClass(BuyingGuideType, 'urn:ebay:apis:eBLBaseComponents', 'BuyingGuideType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(BuyingGuideType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(BuyingGuideDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'BuyingGuideDetailsType');
  RemClassRegistry.RegisterXSClass(CategoryMappingType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryMappingType');
  RemClassRegistry.RegisterXSClass(CategoryItemSpecificsType, 'urn:ebay:apis:eBLBaseComponents', 'CategoryItemSpecificsType');
  RemClassRegistry.RegisterXSClass(CharityInfoType, 'urn:ebay:apis:eBLBaseComponents', 'CharityInfoType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(CharityInfoType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(ContextSearchAssetType, 'urn:ebay:apis:eBLBaseComponents', 'ContextSearchAssetType');
  RemClassRegistry.RegisterXSClass(DescriptionTemplateType, 'urn:ebay:apis:eBLBaseComponents', 'DescriptionTemplateType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DescriptionTemplateType), 'Name_', 'Name');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(DescriptionTemplateType), 'Type_', 'Type');
  RemClassRegistry.RegisterXSClass(ThemeGroupType, 'urn:ebay:apis:eBLBaseComponents', 'ThemeGroupType');
  RemClassRegistry.RegisterXSClass(DisputeResolutionType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeResolutionType');
  RemClassRegistry.RegisterXSClass(DisputeMessageType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeMessageType');
  RemClassRegistry.RegisterXSClass(DisputeType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeType');
  RemClassRegistry.RegisterXSClass(ExpressProductType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressProductType');
  RemClassRegistry.RegisterXSClass(WishListEntryType, 'urn:ebay:apis:eBLBaseComponents', 'WishListEntryType');
  RemClassRegistry.RegisterXSClass(WishListType, 'urn:ebay:apis:eBLBaseComponents', 'WishListType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(WishListType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackDetailArrayType');
  RemClassRegistry.RegisterXSClass(FeedbackDetailType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(FeedbackPeriodArrayType), 'urn:ebay:apis:eBLBaseComponents', 'FeedbackPeriodArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AverageRatingDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AverageRatingDetailArrayType');
  RemClassRegistry.RegisterXSClass(FeedbackSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackSummaryType');
  RemClassRegistry.RegisterXSClass(FeedbackPeriodType, 'urn:ebay:apis:eBLBaseComponents', 'FeedbackPeriodType');
  RemClassRegistry.RegisterXSClass(AverageRatingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'AverageRatingDetailsType');
  RemClassRegistry.RegisterXSClass(GetRecommendationsRequestContainerType, 'urn:ebay:apis:eBLBaseComponents', 'GetRecommendationsRequestContainerType');
  RemClassRegistry.RegisterXSClass(SIFFTASRecommendationsType, 'urn:ebay:apis:eBLBaseComponents', 'SIFFTASRecommendationsType');
  RemClassRegistry.RegisterXSClass(AttributeRecommendationsType, 'urn:ebay:apis:eBLBaseComponents', 'AttributeRecommendationsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductRecommendationsType), 'urn:ebay:apis:eBLBaseComponents', 'ProductRecommendationsType');
  RemClassRegistry.RegisterXSClass(ItemSpecificsRecommendationsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificsRecommendationsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ListingTipArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ListingTipArrayType');
  RemClassRegistry.RegisterXSClass(ListingAnalyzerRecommendationsType, 'urn:ebay:apis:eBLBaseComponents', 'ListingAnalyzerRecommendationsType');
  RemClassRegistry.RegisterXSClass(ListingTipMessageType, 'urn:ebay:apis:eBLBaseComponents', 'ListingTipMessageType');
  RemClassRegistry.RegisterXSClass(ListingTipFieldType, 'urn:ebay:apis:eBLBaseComponents', 'ListingTipFieldType');
  RemClassRegistry.RegisterXSClass(ListingTipType, 'urn:ebay:apis:eBLBaseComponents', 'ListingTipType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ListingTipType), 'Message_', 'Message');
  RemClassRegistry.RegisterXSClass(ProductInfoType, 'urn:ebay:apis:eBLBaseComponents', 'ProductInfoType');
  RemClassRegistry.RegisterXSClass(PricingRecommendationsType, 'urn:ebay:apis:eBLBaseComponents', 'PricingRecommendationsType');
  RemClassRegistry.RegisterXSClass(GetRecommendationsResponseContainerType, 'urn:ebay:apis:eBLBaseComponents', 'GetRecommendationsResponseContainerType');
  RemClassRegistry.RegisterXSClass(PaginatedTransactionArrayType, 'urn:ebay:apis:eBLBaseComponents', 'PaginatedTransactionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidderDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'BidderDetailArrayType');
  RemClassRegistry.RegisterXSClass(LiveAuctionBidType, 'urn:ebay:apis:eBLBaseComponents', 'LiveAuctionBidType');
  RemClassRegistry.RegisterXSClass(BidderDetailType, 'urn:ebay:apis:eBLBaseComponents', 'BidderDetailType');
  RemClassRegistry.RegisterXSClass(ScheduleType, 'urn:ebay:apis:eBLBaseComponents', 'ScheduleType');
  RemClassRegistry.RegisterXSClass(LiveAuctionCatalogType, 'urn:ebay:apis:eBLBaseComponents', 'LiveAuctionCatalogType');
  RemClassRegistry.RegisterXSClass(ASQPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'ASQPreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesAlertArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MyMessagesMessageArrayType), 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageArrayType');
  RemClassRegistry.RegisterXSClass(MyMessagesFolderSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesFolderSummaryType');
  RemClassRegistry.RegisterXSClass(MyMessagesSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesSummaryType');
  RemClassRegistry.RegisterXSClass(MyMessagesResponseDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesResponseDetailsType');
  RemClassRegistry.RegisterXSClass(MyMessagesForwardDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesForwardDetailsType');
  RemClassRegistry.RegisterXSClass(MyMessagesFolderType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesFolderType');
  RemClassRegistry.RegisterXSClass(MyMessagesAlertType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesAlertType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesAlertType), 'Read_', 'Read');
  RemClassRegistry.RegisterXSClass(MyMessagesMessageType, 'urn:ebay:apis:eBLBaseComponents', 'MyMessagesMessageType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MyMessagesMessageType), 'Read_', 'Read');
  RemClassRegistry.RegisterXSClass(ItemListCustomizationType, 'urn:ebay:apis:eBLBaseComponents', 'ItemListCustomizationType');
  RemClassRegistry.RegisterXSClass(MyeBaySelectionType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBaySelectionType');
  RemClassRegistry.RegisterXSClass(BidAssistantListType, 'urn:ebay:apis:eBLBaseComponents', 'BidAssistantListType');
  RemClassRegistry.RegisterXSClass(BuyingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'BuyingSummaryType');
  RemClassRegistry.RegisterXSClass(PaginatedItemArrayType, 'urn:ebay:apis:eBLBaseComponents', 'PaginatedItemArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(BidGroupArrayType), 'urn:ebay:apis:eBLBaseComponents', 'BidGroupArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderTransactionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OrderTransactionArrayType');
  RemClassRegistry.RegisterXSClass(PaginatedOrderTransactionArrayType, 'urn:ebay:apis:eBLBaseComponents', 'PaginatedOrderTransactionArrayType');
  RemClassRegistry.RegisterXSClass(OrderTransactionType, 'urn:ebay:apis:eBLBaseComponents', 'OrderTransactionType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSearchType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSearchType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSearchListType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSearchListType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSellerType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSellerType');
  RemClassRegistry.RegisterXSClass(MyeBayFavoriteSellerListType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBayFavoriteSellerListType');
  RemClassRegistry.RegisterXSClass(BidGroupItemType, 'urn:ebay:apis:eBLBaseComponents', 'BidGroupItemType');
  RemClassRegistry.RegisterXSClass(BidGroupType, 'urn:ebay:apis:eBLBaseComponents', 'BidGroupType');
  RemClassRegistry.RegisterXSClass(ReminderCustomizationType, 'urn:ebay:apis:eBLBaseComponents', 'ReminderCustomizationType');
  RemClassRegistry.RegisterXSClass(RemindersType, 'urn:ebay:apis:eBLBaseComponents', 'RemindersType');
  RemClassRegistry.RegisterXSClass(SellingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'SellingSummaryType');
  RemClassRegistry.RegisterXSClass(MyeBaySellingSummaryType, 'urn:ebay:apis:eBLBaseComponents', 'MyeBaySellingSummaryType');
  RemClassRegistry.RegisterXSClass(ApplicationDeliveryPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'ApplicationDeliveryPreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationEnableArrayType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationEnableArrayType');
  RemClassRegistry.RegisterXSClass(NotificationEventPropertyType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationEventPropertyType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationEventPropertyType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(NotificationEnableType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationEnableType');
  RemClassRegistry.RegisterXSClass(SMSSubscriptionType, 'urn:ebay:apis:eBLBaseComponents', 'SMSSubscriptionType');
  RemClassRegistry.RegisterXSClass(SummaryEventScheduleType, 'urn:ebay:apis:eBLBaseComponents', 'SummaryEventScheduleType');
  RemClassRegistry.RegisterXSClass(NotificationUserDataType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationUserDataType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(NotificationDetailsArrayType), 'urn:ebay:apis:eBLBaseComponents', 'NotificationDetailsArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(MarkUpMarkDownHistoryType), 'urn:ebay:apis:eBLBaseComponents', 'MarkUpMarkDownHistoryType');
  RemClassRegistry.RegisterXSClass(NotificationStatisticsType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationStatisticsType');
  RemClassRegistry.RegisterXSClass(NotificationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'NotificationDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(NotificationDetailsType), 'Type_', 'Type');
  RemClassRegistry.RegisterXSClass(MarkUpMarkDownEventType, 'urn:ebay:apis:eBLBaseComponents', 'MarkUpMarkDownEventType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(MarkUpMarkDownEventType), 'Type_', 'Type');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemTransactionIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemTransactionIDArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OrderIDArrayType');
  RemClassRegistry.RegisterXSClass(ItemTransactionIDType, 'urn:ebay:apis:eBLBaseComponents', 'ItemTransactionIDType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(OrderArrayType), 'urn:ebay:apis:eBLBaseComponents', 'OrderArrayType');
  RemClassRegistry.RegisterXSClass(PictureManagerPictureDisplayType, 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerPictureDisplayType');
  RemClassRegistry.RegisterXSClass(PictureManagerPictureType, 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerPictureType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerPictureType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(PictureManagerFolderType, 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerFolderType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(PictureManagerFolderType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(PictureManagerDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerDetailsType');
  RemClassRegistry.RegisterXSClass(PictureManagerSubscriptionType, 'urn:ebay:apis:eBLBaseComponents', 'PictureManagerSubscriptionType');
  RemClassRegistry.RegisterXSClass(SearchAttributesType, 'urn:ebay:apis:eBLBaseComponents', 'SearchAttributesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharacteristicSetIDsType), 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicSetIDsType');
  RemClassRegistry.RegisterXSClass(ProductSearchType, 'urn:ebay:apis:eBLBaseComponents', 'ProductSearchType');
  RemClassRegistry.RegisterXSClass(DataElementSetType, 'urn:ebay:apis:eBLBaseComponents', 'DataElementSetType');
  RemClassRegistry.RegisterXSClass(ProductFinderConstraintType, 'urn:ebay:apis:eBLBaseComponents', 'ProductFinderConstraintType');
  RemClassRegistry.RegisterXSClass(ProductType, 'urn:ebay:apis:eBLBaseComponents', 'ProductType');
  RemClassRegistry.RegisterXSClass(ProductFamilyType, 'urn:ebay:apis:eBLBaseComponents', 'ProductFamilyType');
  RemClassRegistry.RegisterXSClass(ResponseAttributeSetType, 'urn:ebay:apis:eBLBaseComponents', 'ResponseAttributeSetType');
  RemClassRegistry.RegisterXSClass(ProductSearchResultType, 'urn:ebay:apis:eBLBaseComponents', 'ProductSearchResultType');
  RemClassRegistry.RegisterXSClass(ProductSearchPageType, 'urn:ebay:apis:eBLBaseComponents', 'ProductSearchPageType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(CharacteristicsSetProductHistogramType), 'urn:ebay:apis:eBLBaseComponents', 'CharacteristicsSetProductHistogramType');
  RemClassRegistry.RegisterXSClass(HistogramEntryType, 'urn:ebay:apis:eBLBaseComponents', 'HistogramEntryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(HistogramEntryType), 'name_', 'name');
  RemClassRegistry.RegisterXSClass(ReviewType, 'urn:ebay:apis:eBLBaseComponents', 'ReviewType');
  RemClassRegistry.RegisterXSClass(ReviewDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ReviewDetailsType');
  RemClassRegistry.RegisterXSClass(CatalogProductType, 'urn:ebay:apis:eBLBaseComponents', 'CatalogProductType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionRuleArrayType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionRuleArrayType');
  RemClassRegistry.RegisterXSClass(PromotionRuleType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionRuleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(PromotionalSaleArrayType), 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemIDArrayType');
  RemClassRegistry.RegisterXSClass(PromotionalSaleType, 'urn:ebay:apis:eBLBaseComponents', 'PromotionalSaleType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(AuthenticationEntryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'AuthenticationEntryArrayType');
  RemClassRegistry.RegisterXSClass(AuthenticationEntryType, 'urn:ebay:apis:eBLBaseComponents', 'AuthenticationEntryType');
  RemClassRegistry.RegisterXSClass(PriceRangeFilterType, 'urn:ebay:apis:eBLBaseComponents', 'PriceRangeFilterType');
  RemClassRegistry.RegisterXSClass(UserIdFilterType, 'urn:ebay:apis:eBLBaseComponents', 'UserIdFilterType');
  RemClassRegistry.RegisterXSClass(SearchLocationFilterType, 'urn:ebay:apis:eBLBaseComponents', 'SearchLocationFilterType');
  RemClassRegistry.RegisterXSClass(SearchStoreFilterType, 'urn:ebay:apis:eBLBaseComponents', 'SearchStoreFilterType');
  RemClassRegistry.RegisterXSClass(SearchRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SearchRequestType');
  RemClassRegistry.RegisterXSClass(RequestCategoriesType, 'urn:ebay:apis:eBLBaseComponents', 'RequestCategoriesType');
  RemClassRegistry.RegisterXSClass(BidRangeType, 'urn:ebay:apis:eBLBaseComponents', 'BidRangeType');
  RemClassRegistry.RegisterXSClass(DateType, 'urn:ebay:apis:eBLBaseComponents', 'DateType');
  RemClassRegistry.RegisterXSClass(TicketDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'TicketDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SearchResultItemArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SearchResultItemArrayType');
  RemClassRegistry.RegisterXSClass(SpellingSuggestionType, 'urn:ebay:apis:eBLBaseComponents', 'SpellingSuggestionType');
  RemClassRegistry.RegisterXSClass(SearchResultItemType, 'urn:ebay:apis:eBLBaseComponents', 'SearchResultItemType');
  RemClassRegistry.RegisterXSClass(ExpansionArrayType, 'urn:ebay:apis:eBLBaseComponents', 'ExpansionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DomainHistogramType), 'urn:ebay:apis:eBLBaseComponents', 'DomainHistogramType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ProductArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ProductArrayType');
  RemClassRegistry.RegisterXSClass(ExpressHistogramDomainDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressHistogramDomainDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ExpressHistogramDomainDetailsType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(ExpressHistogramProductType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressHistogramProductType');
  RemClassRegistry.RegisterXSClass(ExpressHistogramAisleType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressHistogramAisleType');
  RemClassRegistry.RegisterXSClass(ExpressHistogramDepartmentType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressHistogramDepartmentType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UserIDArrayType), 'urn:ebay:apis:eBLBaseComponents', 'UserIDArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SKUArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SKUArrayType');
  RemClassRegistry.RegisterXSClass(SellerPaymentType, 'urn:ebay:apis:eBLBaseComponents', 'SellerPaymentType');
  RemClassRegistry.RegisterXSClass(CalculatedHandlingDiscountType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedHandlingDiscountType');
  RemClassRegistry.RegisterXSClass(FlatRateInsuranceRangeCostType, 'urn:ebay:apis:eBLBaseComponents', 'FlatRateInsuranceRangeCostType');
  RemClassRegistry.RegisterXSClass(ShippingInsuranceType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingInsuranceType');
  RemClassRegistry.RegisterXSClass(StoreLogoType, 'urn:ebay:apis:eBLBaseComponents', 'StoreLogoType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreLogoType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomCategoryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomCategoryArrayType');
  RemClassRegistry.RegisterXSClass(StoreColorType, 'urn:ebay:apis:eBLBaseComponents', 'StoreColorType');
  RemClassRegistry.RegisterXSClass(StoreFontType, 'urn:ebay:apis:eBLBaseComponents', 'StoreFontType');
  RemClassRegistry.RegisterXSClass(StoreColorSchemeType, 'urn:ebay:apis:eBLBaseComponents', 'StoreColorSchemeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreColorSchemeType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(StoreThemeType, 'urn:ebay:apis:eBLBaseComponents', 'StoreThemeType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreThemeType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(StoreCustomCategoryType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomCategoryType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomCategoryType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSClass(StoreCustomListingHeaderLinkType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderLinkType');
  RemClassRegistry.RegisterXSClass(StoreCustomListingHeaderType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomListingHeaderType');
  RemClassRegistry.RegisterXSClass(StoreType, 'urn:ebay:apis:eBLBaseComponents', 'StoreType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreCustomPageArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomPageArrayType');
  RemClassRegistry.RegisterXSClass(StoreCustomPageType, 'urn:ebay:apis:eBLBaseComponents', 'StoreCustomPageType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(StoreCustomPageType), 'Name_', 'Name');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreLogoArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreLogoArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreSubscriptionArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreSubscriptionArrayType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(StoreColorSchemeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'StoreColorSchemeArrayType');
  RemClassRegistry.RegisterXSClass(StoreThemeArrayType, 'urn:ebay:apis:eBLBaseComponents', 'StoreThemeArrayType');
  RemClassRegistry.RegisterXSClass(StoreSubscriptionType, 'urn:ebay:apis:eBLBaseComponents', 'StoreSubscriptionType');
  RemClassRegistry.RegisterXSClass(StoreVacationPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'StoreVacationPreferencesType');
  RemClassRegistry.RegisterXSClass(StorePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'StorePreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(SuggestedCategoryArrayType), 'urn:ebay:apis:eBLBaseComponents', 'SuggestedCategoryArrayType');
  RemClassRegistry.RegisterXSClass(SuggestedCategoryType, 'urn:ebay:apis:eBLBaseComponents', 'SuggestedCategoryType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(DisputeArrayType), 'urn:ebay:apis:eBLBaseComponents', 'DisputeArrayType');
  RemClassRegistry.RegisterXSClass(DisputeFilterCountType, 'urn:ebay:apis:eBLBaseComponents', 'DisputeFilterCountType');
  RemClassRegistry.RegisterXSClass(BidderNoticePreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'BidderNoticePreferencesType');
  RemClassRegistry.RegisterXSClass(CrossPromotionPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'CrossPromotionPreferencesType');
  RemClassRegistry.RegisterXSClass(SellerPaymentPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerPaymentPreferencesType');
  RemClassRegistry.RegisterXSClass(SellerFavoriteItemPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'SellerFavoriteItemPreferencesType');
  RemClassRegistry.RegisterXSClass(EndOfAuctionEmailPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'EndOfAuctionEmailPreferencesType');
  RemClassRegistry.RegisterXSClass(ExpressPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'ExpressPreferencesType');
  RemClassRegistry.RegisterXSClass(CalculatedShippingPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'CalculatedShippingPreferencesType');
  RemClassRegistry.RegisterXSClass(FlatShippingPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'FlatShippingPreferencesType');
  RemClassRegistry.RegisterXSClass(CombinedPaymentPreferencesType, 'urn:ebay:apis:eBLBaseComponents', 'CombinedPaymentPreferencesType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReasonCodeDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReasonCodeDetailsType');
  RemClassRegistry.RegisterXSClass(ReasonCodeDetailType, 'urn:ebay:apis:eBLBaseComponents', 'ReasonCodeDetailType');
  RemClassRegistry.RegisterXSClass(VeROSiteDetailType, 'urn:ebay:apis:eBLBaseComponents', 'VeROSiteDetailType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportedItemDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportedItemDetailsType');
  RemClassRegistry.RegisterXSClass(VeROReportedItemType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportedItemType');
  RemClassRegistry.RegisterXSClass(WantItNowPostType, 'urn:ebay:apis:eBLBaseComponents', 'WantItNowPostType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(WantItNowPostArrayType), 'urn:ebay:apis:eBLBaseComponents', 'WantItNowPostArrayType');
  RemClassRegistry.RegisterXSClass(CountryDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'CountryDetailsType');
  RemClassRegistry.RegisterXSClass(CurrencyDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'CurrencyDetailsType');
  RemClassRegistry.RegisterXSClass(DispatchTimeMaxDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'DispatchTimeMaxDetailsType');
  RemClassRegistry.RegisterXSClass(PaymentOptionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'PaymentOptionDetailsType');
  RemClassRegistry.RegisterXSClass(RegionDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RegionDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingLocationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingLocationDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingServiceDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingServiceDetailsType');
  RemClassRegistry.RegisterXSClass(SiteDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteDetailsType');
  RemClassRegistry.RegisterXSClass(URLDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'URLDetailsType');
  RemClassRegistry.RegisterXSClass(TimeZoneDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'TimeZoneDetailsType');
  RemClassRegistry.RegisterXSClass(ItemSpecificDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemSpecificDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(UnitOfMeasurementDetailsType), 'urn:ebay:apis:eBLBaseComponents', 'UnitOfMeasurementDetailsType');
  RemClassRegistry.RegisterXSClass(RegionOfOriginDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'RegionOfOriginDetailsType');
  RemClassRegistry.RegisterXSClass(ShippingPackageDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingPackageDetailsType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ShippingPackageDetailsType), 'Default_', 'Default');
  RemClassRegistry.RegisterXSClass(ShippingCarrierDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ShippingCarrierDetailsType');
  RemClassRegistry.RegisterXSClass(UnitOfMeasurementType, 'urn:ebay:apis:eBLBaseComponents', 'UnitOfMeasurementType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(ItemRatingDetailArrayType), 'urn:ebay:apis:eBLBaseComponents', 'ItemRatingDetailArrayType');
  RemClassRegistry.RegisterXSClass(ItemRatingDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'ItemRatingDetailsType');
  RemClassRegistry.RegisterXSClass(Base64BinaryType, 'urn:ebay:apis:eBLBaseComponents', 'Base64BinaryType');
  RemClassRegistry.RegisterXSClass(PictureSetMemberType, 'urn:ebay:apis:eBLBaseComponents', 'PictureSetMemberType');
  RemClassRegistry.RegisterXSClass(SiteHostedPictureDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'SiteHostedPictureDetailsType');
  RemClassRegistry.RegisterXSInfo(TypeInfo(VeROReportItemsType), 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsType');
  RemClassRegistry.RegisterXSClass(VeROReportItemType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemType');
  RemClassRegistry.RegisterXSClass(BotBlockRequestType, 'urn:ebay:apis:eBLBaseComponents', 'BotBlockRequestType');
  RemClassRegistry.RegisterXSClass(AbstractRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AbstractRequestType');
  RemClassRegistry.RegisterXSClass(VeROReportItemsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsRequestType');
  RemClassRegistry.RegisterSerializeOptions(VeROReportItemsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(UploadSiteHostedPicturesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesRequestType');
  RemClassRegistry.RegisterSerializeOptions(UploadSiteHostedPicturesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(LeaveFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(LeaveFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetUserPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStorePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStorePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCustomPageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCustomPageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCategoriesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCategoriesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetShippingDiscountProfilesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetShippingDiscountProfilesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerTransactionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetSellerTransactionsRequestType), 'Platform_', 'Platform');
  RemClassRegistry.RegisterSerializeOptions(GetSellerTransactionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSearchResultsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSearchResultsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetReturnURLRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetReturnURLRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetReturnURLRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleListingsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleListingsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductSellingPagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductSellingPagesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetProductSellingPagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetProductsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPictureManagerDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetPictureManagerDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetPictureManagerDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrderTransactionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetOrderTransactionsRequestType), 'Platform_', 'Platform');
  RemClassRegistry.RegisterSerializeOptions(GetOrderTransactionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrdersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetOrdersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetNotificationPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetNotificationPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayRemindersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayRemindersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayBuyingRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayBuyingRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBaySellingRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBaySellingRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetMessagePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetMessagePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryListingsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryListingsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryListingsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetCartRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetCartRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetCartRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCartRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCartRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCartRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSearchResultsExpressRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsExpressRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSearchResultsExpressRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(PlaceOfferRequestType, 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferRequestType');
  RemClassRegistry.RegisterSerializeOptions(PlaceOfferRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAccountRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAccountRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAccountRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetExpressWishListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetExpressWishListRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetExpressWishListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemTransactionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetItemTransactionsRequestType), 'Platform_', 'Platform');
  RemClassRegistry.RegisterSerializeOptions(GetItemTransactionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemsAwaitingFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetItemsAwaitingFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetLiveAuctionBiddersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionBiddersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetLiveAuctionBiddersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMemberMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMemberMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPopularKeywordsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetPopularKeywordsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetPopularKeywordsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerPaymentsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerPaymentsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerPaymentsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserDisputesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserDisputesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReportStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReportStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetWantItNowSearchResultsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowSearchResultsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetWantItNowSearchResultsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteMyMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesRequestType');
  RemClassRegistry.RegisterSerializeOptions(DeleteMyMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMyMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(ReviseMyMessagesRequestType), 'Read_', 'Read');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ApproveLiveAuctionBiddersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ApproveLiveAuctionBiddersRequestType');
  RemClassRegistry.RegisterSerializeOptions(ApproveLiveAuctionBiddersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(CompleteSaleRequestType, 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleRequestType');
  RemClassRegistry.RegisterSerializeOptions(CompleteSaleRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseCheckoutStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseCheckoutStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddOrderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddOrderRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddOrderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageAAQToPartnerRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageAAQToPartnerRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageRTQRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageRTQRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetTaxTableRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetTaxTableRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SendInvoiceRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceRequestType');
  RemClassRegistry.RegisterSerializeOptions(SendInvoiceRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetContextualKeywordsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetContextualKeywordsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetContextualKeywordsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPromotionRulesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionRulesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetPromotionRulesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPromotionalSaleDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetPromotionalSaleDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCategoryUpdateStatusRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCategoryUpdateStatusRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCustomPageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCustomPageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReasonCodeDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReasonCodeDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesFoldersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesFoldersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSecondChanceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddSecondChanceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddTransactionConfirmationItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddTransactionConfirmationItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(IssueRefundRequestType, 'urn:ebay:apis:eBLBaseComponents', 'IssueRefundRequestType');
  RemClassRegistry.RegisterSerializeOptions(IssueRefundRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToBestOfferRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferRequestType');
  RemClassRegistry.RegisterSerializeOptions(RespondToBestOfferRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddSecondChanceItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddSecondChanceItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(FetchTokenRequestType, 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenRequestType');
  RemClassRegistry.RegisterSerializeOptions(FetchTokenRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAdFormatLeadsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAdFormatLeadsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAllBiddersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAllBiddersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAttributesCSRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesCSRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAttributesCSRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBidderListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetBidderListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoriesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoriesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryFeaturesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryFeaturesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCharitiesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCharitiesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCharitiesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDescriptionTemplatesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetDescriptionTemplatesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMessagePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetMessagePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerEventsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerEventsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RemoveFromWatchListRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListRequestType');
  RemClassRegistry.RegisterSerializeOptions(RemoveFromWatchListRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateChallengeInputRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputRequestType');
  RemClassRegistry.RegisterSerializeOptions(ValidateChallengeInputRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateTestUserRegistrationRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationRequestType');
  RemClassRegistry.RegisterSerializeOptions(ValidateTestUserRegistrationRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddLiveAuctionItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddLiveAuctionItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddLiveAuctionItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RelistItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RelistItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(RelistItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseLiveAuctionItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseLiveAuctionItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(ReviseLiveAuctionItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeResponseRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeResponseRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategorySpecificsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategorySpecificsRequestType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(GetCategorySpecificsRequestType), 'Name_', 'Name');
  RemClassRegistry.RegisterSerializeOptions(GetCategorySpecificsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationsUsageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationsUsageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToItemDescriptionRequestType, 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionRequestType');
  RemClassRegistry.RegisterSerializeOptions(AddToItemDescriptionRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndItemRequestType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemRequestType');
  RemClassRegistry.RegisterSerializeOptions(EndItemRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetApiAccessRulesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetApiAccessRulesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetApiAccessRulesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAttributesXSLRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesXSLRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetAttributesXSLRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBestOffersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetBestOffersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategory2CSRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategory2CSRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategory2CSRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryMappingsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryMappingsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetChallengeTokenRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetChallengeTokenRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCrossPromotionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetCrossPromotionsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetCrossPromotionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDisputeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetDisputeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetHighBiddersRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetHighBiddersRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetHighBiddersRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemShippingRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetItemShippingRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetLiveAuctionCatalogDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionCatalogDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetLiveAuctionCatalogDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationPreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationPreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPictureManagerDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetPictureManagerDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPictureManagerOptionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerOptionsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetPictureManagerOptionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductFinderRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetProductFinderRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductFinderXSLRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderXSLRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetProductFinderXSLRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductSearchPageRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchPageRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetProductSearchPageRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetReturnURLRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetReturnURLRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetReturnURLRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetRuNameRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetRuNameRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetRuNameRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetShippingDiscountProfilesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetShippingDiscountProfilesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreOptionsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreOptionsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStorePreferencesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetStorePreferencesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSuggestedCategoriesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetSuggestedCategoriesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetTaxTableRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetTaxTableRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserContactDetailsRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetUserContactDetailsRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetWantItNowPostRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowPostRequestType');
  RemClassRegistry.RegisterSerializeOptions(GetWantItNowPostRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayOfficialTimeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeRequestType');
  RemClassRegistry.RegisterSerializeOptions(GeteBayOfficialTimeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToFeedbackRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackRequestType');
  RemClassRegistry.RegisterSerializeOptions(RespondToFeedbackRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToWantItNowPostRequestType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToWantItNowPostRequestType');
  RemClassRegistry.RegisterSerializeOptions(RespondToWantItNowPostRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SellerReverseDisputeRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeRequestType');
  RemClassRegistry.RegisterSerializeOptions(SellerReverseDisputeRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserNotesRequestType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesRequestType');
  RemClassRegistry.RegisterSerializeOptions(SetUserNotesRequestType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DuplicateInvocationDetailsType, 'urn:ebay:apis:eBLBaseComponents', 'DuplicateInvocationDetailsType');
  RemClassRegistry.RegisterXSClass(BotBlockResponseType, 'urn:ebay:apis:eBLBaseComponents', 'BotBlockResponseType');
  RemClassRegistry.RegisterXSClass(ErrorParameterType, 'urn:ebay:apis:eBLBaseComponents', 'ErrorParameterType');
  RemClassRegistry.RegisterXSClass(ErrorType, 'urn:ebay:apis:eBLBaseComponents', 'ErrorType');
  RemClassRegistry.RegisterXSClass(AbstractResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AbstractResponseType');
  RemClassRegistry.RegisterExternalPropName(TypeInfo(AbstractResponseType), 'Message_', 'Message');
  RemClassRegistry.RegisterXSClass(ValidateTestUserRegistrationResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateTestUserRegistrationResponseType');
  RemClassRegistry.RegisterSerializeOptions(ValidateTestUserRegistrationResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserPreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetUserPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetUserNotesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetUserNotesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetUserNotesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetTaxTableResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetTaxTableResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetTaxTableResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStorePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStorePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStorePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetShippingDiscountProfilesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetShippingDiscountProfilesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetShippingDiscountProfilesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetReturnURLResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetReturnURLResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetReturnURLResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleListingsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleListingsResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleListingsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPictureManagerDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetPictureManagerDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetPictureManagerDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetNotificationPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetNotificationPreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetNotificationPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetMessagePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetMessagePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetMessagePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SendInvoiceResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SendInvoiceResponseType');
  RemClassRegistry.RegisterSerializeOptions(SendInvoiceResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SellerReverseDisputeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SellerReverseDisputeResponseType');
  RemClassRegistry.RegisterSerializeOptions(SellerReverseDisputeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesFoldersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesFoldersResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesFoldersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseMyMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseMyMessagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseMyMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseCheckoutStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseCheckoutStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseCheckoutStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToWantItNowPostResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToWantItNowPostResponseType');
  RemClassRegistry.RegisterSerializeOptions(RespondToWantItNowPostResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(RespondToFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RemoveFromWatchListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RemoveFromWatchListResponseType');
  RemClassRegistry.RegisterSerializeOptions(RemoveFromWatchListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(LeaveFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'LeaveFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(LeaveFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayOfficialTimeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayOfficialTimeResponseType');
  RemClassRegistry.RegisterSerializeOptions(GeteBayOfficialTimeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCategoryUpdateStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCategoryUpdateStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCategoryUpdateStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetRuNameResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetRuNameResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetRuNameResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductSellingPagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductSellingPagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetProductSellingPagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductFinderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductFinderResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetProductFinderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetChallengeTokenResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetChallengeTokenResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetChallengeTokenResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAttributesCSResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAttributesCSResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetAttributesCSResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(DeleteMyMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'DeleteMyMessagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(DeleteMyMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(CompleteSaleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'CompleteSaleResponseType');
  RemClassRegistry.RegisterSerializeOptions(CompleteSaleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToWatchListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddToWatchListResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddToWatchListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddToItemDescriptionResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddToItemDescriptionResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddToItemDescriptionResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageRTQResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageRTQResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageRTQResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddMemberMessageAAQToPartnerResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddMemberMessageAAQToPartnerResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddMemberMessageAAQToPartnerResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeResponseResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeResponseResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddDisputeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddDisputeResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddDisputeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddSecondChanceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddSecondChanceItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddSecondChanceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(FetchTokenResponseType, 'urn:ebay:apis:eBLBaseComponents', 'FetchTokenResponseType');
  RemClassRegistry.RegisterSerializeOptions(FetchTokenResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(EndItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'EndItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(EndItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddTransactionConfirmationItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddTransactionConfirmationItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddTransactionConfirmationItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddSecondChanceItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddSecondChanceItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddSecondChanceItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddOrderResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddOrderResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddOrderResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ValidateChallengeInputResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ValidateChallengeInputResponseType');
  RemClassRegistry.RegisterSerializeOptions(ValidateChallengeInputResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(IssueRefundResponseType, 'urn:ebay:apis:eBLBaseComponents', 'IssueRefundResponseType');
  RemClassRegistry.RegisterSerializeOptions(IssueRefundResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCrossPromotionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCrossPromotionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCrossPromotionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetUserResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemShippingResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemShippingResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemShippingResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VeROReportItemsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VeROReportItemsResponseType');
  RemClassRegistry.RegisterSerializeOptions(VeROReportItemsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCategoriesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCategoriesResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCategoriesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetPromotionalSaleResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetPromotionalSaleResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetPromotionalSaleResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserContactDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserContactDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetUserContactDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetTaxTableResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetTaxTableResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetTaxTableResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(VerifyAddItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'VerifyAddItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(VerifyAddItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseLiveAuctionItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseLiveAuctionItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseLiveAuctionItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ReviseItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ReviseItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(ReviseItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RelistItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RelistItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(RelistItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddLiveAuctionItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddLiveAuctionItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddLiveAuctionItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(AddItemResponseType, 'urn:ebay:apis:eBLBaseComponents', 'AddItemResponseType');
  RemClassRegistry.RegisterSerializeOptions(AddItemResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(ApproveLiveAuctionBiddersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'ApproveLiveAuctionBiddersResponseType');
  RemClassRegistry.RegisterSerializeOptions(ApproveLiveAuctionBiddersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerTransactionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerTransactionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerTransactionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemTransactionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemTransactionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemTransactionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAccountResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAccountResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetAccountResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAdFormatLeadsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAdFormatLeadsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetAdFormatLeadsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMemberMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMemberMessagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMemberMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetHighBiddersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetHighBiddersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetHighBiddersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetAllBiddersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetAllBiddersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetAllBiddersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(RespondToBestOfferResponseType, 'urn:ebay:apis:eBLBaseComponents', 'RespondToBestOfferResponseType');
  RemClassRegistry.RegisterSerializeOptions(RespondToBestOfferResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBestOffersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetBestOffersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetBestOffersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(PlaceOfferResponseType, 'urn:ebay:apis:eBLBaseComponents', 'PlaceOfferResponseType');
  RemClassRegistry.RegisterSerializeOptions(PlaceOfferResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerListResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerEventsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerEventsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerEventsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetBidderListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetBidderListResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetBidderListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetCartResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetCartResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetCartResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCartResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCartResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCartResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPopularKeywordsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetPopularKeywordsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetPopularKeywordsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoriesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoriesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoriesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategory2CSResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategory2CSResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategory2CSResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryFeaturesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryFeaturesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryFeaturesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryListingsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryListingsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryListingsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetCategoryMappingsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetCategoryMappingsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetCategoryMappingsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDescriptionTemplatesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetDescriptionTemplatesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetDescriptionTemplatesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetDisputeResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetDisputeResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetDisputeResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetExpressWishListResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetExpressWishListResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetExpressWishListResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetItemsAwaitingFeedbackResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetItemsAwaitingFeedbackResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetItemsAwaitingFeedbackResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetLiveAuctionBiddersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetLiveAuctionBiddersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetLiveAuctionBiddersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMessagePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMessagePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMessagePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyMessagesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyMessagesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMyMessagesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayBuyingResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayBuyingResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayBuyingResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBayRemindersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBayRemindersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBayRemindersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetMyeBaySellingResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetMyeBaySellingResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetMyeBaySellingResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationPreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetNotificationsUsageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetNotificationsUsageResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetNotificationsUsageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrdersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrdersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetOrdersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetOrderTransactionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetOrderTransactionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetOrderTransactionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPictureManagerDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetPictureManagerDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPictureManagerOptionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetPictureManagerOptionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetPictureManagerOptionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductSearchResultsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchResultsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetProductSearchResultsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductFamilyMembersResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductFamilyMembersResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetProductFamilyMembersResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductSearchPageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductSearchPageResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetProductSearchPageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetProductsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetProductsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetProductsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPromotionRulesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionRulesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetPromotionRulesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetPromotionalSaleDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetPromotionalSaleDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetPromotionalSaleDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetReturnURLResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetReturnURLResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetReturnURLResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSearchResultsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSearchResultsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSearchResultsExpressResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSearchResultsExpressResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSearchResultsExpressResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSellerPaymentsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSellerPaymentsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSellerPaymentsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetShippingDiscountProfilesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetShippingDiscountProfilesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetShippingDiscountProfilesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreCustomPageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreCustomPageResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreCustomPageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(SetStoreCustomPageResponseType, 'urn:ebay:apis:eBLBaseComponents', 'SetStoreCustomPageResponseType');
  RemClassRegistry.RegisterSerializeOptions(SetStoreCustomPageResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStoreOptionsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStoreOptionsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStoreOptionsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetStorePreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetStorePreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetStorePreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetSuggestedCategoriesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetSuggestedCategoriesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetSuggestedCategoriesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserDisputesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserDisputesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetUserDisputesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetUserPreferencesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetUserPreferencesResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetUserPreferencesResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReasonCodeDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReasonCodeDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReasonCodeDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetVeROReportStatusResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetVeROReportStatusResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetVeROReportStatusResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetWantItNowPostResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowPostResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetWantItNowPostResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GetWantItNowSearchResultsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GetWantItNowSearchResultsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GetWantItNowSearchResultsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(GeteBayDetailsResponseType, 'urn:ebay:apis:eBLBaseComponents', 'GeteBayDetailsResponseType');
  RemClassRegistry.RegisterSerializeOptions(GeteBayDetailsResponseType, [xoLiteralParam]);
  RemClassRegistry.RegisterXSClass(UploadSiteHostedPicturesResponseType, 'urn:ebay:apis:eBLBaseComponents', 'UploadSiteHostedPicturesResponseType');
  RemClassRegistry.RegisterSerializeOptions(UploadSiteHostedPicturesResponseType, [xoLiteralParam]);

end.