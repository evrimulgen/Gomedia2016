unit AccountCreatorMainFrmUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, DB, Grids, DBGrids,
  ExtCtrls, DBAdvNavigator, ToolWin, ActnMan, ActnCtrls, ActnList,
  XPStyleActnCtrls, ImgList, DBClient, DBCtrls, dxBar,
  dxBarExtDBItems, ComCtrls, Midaslib,
  dxBarDBNav, DBXpress, FMTBcd, SqlExpr, Provider;

type
  TMainForm = class(TForm)
    DSUsers: TDataSource;
    Servers: TClientDataSet;
    DataSourceServers: TDataSource;
    ImageList: TImageList;
    ActionManager1: TActionManager;
    ActionClear: TAction;
    ActionCreateAccount: TAction;
    ActionManageServers: TAction;
    dxBarManager1: TdxBarManager;
    dxBarButtonClear: TdxBarButton;
    dxBarButtonCreateAccount: TdxBarButton;
    dxBarButtonGenerateData: TdxBarButton;
    serverlookup: TdxBarLookupCombo;
    dxBarButton1: TdxBarButton;
    PanelCustomerData: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    PanelDbGrid: TPanel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label18: TLabel;
    Label19: TLabel;
    Label20: TLabel;
    Label21: TLabel;
    Label22: TLabel;
    Label23: TLabel;
    Label24: TLabel;
    Label25: TLabel;
    Label26: TLabel;
    Label27: TLabel;
    Label28: TLabel;
    PageControlGrids: TPageControl;
    TabSheetUsers: TTabSheet;
    DBGrid1: TDBGrid;
    TabSheetShops: TTabSheet;
    DSShops: TDataSource;
    DataSource3: TDataSource;
    DBGridShops: TDBGrid;
    dxBarDBNavigator1: TdxBarDBNavigator;
    dxBarDBNavFirst1: TdxBarDBNavButton;
    dxBarDBNavPrev1: TdxBarDBNavButton;
    dxBarDBNavNext1: TdxBarDBNavButton;
    dxBarDBNavLast1: TdxBarDBNavButton;
    dxBarDBNavInsert1: TdxBarDBNavButton;
    dxBarDBNavDelete1: TdxBarDBNavButton;
    dxBarDBNavEdit1: TdxBarDBNavButton;
    dxBarDBNavCancel1: TdxBarDBNavButton;
    dxBarDBNavPost1: TdxBarDBNavButton;
    dxBarDBNavRefresh1: TdxBarDBNavButton;
    DataSourceRequests: TDataSource;
    Label29: TLabel;
    Label30: TLabel;
    Label31: TLabel;
    Label32: TLabel;
    SQLConnection: TSQLConnection;
    DPShops: TDataSetProvider;
    SQLDSShops: TSQLDataSet;
    CDShops: TClientDataSet;
    CDShopsshops_id: TIntegerField;
    CDShopsshops_name: TStringField;
    CDShopsshops_customers_id: TIntegerField;
    CDShopsshops_title: TStringField;
    CDShopsshops_adress_one: TStringField;
    CDShopsshops_adress_two: TStringField;
    CDShopsshops_phone: TStringField;
    CDShopsshops_map_url: TStringField;
    CDShopsshops_schedule_1: TStringField;
    CDShopsshops_schedule_2: TStringField;
    CDShopsshops_schedule_3: TStringField;
    CDShopsshops_schedule_4: TStringField;
    CDShopsshops_schedule_5: TStringField;
    CDShopsshops_schedule_6: TStringField;
    CDShopsshops_schedule_7: TStringField;
    CDShopsshops_manager_name: TStringField;
    CDShopsshops_manager_email: TStringField;
    CDShopsshops_picture_url: TStringField;
    CDShopsshops_zone_id: TIntegerField;
    CDShopsshops_country_id: TIntegerField;
    CDShopsshops_logo_url: TStringField;
    CDShopsshops_group_id: TIntegerField;
    CDShopsshops_details: TMemoField;
    CDShopsshops_TVA: TStringField;
    CDShopsshops_registry: TStringField;
    CDShopsshops_bank: TStringField;
    EditCustLogin: TEdit;
    EditCustPass: TEdit;
    EditCustUrl: TEdit;
    EditCustID: TEdit;
    EditCustGroupId: TEdit;
    EditFTPHost: TEdit;
    EditDBNAme: TEdit;
    EditDBLogin: TEdit;
    EditDBPass: TEdit;
    SQLDSUsers: TSQLDataSet;
    DPUsers: TDataSetProvider;
    SQLConnectionUsers: TSQLConnection;
    EditDBHost: TEdit;
    EditFTPUser: TEdit;
    EditFTPPwd: TEdit;
    EditFTPDir: TEdit;
    ServersServersName: TStringField;
    ServersServersDBHost: TStringField;
    ServersServersDBName: TStringField;
    ServersServersDBUser: TStringField;
    ServersServersDBPass: TStringField;
    ServersServersFTPHost: TStringField;
    ServersServersFTPUser: TStringField;
    ServersServersFTPPwd: TStringField;
    ServersServersFTPDir: TStringField;
    SQLDSUsersfield2: TStringField;
    SQLDSUsersfield3: TStringField;
    SQLDSUsersfield4: TStringField;
    SQLDSUsersfield5: TStringField;
    SQLDSUsersfield6: TStringField;
    SQLDSUsersfield7: TStringField;
    SQLDSUsersfield8: TStringField;
    SQLDSUsersfield9: TStringField;
    SQLDSUsersfield10: TStringField;
    SQLDSUsersfield11: TStringField;
    SQLDSUsersfield12: TStringField;
    SQLDSUsersfield13: TStringField;
    SQLDSUsersfield14: TStringField;
    CDUsers: TClientDataSet;
    CDUsersfield2: TStringField;
    CDUsersfield3: TStringField;
    CDUsersfield4: TStringField;
    CDUsersfield5: TStringField;
    CDUsersfield6: TStringField;
    CDUsersfield7: TStringField;
    CDUsersfield8: TStringField;
    CDUsersfield9: TStringField;
    CDUsersfield10: TStringField;
    CDUsersfield11: TStringField;
    CDUsersfield12: TStringField;
    CDUsersfield13: TStringField;
    CDUsersfield14: TStringField;
    SQLDSUsersfield1: TIntegerField;
    CDUsersfield1: TIntegerField;
    procedure FormCreate(Sender: TObject);
    procedure ActionClearExecute(Sender: TObject);
    procedure ActionCreateAccountExecute(Sender: TObject);
    procedure ActionManageServersExecute(Sender: TObject);
    procedure serverlookupChange(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure PageControlGridsChange(Sender: TObject);
    procedure DPUsersBeforeUpdateRecord(Sender: TObject;
      SourceDS: TDataSet; DeltaDS: TCustomClientDataSet;
      UpdateKind: TUpdateKind; var Applied: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

uses
 LbCipher,LbString, ServersManagersFrmUnit;

var
 key128b : TKey128;

Const
 USERDBLogin='/W4MSrXiGmJm7stZdQu/yw==';
 USERDBPwd='ZObrpTuDXUM+kNLhZ1OHog==';
 USERDBHost='yRwS8qatphEVykqfaAwtpg==';
 USERDBName='WbJPeNMFL4cfBoWitp6iOg==';

 {$R *.dfm}

procedure TMainForm.FormCreate(Sender: TObject);
begin
 GenerateLMDKey(Key128b,sizeof(Key128b),'jonamedia');
 SQLConnectionUsers.Params.Values['user_name']:=Trim(RDLEncryptStringEx(USERDBLogin,Key128b,16,False));
 SQLConnectionUsers.Params.Values['PassWord']:=Trim(RDLEncryptStringEx(USERDBpwd,Key128b,16,False));
 SQLConnectionUsers.Params.Values['HostName']:=Trim(RDLEncryptStringEx(USERDBHost,Key128b,16,False));
 SQLConnectionUsers.Params.Values['Database']:=Trim(RDLEncryptStringEx(USERDBName,Key128b,16,False));
 showmessage (SQLConnectionUsers.Params.Values['PassWord']);
 CDUsers.Open;
// SQLQueryRequests.Open
end;

procedure TMainForm.ActionClearExecute(Sender: TObject);
begin
// EditCustLogin.Text:='';
// EditCustPass.Text:='';
// EditCustUrl.Text:='';
 EditCustID.Text:='0000';
 EditCustGroupID.Text:='0000';
// EditDBHost.Text:='';
// EditDBLogin.Text:='';
// EditDBPass.Text:='';
// EditDBName.Text:='';
end;

procedure TMainForm.ActionCreateAccountExecute(Sender: TObject);
begin
 ///
 /// Création du Shop et Customer
 ///

 ///
 /// Création du User SoftWare
 ///
 If (Length(EditCustLogin.Text)>4) and (Length(EditCustPass.Text)>4) then begin
  if Not CDUsers.Locate('Field2',EditCustLogin.Text,[locaseinsensitive])then begin
   CDUsers.Append;
   CDUsers.FieldByName('Field1').Value:=-1;
   CDUsers.FieldByName('Field2').Value:=EditCustLogin.Text;
   CDUsers.FieldByName('Field3').Value:=RDLEncryptStringEx(EditCustPass.Text,Key128b,16,True);
   CDUsers.FieldByName('Field4').Value:=RDLEncryptStringEx(EditDBHost.Text,Key128b,16,True);
   CDUsers.FieldByName('Field5').Value:=RDLEncryptStringEx(EditDBLogin.Text,Key128b,16,True);
   CDUsers.FieldByName('Field6').Value:=RDLEncryptStringEx(EditDBPass.Text,Key128b,16,True);
   CDUsers.FieldByName('Field7').Value:=RDLEncryptStringEx(EditDBName.Text,Key128b,16,True);
   CDUsers.FieldByName('Field8').Value:=RDLEncryptStringEx(EditCustId.Text,Key128b,16,True);
   CDUsers.FieldByName('Field9').Value:=RDLEncryptStringEx(EditCustUrl.Text,Key128b,16,True);
   CDUsers.FieldByName('Field10').Value:=RDLEncryptStringEx(EditCustGroupId.Text,Key128b,16,True);
   CDUsers.FieldByName('Field11').Value:=RDLEncryptStringEx(EditFTPHost.Text,Key128b,16,True);
   CDUsers.FieldByName('Field12').Value:=RDLEncryptStringEx(EditFTPUser.Text,Key128b,16,True);
   CDUsers.FieldByName('Field13').Value:=RDLEncryptStringEx(EditFTPPwd.Text,Key128b,16,True);
   CDUsers.FieldByName('Field14').Value:=RDLEncryptStringEx(EditFTPDir.Text,Key128b,16,True);
   CDUsers.Post;
//   CDUsers.Refresh;
  end else messagedlg('Ce login existe déjà',mtwarning,[mbok],0);
 end else messagedlg('Le login et mot de passe doivent être de min. 5 charactères',mtwarning,[mbok],0);
 ///
 /// Création du Shop et Customer
 ///
 if CDUsers.ApplyUpdates(-1)=0 then CdUsers.Refresh;
end;

procedure TMainForm.ActionManageServersExecute(Sender: TObject);
begin
 FormManageServers.ShowModal;
end;

procedure TMainForm.serverlookupChange(Sender: TObject);
begin
 CDshops.Close;
// CDcustomers.Close;
 SQLConnection.CloseDataSets;
 SQLConnection.Close;
 EditDBHost.Text:=Servers.FieldByName('ServersDBHost').Value;
 EditDBName.Text:=Servers.FieldByName('ServersDBName').Value;
 EditDBLogin.Text:=Servers.FieldByName('ServersDBUser').Value;
 EditDBPass.Text:=Servers.FieldByName('ServersDBPass').Value;
 EditFTPHost.Text:=Servers.FieldByName('ServersFTPHost').Value;
 EditFTPUser.Text:=Servers.FieldByName('ServersFTPUser').Value;
 EditFTPPwd.Text:=Servers.FieldByName('ServersFTPPwd').Value;
 EditFTPDir.Text:=Servers.FieldByName('ServersFTPDir').Value;
 SQLConnectionUsers.Params.Values['user_name']:=EditDBName.Text;
 SQLConnectionUsers.Params.Values['PassWord']:=EditDBPass.Text;
 SQLConnectionUsers.Params.Values['HostName']:=EditDBHost.Text;
 SQLConnectionUsers.Params.Values['Database']:=EditDBLogin.Text;
 CDShops.Open;
// ZCustomers.Open;
end;

procedure TMainForm.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
 SQLConnectionUsers.CloseDataSets;
 SQLConnectionUsers.Close;
end;

procedure TMainForm.PageControlGridsChange(Sender: TObject);
begin
 if PageControlGrids.ActivePage=TabsheetUsers then begin

 end;
 if PageControlGrids.ActivePage=TabsheetShops then begin

 end;
end;

procedure TMainForm.DPUsersBeforeUpdateRecord(Sender: TObject;
  SourceDS: TDataSet; DeltaDS: TCustomClientDataSet;
  UpdateKind: TUpdateKind; var Applied: Boolean);
var
Connection:TSQLConnection;
SQL,ID:String;
IdResult:Variant;
i,lastId:integer;
IdQuery:TSqlDataset;
begin
  // Obtain a pointer to the connection from the source dataset
  Connection := (SourceDS as TCustomSQLDataSet).SQLConnection;
  case UpdateKind of
    ukInsert: begin
      // Insertion dans la table customers
      SQL := Format('INSERT INTO users (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',
        [
         'field1',
         'field2',
         'field3',
         'field4',
         'field5',
         'field6',
         'field7',
         'field8',
         'field9',
         'field10',
         'field11',
         'field12',
         'field13',
         'field14',

         'Null',
         QuotedStr(vartostr(DeltaDs.FieldByName('field2').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field3').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field4').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field5').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field6').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field7').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field8').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field9').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field10').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field11').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field12').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field13').NewValue)),
         QuotedStr(vartostr(DeltaDs.FieldByName('field14').NewValue))

        ]);

      Connection.Execute(SQL, nil, nil);
      Applied:=True;
     end;
   end;
//   Connection.Free;


end;

end.
